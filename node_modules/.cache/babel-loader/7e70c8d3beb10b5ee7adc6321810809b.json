{"ast":null,"code":"import React, { useState, Component, Fragment, useEffect, useRef, useContext, PureComponent } from 'react';\nimport classNames from 'classnames';\nimport { Transition, CSSTransition } from 'react-transition-group';\nimport ReactDOM from 'react-dom';\nimport { Manager, Popper as Popper$1, Reference } from 'react-popper';\nimport NumericInput from 'react-numeric-input';\nimport { NavLink as NavLink$1 } from 'react-router-dom';\nimport MomentUtils from '@date-io/moment';\nimport { MuiPickersUtilsProvider, DatePicker as DatePicker$1 } from 'material-ui-pickers';\nimport moment from 'moment';\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core';\nimport PerfectScrollbar from 'perfect-scrollbar';\nimport { Link } from 'react-scroll';\nimport raf from 'raf';\nexport { toast as MDBToast, ToastContainer as MDBToastContainer, cssTransition as MDBcssTransition, ToastContainer, cssTransition, toast } from 'react-toastify';\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction createCommonjsModule(fn, module) {\n  return module = {\n    exports: {}\n  }, fn(module, module.exports), module.exports;\n}\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\nvar ReactPropTypesSecret_1 = ReactPropTypesSecret;\n\nfunction emptyFunction() {}\n\nfunction emptyFunctionWithReset() {}\n\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nvar factoryWithThrowingShims = function factoryWithThrowingShims() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret_1) {\n      // It is still safe when called from React.\n      return;\n    }\n\n    var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');\n    err.name = 'Invariant Violation';\n    throw err;\n  }\n\n  shim.isRequired = shim;\n\n  function getShim() {\n    return shim;\n  } // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n\n\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n  ReactPropTypes.PropTypes = ReactPropTypes;\n  return ReactPropTypes;\n};\n\nvar propTypes = createCommonjsModule(function (module) {\n  /**\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n  {\n    // By explicitly using `prop-types` you are opting into new production behavior.\n    // http://fb.me/prop-types-in-prod\n    module.exports = factoryWithThrowingShims();\n  }\n});\n\nvar Alert = function Alert(props) {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isOpen = _useState2[0],\n      setIsOpen = _useState2[1];\n\n  var closeAlert = function closeAlert() {\n    setIsOpen(false);\n  };\n\n  var handleOnExit = function handleOnExit(node) {\n    node.classList.add(\"fade\");\n    props.onClose && props.onClose();\n  };\n\n  var handleOnExited = function handleOnExited(node) {\n    props.onClosed && props.onClosed();\n  };\n\n  var className = props.className,\n      color = props.color,\n      children = props.children,\n      dismiss = props.dismiss;\n  var alertClasses = classNames(\"alert\", color && \"alert-\".concat(color), className);\n  var alertComponent;\n\n  if (dismiss) {\n    alertComponent = React.createElement(Transition, {\n      \"in\": isOpen,\n      timeout: 150,\n      unmountOnExit: true,\n      onExit: function onExit(node) {\n        return handleOnExit(node);\n      },\n      onExited: function onExited(node) {\n        return handleOnExited(node);\n      }\n    }, React.createElement(\"div\", {\n      \"data-test\": \"alert\",\n      className: alertClasses,\n      role: \"alert\"\n    }, children, React.createElement(\"button\", {\n      onClick: closeAlert,\n      type: \"button\",\n      className: \"close\",\n      \"data-dismiss\": \"alert\",\n      \"aria-label\": \"Close\"\n    }, React.createElement(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, \"\\xD7\"))));\n  } else {\n    alertComponent = React.createElement(\"div\", {\n      \"data-test\": \"alert\",\n      className: alertClasses,\n      role: \"alert\"\n    }, children);\n  }\n\n  return alertComponent;\n};\n\nAlert.defaultProps = {\n  color: \"primary\"\n};\nAlert.propTypes = {\n  className: propTypes.string,\n  color: propTypes.oneOf([\"primary\", \"secondary\", \"success\", \"danger\", \"warning\", \"info\", \"light\", \"dark\"]),\n  onClose: propTypes.func,\n  onClosed: propTypes.func\n};\n\nvar Animation =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Animation, _Component);\n\n  function Animation(props) {\n    var _this;\n\n    _classCallCheck(this, Animation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Animation).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"updatePredicate\", function () {\n      var windowHeight = window.innerHeight;\n      var scroll = window.scrollY;\n      var docHeight = document.documentElement.offsetHeight;\n\n      if (windowHeight + scroll - 100 > _this.getOffset(_this.elemRef.current) && scroll < _this.getOffset(_this.elemRef.current) || windowHeight + scroll - 100 > _this.getOffset(_this.elemRef.current) + _this.elemRef.current.clientHeight && scroll < _this.getOffset(_this.elemRef.current) + _this.elemRef.current.clientHeight || windowHeight + scroll === docHeight && _this.getOffset(_this.elemRef.current) + 100 > docHeight) {\n        // if the predicate is true, change state\n        _this.setState({\n          isVisible: true,\n          revealed: true\n        });\n      } else {\n        //  was the \"revealing\" fired at least once?\n        if (_this.state.revealed) {\n          return;\n        } else {\n          // if it wasn't, hide\n          _this.setState({\n            isVisible: false,\n            revealed: true\n          });\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStart\", function (e) {\n      _this.setState({\n        countIterations: _this.state.countIterations + 1\n      });\n\n      if (_this.props.onAnimationStart) {\n        _this.props.onAnimationStart();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleIteration\", function (e) {\n      if (_this.props.onAnimationIteration) {\n        _this.setState({\n          countIterations: _this.state.countIterations + 1\n        });\n\n        _this.props.onAnimationIteration();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEnd\", function (e) {\n      _this.setState({\n        countIterations: _this.state.countIterations + 1\n      });\n\n      if (_this.props.onAnimationEnd && _this.props.count === _this.state.countIterations) {\n        _this.props.onAnimationEnd();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getOffset\", function (elem) {\n      var box = elem.getBoundingClientRect();\n      var body = document.body;\n      var docEl = document.documentElement;\n      var scrollTop = window.pageYOffset || docEl.scrollTop || body.scrollTop;\n      var clientTop = docEl.clientTop || body.clientTop || 0;\n      var top = box.top + scrollTop - clientTop;\n      return Math.round(top);\n    });\n\n    _this.state = {\n      isVisible: _this.props.reveal ? false : true,\n      revealed: _this.props.reveal ? false : true,\n      countIterations: 0\n    };\n    _this.elemRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(Animation, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // add EL on window if the animation is to \"reveal\"\n      if (this.props.reveal) {\n        window.addEventListener('scroll', this.updatePredicate);\n        this.updatePredicate();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.props.reveal) {\n        window.removeEventListener('scroll', this.updatePredicate);\n      }\n    } // the function to judge whether the animation should be started\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          Tag = _this$props.tag,\n          type = _this$props.type,\n          duration = _this$props.duration,\n          delay = _this$props.delay,\n          count = _this$props.count,\n          reveal = _this$props.reveal,\n          infinite = _this$props.infinite,\n          style = _this$props.style,\n          children = _this$props.children,\n          attributes = _objectWithoutProperties(_this$props, [\"className\", \"tag\", \"type\", \"duration\", \"delay\", \"count\", \"reveal\", \"infinite\", \"style\", \"children\"]);\n\n      var _this$state = this.state,\n          isVisible = _this$state.isVisible,\n          revealed = _this$state.revealed;\n      var styleObject = {\n        animationDuration: duration,\n        animationDelay: delay,\n        animationIterationCount: infinite ? false : count,\n        visibility: isVisible ? 'visible' : 'hidden',\n        animationName: type\n      };\n      var hiddenStyles = {\n        animationName: 'none',\n        visibility: 'hidden'\n      };\n      var getAllStyles = Object.assign(styleObject, style);\n      var classes = classNames(this.state.isVisible && 'animated', // will this work?\n      type && type, infinite && 'infinite', className);\n      return React.createElement(Tag, _extends({\n        \"data-test\": \"animation\"\n      }, attributes, {\n        className: classes,\n        style: isVisible && revealed ? getAllStyles : hiddenStyles,\n        ref: this.elemRef,\n        onAnimationStart: this.handleStart,\n        onAnimationIteration: this.handleIteration,\n        onAnimationEnd: this.handleEnd\n      }), children);\n    }\n  }]);\n\n  return Animation;\n}(Component);\n\nAnimation.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  type: propTypes.string,\n  delay: propTypes.string,\n  count: propTypes.number,\n  onAnimationEnd: propTypes.func,\n  onAnimationStart: propTypes.func\n};\nAnimation.defaultProps = {\n  tag: 'div',\n  reveal: false,\n  duration: 1,\n  count: 1\n};\n\nvar Badge = function Badge(props) {\n  var Tag = props.tag,\n      className = props.className,\n      children = props.children,\n      color = props.color,\n      pill = props.pill,\n      attributes = _objectWithoutProperties(props, [\"tag\", \"className\", \"children\", \"color\", \"pill\"]);\n\n  var classes = classNames('badge', color, 'badge-' + color, pill ? 'badge-pill' : false, className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"badge\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nBadge.defaultProps = {\n  tag: 'span',\n  color: 'default',\n  pill: false\n};\nBadge.propTypes = {\n  color: propTypes.string,\n  pill: propTypes.bool,\n  children: propTypes.node,\n  className: propTypes.string\n};\n\nfunction omit(obj, omitKeys) {\n  var result = {};\n  Object.keys(obj).forEach(function (key) {\n    if (omitKeys.indexOf(key) === -1) {\n      result[key] = obj[key];\n    }\n  });\n  return result;\n}\n\nvar keyCodes = {\n  esc: 27,\n  space: 32,\n  tab: 9,\n  up: 38,\n  down: 40\n};\n\nvar returnAttributes = function returnAttributes(attributes) {\n  var newAttributesObject = Object.keys(attributes).reduce(function (previousValue, currentElement) {\n    if (attributes[currentElement]) previousValue[currentElement] = attributes[currentElement];\n    return previousValue;\n  }, {});\n  return newAttributesObject;\n};\n\nvar getColorClass = function getColorClass(color) {\n  var colorArray = color.split(\" \");\n  var specialColors = [\"danger\", \"warning\", \"success\", \"info\", \"default\", \"primary\", \"secondary\", \"elegant\", \"stylish\", \"unique\", \"special\"];\n  var colorClasses = \"\";\n  colorArray.forEach(function (color) {\n    if (specialColors.includes(color)) {\n      if (color.includes('dark')) {\n        color.replace('-', '-color-');\n        colorClasses += \"\".concat(color, \" \");\n      } else {\n        colorClasses += \"\".concat(color, \"-color\");\n      }\n    } else {\n      colorClasses += \"\".concat(color, \" \");\n    }\n  });\n  return colorClasses;\n};\n\nvar Breadcrumb = function Breadcrumb(props) {\n  var className = props.className,\n      color = props.color,\n      light = props.light,\n      uppercase = props.uppercase,\n      bold = props.bold,\n      attributes = _objectWithoutProperties(props, [\"className\", \"color\", \"light\", \"uppercase\", \"bold\"]);\n\n  var classes = classNames('breadcrumb', uppercase && 'text-uppercase', bold && 'font-up-bold', light && 'white-text', color && getColorClass(color), className);\n  var children;\n\n  if (bold) {\n    children = React.Children.map(props.children, function (child) {\n      return React.cloneElement(child, {\n        bold: true\n      });\n    });\n  } else {\n    children = props.children;\n  }\n\n  return React.createElement(\"nav\", {\n    \"data-test\": \"breadcrumb\"\n  }, React.createElement(\"ol\", _extends({}, attributes, {\n    className: classes\n  }), children));\n};\n\nBreadcrumb.propTypes = {\n  children: propTypes.node,\n  className: propTypes.string,\n  color: propTypes.string,\n  light: propTypes.bool,\n  uppercase: propTypes.bool,\n  bold: propTypes.bool\n};\n\nvar Fa = function Fa(props) {\n  var border = props.border,\n      brand = props.brand,\n      className = props.className,\n      fab = props.fab,\n      fal = props.fal,\n      far = props.far,\n      fixed = props.fixed,\n      flip = props.flip,\n      icon = props.icon,\n      inverse = props.inverse,\n      light = props.light,\n      list = props.list,\n      pull = props.pull,\n      pulse = props.pulse,\n      regular = props.regular,\n      rotate = props.rotate,\n      size = props.size,\n      spin = props.spin,\n      stack = props.stack,\n      attributes = _objectWithoutProperties(props, [\"border\", \"brand\", \"className\", \"fab\", \"fal\", \"far\", \"fixed\", \"flip\", \"icon\", \"inverse\", \"light\", \"list\", \"pull\", \"pulse\", \"regular\", \"rotate\", \"size\", \"spin\", \"stack\"]);\n\n  var iconPrefix = brand || fab ? \"fab\" : light || fal ? \"fal\" : regular || far ? \"far\" : \"fa\";\n  var classes = classNames(iconPrefix, list ? \"fa-li\" : false, icon ? \"fa-\".concat(icon) : false, size ? \"fa-\".concat(size) : false, fixed ? \"fa-fw\" : false, pull ? \"fa-pull-\".concat(pull) : false, border ? \"fa-border\" : false, spin ? \"fa-spin\" : false, pulse ? \"fa-pulse\" : false, rotate ? \"fa-rotate-\".concat(rotate) : false, flip ? \"fa-flip-\".concat(flip) : false, inverse ? \"fa-inverse\" : false, stack ? \"fa-\".concat(stack) : false, className);\n  return React.createElement(\"i\", _extends({\n    \"data-test\": \"fa\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nFa.propTypes = {\n  icon: propTypes.string.isRequired,\n  border: propTypes.bool,\n  brand: propTypes.bool,\n  className: propTypes.string,\n  fab: propTypes.bool,\n  fal: propTypes.bool,\n  far: propTypes.bool,\n  fixed: propTypes.bool,\n  flip: propTypes.string,\n  inverse: propTypes.bool,\n  light: propTypes.bool,\n  list: propTypes.bool,\n  pull: propTypes.string,\n  pulse: propTypes.bool,\n  regular: propTypes.bool,\n  rotate: propTypes.string,\n  spin: propTypes.bool,\n  size: propTypes.string,\n  stack: propTypes.string\n};\nFa.defaultProps = {\n  border: false,\n  brand: false,\n  className: \"\",\n  fab: false,\n  fal: false,\n  far: false,\n  fixed: false,\n  flip: \"\",\n  inverse: false,\n  light: false,\n  list: false,\n  pull: \"\",\n  pulse: false,\n  regular: false,\n  rotate: \"\",\n  spin: false,\n  size: \"\",\n  stack: \"\"\n};\n\nfunction styleInject(css, ref) {\n  if (ref === void 0) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') {\n    return;\n  }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css = \".bc-icons.breadcrumb-item::before,\\n.bc-icons.breadcrumb-item::after {\\n  content: none;\\n}\\n\\n.bc-icons.breadcrumb-item + .active.breadcrumb-item::before,\\n.bc-icons.breadcrumb-item + .active.breadcrumb-item::after{\\n  content: none;\\n}\\n\\n.bc-icons.breadcrumb-item.active {\\n  color: #eeeeee;\\n}\\n\";\nstyleInject(css);\n\nvar BreadcrumbItem = function BreadcrumbItem(props) {\n  var active = props.active,\n      appendIcon = props.appendIcon,\n      children = props.children,\n      className = props.className,\n      bold = props.bold,\n      icon = props.icon,\n      iconBrand = props.iconBrand,\n      iconClassName = props.iconClassName,\n      iconLight = props.iconLight,\n      iconRegular = props.iconRegular,\n      iconSize = props.iconSize,\n      attributes = _objectWithoutProperties(props, [\"active\", \"appendIcon\", \"children\", \"className\", \"bold\", \"icon\", \"iconBrand\", \"iconClassName\", \"iconLight\", \"iconRegular\", \"iconSize\"]);\n\n  var classes = classNames(active ? \"active\" : false, icon && \"bc-icons\", \"breadcrumb-item\", className);\n  var iconClasses = classNames(appendIcon ? \"mx-2\" : \"mr-2\", iconClassName);\n\n  var WithBold = function WithBold(_ref) {\n    var children = _ref.children;\n    return bold ? React.createElement(\"strong\", null, children) : children;\n  };\n\n  var WithIcon = function WithIcon() {\n    if (icon) {\n      return React.createElement(Fragment, null, appendIcon && children, React.createElement(Fa, {\n        brand: iconBrand,\n        className: iconClasses,\n        icon: icon,\n        light: iconLight,\n        regular: iconRegular,\n        size: iconSize\n      }), !appendIcon && children);\n    }\n\n    return children;\n  };\n\n  return React.createElement(\"li\", _extends({\n    \"data-test\": \"breadcrumb-item\"\n  }, attributes, {\n    className: classes\n  }), React.createElement(WithBold, null, React.createElement(WithIcon, null)));\n};\n\nBreadcrumbItem.propTypes = {\n  active: propTypes.bool,\n  appendIcon: propTypes.bool,\n  children: propTypes.node,\n  className: propTypes.string,\n  bold: propTypes.bool,\n  icon: propTypes.string,\n  iconBrand: propTypes.bool,\n  iconClassName: propTypes.string,\n  iconLight: propTypes.bool,\n  iconRegular: propTypes.bool,\n  iconSize: propTypes.string\n};\nBreadcrumbItem.defaultProps = {\n  active: false,\n  appendIcon: false,\n  className: \"\",\n  bold: false,\n  icon: \"\",\n  iconBrand: false,\n  iconClassName: \"\",\n  iconLight: false,\n  iconRegular: false,\n  iconSize: \"\"\n};\nvar css$1 = \".Ripple {\\n  position: absolute;\\n  background: rgba(255, 255, 255, 0.3);\\n  border-radius: 50%;\\n  opacity: 1;\\n  transform: scale(0);\\n}\\n\\n.Ripple-outline {\\n  background: rgba(0, 0, 0, 0.2);\\n}\\n\\n.Ripple.is-reppling {\\n  animation: ripple 0.5s linear;\\n}\\n\\n.Ripple-parent {\\n  position: relative;\\n  overflow: hidden;\\n  touch-action: none;\\n}\\n\\n@keyframes ripple {\\n  100% {\\n    opacity: 0;\\n    transform: scale(3);\\n  }\\n}\\n\";\nstyleInject(css$1);\n\nvar Waves =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Waves, _React$Component);\n\n  function Waves(props) {\n    var _this;\n\n    _classCallCheck(this, Waves);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Waves).call(this, props));\n    _this.state = {\n      animate: false,\n      width: 0,\n      height: 0,\n      top: 0,\n      left: 0,\n      cursorPos: props.cursorPos\n    };\n    return _this;\n  }\n\n  _createClass(Waves, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this;\n\n      if (prevState.cursorPos.time !== this.props.cursorPos.time) {\n        if (prevState.animate) {\n          this.setState({\n            animate: false,\n            cursorPos: this.props.cursorPos\n          }, function () {\n            _this2.reppling();\n          });\n        } else this.reppling();\n      }\n    }\n  }, {\n    key: \"reppling\",\n    value: function reppling() {\n      // Get the element\n      var $ripple = ReactDOM.findDOMNode(this);\n      var $button = $ripple.parentNode;\n      var buttonPos = $button.getBoundingClientRect();\n      var buttonWidth = $button.offsetWidth;\n      var buttonHeight = $button.offsetHeight; // Make a Square Ripple\n\n      var rippleWidthShouldBe = Math.max(buttonHeight, buttonWidth); // Make Ripple Position to be center\n\n      var centerize = rippleWidthShouldBe / 2;\n      this.setState({\n        animate: true,\n        width: rippleWidthShouldBe,\n        height: rippleWidthShouldBe,\n        top: this.state.cursorPos.top - buttonPos.top - centerize,\n        left: this.state.cursorPos.left - buttonPos.left - centerize\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        \"data-test\": \"waves\",\n        className: 'Ripple ' + (this.props.outline || this.props.flat || this.props.dark ? 'Ripple-outline ' : '') + (this.state.animate ? 'is-reppling' : ''),\n        style: {\n          top: this.state.top + 'px',\n          left: this.state.left + 'px',\n          width: this.state.width + 'px',\n          height: this.state.height + 'px'\n        }\n      });\n    }\n  }]);\n\n  return Waves;\n}(React.Component);\n\nWaves.propTypes = {\n  outline: propTypes.bool,\n  flat: propTypes.bool,\n  animate: propTypes.bool,\n  cursorPos: propTypes.object,\n  children: propTypes.node\n};\n\nvar Button = function Button(props) {\n  var _classNames;\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      cursorPos = _useState2[0],\n      setCursorPos = _useState2[1];\n\n  var handleClick = function handleClick(e) {\n    e.stopPropagation(); // Waves - Get Cursor Position\n\n    var cursorPos = {\n      top: e.clientY,\n      left: e.clientX,\n      time: Date.now()\n    };\n    setCursorPos(cursorPos);\n  };\n\n  var active = props.active,\n      block = props.block,\n      circle = props.circle,\n      className = props.className,\n      color = props.color,\n      disabled = props.disabled,\n      download = props.download,\n      outline = props.outline,\n      size = props.size,\n      rounded = props.rounded,\n      gradient = props.gradient,\n      floating = props.floating,\n      flat = props.flat,\n      role = props.role,\n      type = props.type,\n      social = props.social,\n      action = props.action,\n      Tag = props.tag,\n      target = props.target,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutProperties(props, [\"active\", \"block\", \"circle\", \"className\", \"color\", \"disabled\", \"download\", \"outline\", \"size\", \"rounded\", \"gradient\", \"floating\", \"flat\", \"role\", \"type\", \"social\", \"action\", \"tag\", \"target\", \"innerRef\"]);\n\n  var classes = classNames(flat ? 'btn-flat' : gradient ? \"\".concat(gradient, \"-gradient\") : \"btn\".concat(outline ? '-outline' : '', \"-\").concat(color), 'btn', 'Ripple-parent', className, (_classNames = {\n    active: active,\n    'btn-floating': floating,\n    'btn-rounded': rounded,\n    'btn-circle': circle,\n    'btn-block': block,\n    'btn-action': action\n  }, _defineProperty(_classNames, \"btn-\".concat(social), social), _defineProperty(_classNames, \"btn-\".concat(size), size), _defineProperty(_classNames, \"disabled\", disabled), _classNames));\n\n  if (attributes.href && Tag === 'button') {\n    Tag = 'a';\n  }\n\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"button\",\n    type: Tag === 'button' && !type ? 'button' : type,\n    target: target,\n    role: Tag === 'a' && !role ? 'button' : role,\n    className: classes,\n    ref: innerRef,\n    onMouseUp: handleClick,\n    onTouchStart: handleClick\n  }, attributes, {\n    download: download,\n    disabled: disabled\n  }), props.children, disabled ? false : React.createElement(Waves, {\n    cursorPos: cursorPos,\n    outline: outline,\n    flat: flat\n  }));\n};\n\nButton.defaultProps = {\n  color: 'default',\n  tag: 'button'\n};\nButton.propTypes = {\n  active: propTypes.bool,\n  action: propTypes.bool,\n  block: propTypes.bool,\n  color: propTypes.string,\n  disabled: propTypes.bool,\n  download: propTypes.string,\n  gradient: propTypes.string,\n  role: propTypes.string,\n  type: propTypes.string,\n  outline: propTypes.bool,\n  rounded: propTypes.bool,\n  circle: propTypes.bool,\n  floating: propTypes.bool,\n  flat: propTypes.bool,\n  innerRef: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  onClick: propTypes.func,\n  size: propTypes.string,\n  social: propTypes.string,\n  children: propTypes.node,\n  tag: propTypes.string,\n  target: propTypes.string,\n  className: propTypes.string\n};\nvar css$2 = \".btn-group-vertical>.btn,\\n.btn-group-vertical>.btn+.btn-group,\\n.btn-group-vertical>.btn-group+.btn,\\n.btn-group-vertical>.btn-group+.btn-group {\\n  margin-left: 0px;\\n}\\n\\n.btn-group-lg>.btn {\\n  font-size: 0.9rem;\\n  padding: 1rem 2.4rem;\\n}\\n\\n.btn-group-sm>.btn {\\n  font-size: 0.6rem;\\n  padding: 0.5rem 1.6rem;\\n}\\n\\n.btn-floating.btn.btn-sm,\\n.btn-floating.btn.btn-lg {\\n  padding: 0;\\n}\\n\";\nstyleInject(css$2);\n\nvar ButtonGroup = function ButtonGroup(props) {\n  var className = props.className,\n      size = props.size,\n      vertical = props.vertical,\n      attributes = _objectWithoutProperties(props, [\"className\", \"size\", \"vertical\"]);\n\n  var classes = classNames(className, size ? 'btn-group-' + size : false, vertical ? 'btn-group-vertical' : 'btn-group');\n  return React.createElement(\"div\", _extends({\n    \"data-test\": \"button-group\"\n  }, attributes, {\n    className: classes\n  }), props.children);\n};\n\nButtonGroup.propTypes = {\n  'aria-label': propTypes.string,\n  className: propTypes.string,\n  role: propTypes.string,\n  size: propTypes.string,\n  children: propTypes.node,\n  vertical: propTypes.bool\n};\nButtonGroup.defaultProps = {\n  role: 'group'\n};\n\nvar ButtonToolbar = function ButtonToolbar(props) {\n  var className = props.className,\n      attributes = _objectWithoutProperties(props, [\"className\"]);\n\n  var classes = classNames(className, \"btn-toolbar\");\n  return React.createElement(\"div\", _extends({\n    \"data-test\": \"button-toolbar\"\n  }, attributes, {\n    className: classes\n  }), props.children);\n};\n\nButtonToolbar.propTypes = {\n  \"aria-label\": propTypes.string,\n  className: propTypes.string,\n  children: propTypes.node,\n  role: propTypes.string\n};\nButtonToolbar.defaultProps = {\n  role: \"toolbar\"\n};\n\nvar Card = function Card(props) {\n  var _classNames;\n\n  var className = props.className,\n      Tag = props.tag,\n      cascade = props.cascade,\n      wide = props.wide,\n      narrow = props.narrow,\n      reverse = props.reverse,\n      testimonial = props.testimonial,\n      ecommerce = props.ecommerce,\n      collection = props.collection,\n      pricing = props.pricing,\n      personal = props.personal,\n      news = props.news,\n      color = props.color,\n      text = props.text,\n      border = props.border,\n      attributes = _objectWithoutProperties(props, [\"className\", \"tag\", \"cascade\", \"wide\", \"narrow\", \"reverse\", \"testimonial\", \"ecommerce\", \"collection\", \"pricing\", \"personal\", \"news\", \"color\", \"text\", \"border\"]);\n\n  var classes = classNames((_classNames = {\n    \"card-cascade\": cascade,\n    \"card-cascade wider\": wide,\n    \"card-cascade narrower\": narrow,\n    \"card-cascade wider reverse\": reverse,\n    \"testimonial-card\": testimonial,\n    \"card-ecommerce\": ecommerce,\n    \"collection-card\": collection,\n    \"pricing-card\": pricing,\n    \"card-personal\": personal,\n    \"news-card\": news\n  }, _defineProperty(_classNames, \"\".concat(text, \"-text\"), text), _defineProperty(_classNames, \"border-\".concat(border), border), _classNames), \"card\", color, className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"card\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nCard.propTypes = {\n  border: propTypes.string,\n  cascade: propTypes.bool,\n  className: propTypes.string,\n  color: propTypes.string,\n  collection: propTypes.bool,\n  ecommerce: propTypes.bool,\n  narrow: propTypes.bool,\n  news: propTypes.bool,\n  pricing: propTypes.bool,\n  personal: propTypes.bool,\n  reverse: propTypes.bool,\n  tag: propTypes.string,\n  testimonial: propTypes.bool,\n  text: propTypes.string,\n  wide: propTypes.bool\n};\nCard.defaultProps = {\n  tag: \"div\"\n};\n\nvar CardBody = function CardBody(props) {\n  var className = props.className,\n      Tag = props.tag,\n      cascade = props.cascade,\n      attributes = _objectWithoutProperties(props, [\"className\", \"tag\", \"cascade\"]);\n\n  var classes = classNames('card-body', cascade && 'card-body-cascade', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"card-body\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nCardBody.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  cascade: propTypes.bool\n};\nCardBody.defaultProps = {\n  tag: 'div'\n};\n\nvar CardFooter = function CardFooter(props) {\n  var _classNames;\n\n  var className = props.className,\n      Tag = props.tag,\n      color = props.color,\n      text = props.text,\n      border = props.border,\n      transparent = props.transparent,\n      small = props.small,\n      muted = props.muted,\n      attributes = _objectWithoutProperties(props, [\"className\", \"tag\", \"color\", \"text\", \"border\", \"transparent\", \"small\", \"muted\"]);\n\n  var classes = classNames((_classNames = {\n    'white-text': color && !text\n  }, _defineProperty(_classNames, \"border-\".concat(border), border), _defineProperty(_classNames, 'bg-transparent', transparent), _defineProperty(_classNames, 'text-muted', muted), _defineProperty(_classNames, \"\".concat(text, \"-text\"), text), _classNames), 'card-footer', color, className);\n  var component = React.createElement(Tag, _extends({\n    \"data-test\": \"card-footer\"\n  }, attributes, {\n    className: classes\n  }));\n\n  if (small) {\n    component = React.createElement(Tag, _extends({}, attributes, {\n      className: classes\n    }), React.createElement(\"small\", null, \" \", props.children, \" \"));\n  }\n\n  return component;\n};\n\nCardFooter.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  color: propTypes.string,\n  text: propTypes.string,\n  border: propTypes.string,\n  transparent: propTypes.bool,\n  small: propTypes.bool,\n  muted: propTypes.bool\n};\nCardFooter.defaultProps = {\n  tag: 'div'\n};\n\nvar CardGroup = function CardGroup(props) {\n  var className = props.className,\n      Tag = props.tag,\n      deck = props.deck,\n      column = props.column,\n      attributes = _objectWithoutProperties(props, [\"className\", \"tag\", \"deck\", \"column\"]);\n\n  var classes = classNames(deck ? 'card-deck' : column ? 'card-columns' : 'card-group', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"card-group\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nCardGroup.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  deck: propTypes.bool,\n  column: propTypes.bool\n};\nCardGroup.defaultProps = {\n  tag: 'div'\n};\n\nvar CardHeader = function CardHeader(props) {\n  var _classNames;\n\n  var className = props.className,\n      Tag = props.tag,\n      color = props.color,\n      text = props.text,\n      border = props.border,\n      transparent = props.transparent,\n      attributes = _objectWithoutProperties(props, [\"className\", \"tag\", \"color\", \"text\", \"border\", \"transparent\"]);\n\n  var classes = classNames((_classNames = {\n    'white-text': color && !text\n  }, _defineProperty(_classNames, \"border-\".concat(border), border), _defineProperty(_classNames, 'bg-transparent', transparent), _defineProperty(_classNames, \"\".concat(text, \"-text\"), text), _classNames), 'card-header', className, color);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"card-header\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nCardHeader.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  color: propTypes.string,\n  text: propTypes.string,\n  border: propTypes.string,\n  transparent: propTypes.bool\n};\nCardHeader.defaultProps = {\n  tag: 'div'\n};\n\nvar Mask = function Mask(props) {\n  var children = props.children,\n      className = props.className,\n      overlay = props.overlay,\n      pattern = props.pattern,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"children\", \"className\", \"overlay\", \"pattern\", \"tag\"]);\n\n  var classes = classNames('mask', pattern && \"pattern-\".concat(pattern), overlay && \"rgba-\".concat(overlay), className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"mask\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nMask.propTypes = {\n  children: propTypes.node,\n  className: propTypes.string,\n  overlay: propTypes.string,\n  pattern: propTypes.oneOfType([propTypes.string, propTypes.number]),\n  tag: propTypes.string\n};\nMask.defaultProps = {\n  className: '',\n  overlay: '',\n  pattern: '',\n  tag: 'div'\n};\n\nvar View = function View(props) {\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      cursorPos = _useState2[0],\n      setCursorPos = _useState2[1];\n\n  var handleClick = function handleClick(e) {\n    // Get Cursor Position\n    var cursorPos = {\n      top: e.clientY,\n      left: e.clientX,\n      time: Date.now()\n    };\n    setCursorPos(cursorPos);\n  };\n\n  var cascade = props.cascade,\n      children = props.children,\n      className = props.className,\n      hover = props.hover,\n      rounded = props.rounded,\n      src = props.src,\n      Tag = props.tag,\n      waves = props.waves,\n      zoom = props.zoom,\n      fixed = props.fixed,\n      attributes = _objectWithoutProperties(props, [\"cascade\", \"children\", \"className\", \"hover\", \"rounded\", \"src\", \"tag\", \"waves\", \"zoom\", \"fixed\"]);\n\n  var classes = classNames(\"view\", rounded && \"rounded\", zoom && \"zoom\", hover && \"overlay\", cascade && \"view-cascade\", waves ? \"Ripple-parent\" : false, className);\n  var viewStyle = src ? {\n    backgroundImage: \"url(\\\"\".concat(src, \"\\\")\"),\n    backgroundRepeat: \"no-repeat\",\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center center\",\n    height: \"100vh\",\n    backgroundAttachment: fixed ? \"fixed\" : null\n  } : {};\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"view\"\n  }, attributes, {\n    className: classes,\n    onMouseDown: handleClick,\n    onTouchStart: handleClick,\n    style: viewStyle\n  }), children, waves && React.createElement(Waves, {\n    cursorPos: cursorPos\n  }));\n};\n\nView.defaultProps = {\n  cascade: false,\n  className: \"\",\n  hover: false,\n  rounded: false,\n  src: \"\",\n  tag: \"div\",\n  waves: false,\n  zoom: false\n};\nView.propTypes = {\n  cascade: propTypes.bool,\n  children: propTypes.node,\n  className: propTypes.string,\n  hover: propTypes.bool,\n  rounded: propTypes.bool,\n  src: propTypes.string,\n  tag: propTypes.string,\n  waves: propTypes.bool,\n  zoom: propTypes.bool\n};\n\nvar CardImage = function CardImage(props) {\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      cursorPos = _useState2[0],\n      setCursorPos = _useState2[1];\n\n  var handleClick = function handleClick(e) {\n    // Get Cursor Position\n    var cursorPos = {\n      top: e.clientY,\n      left: e.clientX,\n      time: Date.now()\n    };\n    setCursorPos(cursorPos);\n  };\n\n  var className = props.className,\n      overlay = props.overlay,\n      top = props.top,\n      waves = props.waves,\n      hover = props.hover,\n      cascade = props.cascade,\n      tag = props.tag,\n      zoom = props.zoom,\n      attributes = _objectWithoutProperties(props, [\"className\", \"overlay\", \"top\", \"waves\", \"hover\", \"cascade\", \"tag\", \"zoom\"]);\n\n  var classes = classNames(top && 'card-img-top', className);\n  var Tag = tag;\n  var innerContent = React.createElement(Tag, _extends({\n    \"data-test\": \"card-image\"\n  }, attributes, {\n    className: classes\n  }), props.children);\n\n  if (props.src) {\n    return React.createElement(View, {\n      zoom: zoom,\n      hover: hover,\n      cascade: cascade\n    }, React.createElement(\"div\", {\n      className: \"Ripple-parent\",\n      onMouseDown: handleClick,\n      style: {\n        touchAction: 'unset'\n      }\n    }, innerContent, React.createElement(Mask, {\n      overlay: overlay\n    }), waves && React.createElement(Waves, {\n      cursorPos: cursorPos\n    })));\n  } else {\n    return React.createElement(\"div\", null, innerContent);\n  }\n};\n\nCardImage.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  zoom: propTypes.bool,\n  waves: propTypes.bool,\n  className: propTypes.string,\n  cascade: propTypes.bool,\n  hover: propTypes.bool,\n  overlay: propTypes.string,\n  top: propTypes.bool,\n  src: propTypes.string,\n  children: propTypes.node\n};\nCardImage.defaultProps = {\n  tag: 'img',\n  overlay: 'white-slight',\n  waves: true,\n  hover: false,\n  cascade: false,\n  zoom: false\n};\n\nvar CardText = function CardText(props) {\n  var className = props.className,\n      Tag = props.tag,\n      textNode = props.children,\n      muted = props.muted,\n      small = props.small,\n      attributes = _objectWithoutProperties(props, [\"className\", \"tag\", \"children\", \"muted\", \"small\"]);\n\n  var classes = classNames('card-text', muted && 'text-muted', className);\n  var children = small ? React.createElement(\"small\", null, textNode) : textNode;\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"card-text\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nCardText.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  muted: propTypes.bool,\n  small: propTypes.bool\n};\nCardText.defaultProps = {\n  tag: 'p'\n};\n\nvar CardTitle = function CardTitle(props) {\n  var className = props.className,\n      Tag = props.tag,\n      sub = props.sub,\n      attributes = _objectWithoutProperties(props, [\"className\", \"tag\", \"sub\"]);\n\n  var classes = classNames(sub ? 'card-subtitle' : 'card-title', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"card-title\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nCardTitle.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  sub: propTypes.bool,\n  className: propTypes.string\n};\nCardTitle.defaultProps = {\n  tag: 'h4',\n  sub: false\n};\n\nvar Control = function Control(props) {\n  var direction = props.direction,\n      className = props.className,\n      onClick = props.onClick,\n      Tag = props.tag,\n      iconLeft = props.iconLeft,\n      iconRight = props.iconRight,\n      testimonial = props.testimonial,\n      multiItem = props.multiItem;\n  var text;\n\n  if (direction === 'prev') {\n    text = 'Previous';\n  } else if (direction === 'next') {\n    text = 'Next';\n  }\n\n  var classes = classNames('carousel-control-' + direction, className);\n  var caretClasses = classNames('carousel-control-' + direction + '-icon');\n\n  if (testimonial) {\n    var arrow = direction === 'prev' ? 'left' : 'right';\n    classes = classNames('carousel-control-' + direction, arrow, 'carousel-control', className);\n    caretClasses = classNames('icon-' + direction);\n  }\n\n  if (multiItem) {\n    classes = classNames('btn-floating');\n  }\n\n  return React.createElement(Tag, {\n    \"data-test\": \"carousel-control\",\n    className: classes,\n    \"data-slide\": direction,\n    onClick: onClick\n  }, iconLeft ? React.createElement(Fa, {\n    icon: \"chevron-left\"\n  }) : iconRight ? React.createElement(Fa, {\n    icon: \"chevron-right\"\n  }) : React.createElement(\"div\", null, React.createElement(\"span\", {\n    className: caretClasses,\n    \"aria-hidden\": \"true\"\n  }), React.createElement(\"span\", {\n    className: \"sr-only\"\n  }, text)));\n};\n\nControl.propTypes = {\n  onClick: propTypes.any,\n  direction: propTypes.string,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  iconLeft: propTypes.bool,\n  iconRight: propTypes.bool,\n  testimonial: propTypes.bool,\n  multiItem: propTypes.bool\n};\nControl.defaultProps = {\n  tag: 'a'\n};\n\nvar CarouselIndicator = function CarouselIndicator(props) {\n  var active = props.active,\n      children = props.children,\n      className = props.className,\n      img = props.img,\n      alt = props.alt,\n      attributes = _objectWithoutProperties(props, [\"active\", \"children\", \"className\", \"img\", \"alt\"]);\n\n  var classes = classNames(active && 'active', className);\n  return React.createElement(\"li\", _extends({\n    \"data-test\": \"carousel-indicator\"\n  }, attributes, {\n    className: classes\n  }), img && React.createElement(\"img\", {\n    src: img,\n    alt: alt,\n    className: \"img-fluid\"\n  }), children);\n};\n\nCarouselIndicator.propTypes = {\n  active: propTypes.bool.isRequired,\n  alt: propTypes.string,\n  children: propTypes.node,\n  className: propTypes.string,\n  img: propTypes.string\n};\nCarouselIndicator.defaultProps = {\n  alt: 'Carousel thumbnail',\n  className: '',\n  img: ''\n};\n\nvar CarouselIndicators = function CarouselIndicators(props) {\n  var children = props.children,\n      className = props.className,\n      attributes = _objectWithoutProperties(props, [\"children\", \"className\"]);\n\n  var classes = classNames(\"carousel-indicators\", className);\n  return React.createElement(\"ol\", _extends({\n    \"data-test\": \"carousel-indicators\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nCarouselIndicators.propTypes = {\n  children: propTypes.node,\n  className: propTypes.string\n};\nCarouselIndicators.defaultProps = {\n  className: \"\"\n};\nvar css$3 = \".carousel-inner {\\n  position: relative;\\n  overflow: hidden;\\n  width: 100%;\\n  height: 100%;\\n}\\n\\n.carousel-fade .carousel-item {\\n  position: absolute;\\n  left: 0;\\n  top: 0;\\n  width: 100%;\\n  height: 100%;\\n  display: block !important;\\n  opacity: 0;\\n  z-index: 0;\\n  transition: transform 0ms ease-in-out, opacity 0.8s ease-out;\\n}\\n\\n.carousel-fade .carousel-item.active {\\n  position: relative;\\n  z-index: 1;\\n  opacity: 1;\\n}\\n\\n.carousel-multi-item .carousel-item {\\n  display: inline-block !important;\\n}\\n\\n.carousel .carousel-slide-item {\\n  transition: left 0.5s;\\n}\\n\\n.carousel-control-prev, .carousel-control-next, .carousel-item-prev, .carousel-item-next {\\n  z-index: 2;\\n}\\n\";\nstyleInject(css$3);\n\nvar Carousel =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Carousel, _Component);\n\n  function Carousel(props) {\n    var _this;\n\n    _classCallCheck(this, Carousel);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Carousel).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"clearCycleIntervalHandler\", function () {\n      return clearInterval(_this.cycleInterval);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"swipeAvailableHandler\", function () {\n      return _this.setState({\n        swipeAvailable: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"restartInterval\", function () {\n      if (_this.props.interval !== false) {\n        _this.clearCycleIntervalHandler();\n\n        _this.cycleInterval = setInterval(_this.next, _this.props.interval);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"next\", function () {\n      var nextIndex = _this.state.activeItem + 1;\n      var nextItem = nextIndex > _this.state.length ? 1 : nextIndex;\n\n      _this.goToIndex(nextItem);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"prev\", function () {\n      var prevIndex = _this.state.activeItem - 1;\n      var prevItem = prevIndex < 1 ? _this.state.length : prevIndex;\n\n      _this.goToIndex(prevItem);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"goToIndex\", function (item) {\n      _this.setState(_objectSpread({}, _this.state, {\n        activeItem: item\n      }));\n\n      _this.restartInterval();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"startTouch\", function (e) {\n      _this.setState({\n        initialX: e.touches[0].clientX,\n        initialY: e.touches[0].clientY\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"moveTouch\", function (e) {\n      _this.setState({\n        swipeAvailable: false\n      });\n\n      var _this$state = _this.state,\n          initialX = _this$state.initialX,\n          initialY = _this$state.initialY;\n\n      if (initialX === null || initialY === null) {\n        return;\n      }\n\n      var currentX = e.touches[0].clientX;\n      var currentY = e.touches[0].clientY;\n      var diffX = initialX - currentX;\n      var diffY = initialY - currentY;\n\n      if (Math.abs(diffX) > Math.abs(diffY)) {\n        // sliding horizontally\n        if (diffX > 0) {\n          _this.next();\n        } else {\n          _this.prev();\n        }\n      }\n\n      _this.setState({\n        initialX: null,\n        initialY: null\n      });\n    });\n\n    _this.state = {\n      activeItem: _this.props.activeItem,\n      length: _this.props.length,\n      slide: _this.props.slide,\n      srcArray: [],\n      swipeAvailable: true,\n      initialX: null,\n      initialY: null\n    };\n    _this.carouselRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(Carousel, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.interval === false) {\n        return;\n      }\n\n      this.cycleInterval = setInterval(this.next, this.props.interval); // get images src atr\n\n      if (this.props.thumbnails) {\n        var CarouselItemsArray = this.carouselRef.current.querySelectorAll('.carousel-item img');\n        var srcArray = Array.prototype.map.call(CarouselItemsArray, function (item) {\n          return item.src;\n        });\n        this.setState(_objectSpread({}, this.state, {\n          srcArray: srcArray\n        }));\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.props.interval === false) {\n        return;\n      }\n\n      this.clearCycleIntervalHandler();\n    }\n  }, {\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      return {\n        activeItem: this.state.activeItem,\n        length: this.state.length,\n        slide: this.state.slide\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          activeItem = _this$props.activeItem,\n          children = _this$props.children,\n          className = _this$props.className,\n          multiItem = _this$props.multiItem,\n          slide = _this$props.slide,\n          thumbnails = _this$props.thumbnails,\n          interval = _this$props.interval,\n          testimonial = _this$props.testimonial,\n          Tag = _this$props.tag,\n          length = _this$props.length,\n          showControls = _this$props.showControls,\n          showIndicators = _this$props.showIndicators,\n          onHoverStop = _this$props.onHoverStop,\n          attributes = _objectWithoutProperties(_this$props, [\"activeItem\", \"children\", \"className\", \"multiItem\", \"slide\", \"thumbnails\", \"interval\", \"testimonial\", \"tag\", \"length\", \"showControls\", \"showIndicators\", \"onHoverStop\"]);\n\n      var swipeAvailable = this.state.swipeAvailable;\n      var ariaLabel = 'carousel';\n      var classes = classNames('carousel', multiItem ? 'carousel-multi-item' : 'carousel-fade', thumbnails ? 'carousel-thumbnails' : '', testimonial ? 'testimonial-carousel' : '', className);\n      var CarouselIndicatorsArray = [];\n\n      var _loop = function _loop(i) {\n        CarouselIndicatorsArray.push(React.createElement(CarouselIndicator, {\n          img: thumbnails ? _this2.state.srcArray[i - 1] : null,\n          key: i,\n          active: _this2.state.activeItem === i,\n          onClick: function onClick() {\n            return _this2.goToIndex(i);\n          }\n        }));\n      };\n\n      for (var i = 1; i <= this.state.length; i++) {\n        _loop(i);\n      }\n\n      var isMultiItem = multiItem ? true : false;\n      var isTestimonial = testimonial ? true : false;\n      return React.createElement(Tag, _extends({\n        \"data-test\": \"carousel\",\n        ref: this.carouselRef\n      }, attributes, {\n        className: classes,\n        \"aria-label\": ariaLabel,\n        onTouchStart: this.startTouch,\n        onTouchMove: swipeAvailable ? this.moveTouch : null,\n        onTouchEnd: this.swipeAvailableHandler,\n        onMouseEnter: onHoverStop ? this.clearCycleIntervalHandler : false,\n        onMouseLeave: onHoverStop ? this.restartInterval : false\n      }), showControls && multiItem && React.createElement(\"div\", {\n        className: \"controls-top\"\n      }, React.createElement(Control, {\n        testimonial: isTestimonial,\n        multiItem: isMultiItem,\n        iconLeft: true,\n        className: \"btn-floating\",\n        direction: \"prev\",\n        role: \"button\",\n        onClick: this.prev\n      }), React.createElement(Control, {\n        testimonial: isTestimonial,\n        multiItem: isMultiItem,\n        iconRight: true,\n        className: \"btn-floating\",\n        direction: \"next\",\n        role: \"button\",\n        onClick: this.next\n      })), children, showControls && !multiItem && React.createElement(React.Fragment, null, React.createElement(Control, {\n        testimonial: isTestimonial,\n        multiItem: isMultiItem,\n        direction: \"prev\",\n        role: \"button\",\n        onClick: this.prev\n      }), React.createElement(Control, {\n        testimonial: isTestimonial,\n        multiItem: isMultiItem,\n        direction: \"next\",\n        role: \"button\",\n        onClick: this.next\n      })), showIndicators && React.createElement(CarouselIndicators, null, CarouselIndicatorsArray));\n    }\n  }]);\n\n  return Carousel;\n}(Component);\n\nCarousel.propTypes = {\n  activeItem: propTypes.number,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  children: propTypes.node,\n  multiItem: propTypes.bool,\n  interval: propTypes.oneOfType([propTypes.number, propTypes.bool]),\n  thumbnails: propTypes.bool,\n  testimonial: propTypes.bool,\n  showControls: propTypes.bool,\n  showIndicators: propTypes.bool,\n  slide: propTypes.bool,\n  length: propTypes.number,\n  onHoverStop: propTypes.bool\n};\nCarousel.defaultProps = {\n  tag: 'div',\n  interval: 6000,\n  showControls: true,\n  showIndicators: true,\n  onHoverStop: true\n};\nCarousel.childContextTypes = {\n  activeItem: propTypes.any,\n  length: propTypes.any,\n  slide: propTypes.any\n};\n\nvar CarouselCaption = function CarouselCaption(props) {\n  var children = props.children,\n      className = props.className,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"children\", \"className\", \"tag\"]);\n\n  var classes = classNames('carousel-caption', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"carousel-caption\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nCarouselCaption.propTypes = {\n  active: propTypes.string,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  children: propTypes.node\n};\nCarouselCaption.defaultProps = {\n  tag: 'div'\n};\n\nvar CarouselInner = function CarouselInner(props) {\n  var active = props.active,\n      children = props.children,\n      childrenCount = props.childrenCount,\n      className = props.className,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"active\", \"children\", \"childrenCount\", \"className\", \"tag\"]);\n\n  var classes = classNames('carousel-inner', active ? 'active' : '', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"carousel-inner\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nCarouselInner.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  active: propTypes.bool,\n  children: propTypes.node\n};\nCarouselInner.defaultProps = {\n  tag: 'div'\n};\n\nvar CarouselItem =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CarouselItem, _Component);\n\n  function CarouselItem() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CarouselItem);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CarouselItem)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"moveForward\", function () {\n      _this.style = {\n        position: 'absolute',\n        left: '100%'\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"moveBackwards\", function () {\n      _this.style = {\n        position: 'absolute',\n        left: '-100%'\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"makeVisible\", function () {\n      _this.style = {\n        left: '0'\n      };\n    });\n\n    return _this;\n  }\n\n  _createClass(CarouselItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          active = _this$props.active,\n          children = _this$props.children,\n          className = _this$props.className,\n          itemId = _this$props.itemId,\n          Tag = _this$props.tag,\n          attributes = _objectWithoutProperties(_this$props, [\"active\", \"children\", \"className\", \"itemId\", \"tag\"]);\n\n      itemId = parseInt(itemId, 10);\n      var classes = classNames('carousel-item', {\n        'active carousel-slide-item': this.context.slide,\n        'active': !this.context.slide && itemId === this.context.activeItem\n      }, className);\n      var slideIndex = this.context.activeItem - itemId;\n\n      if (this.context.slide) {\n        if (slideIndex < 0) {\n          this.moveForward();\n        } else if (slideIndex > 0) {\n          this.moveBackwards();\n        } else {\n          this.makeVisible();\n        }\n      }\n\n      return React.createElement(Tag, _extends({\n        \"data-test\": \"carousel-item\"\n      }, attributes, {\n        className: classes,\n        style: this.style\n      }), children);\n    }\n  }]);\n\n  return CarouselItem;\n}(Component);\n\nCarouselItem.propTypes = {\n  active: propTypes.bool,\n  itemId: propTypes.any,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  children: propTypes.node\n};\nCarouselItem.defaultProps = {\n  tag: 'div'\n};\nCarouselItem.contextTypes = {\n  activeItem: propTypes.any,\n  length: propTypes.any,\n  slide: propTypes.any\n};\n\nvar MDBCloseIcon = function MDBCloseIcon(_ref) {\n  var onClick = _ref.onClick,\n      className = _ref.className,\n      ariaLabel = _ref.ariaLabel,\n      props = _objectWithoutProperties(_ref, [\"onClick\", \"className\", \"ariaLabel\"]);\n\n  var onClickHandler = function onClickHandler(e) {\n    onClick && onClick(e);\n  };\n\n  var btnClasses = className ? ['close'].concat(_toConsumableArray(className.split(' '))) : ['close'];\n  return React.createElement(\"button\", _extends({\n    \"data-test\": \"close-button\",\n    type: \"button\"\n  }, props, {\n    className: btnClasses.join(' '),\n    onClick: onClickHandler,\n    \"aria-label\": ariaLabel\n  }), React.createElement(\"span\", {\n    \"aria-hidden\": \"true\"\n  }, \"\\xD7\"));\n};\n\nMDBCloseIcon.defaultProps = {\n  ariaLabel: 'Close'\n};\nMDBCloseIcon.propTypes = {\n  className: propTypes.string,\n  ariaLabel: propTypes.string,\n  onClick: propTypes.func\n};\n\nvar Col = function Col(props) {\n  var xs = props.xs,\n      sm = props.sm,\n      md = props.md,\n      lg = props.lg,\n      xl = props.xl,\n      top = props.top,\n      bottom = props.bottom,\n      middle = props.middle,\n      size = props.size,\n      className = props.className,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"xs\", \"sm\", \"md\", \"lg\", \"xl\", \"top\", \"bottom\", \"middle\", \"size\", \"className\", \"tag\"]);\n\n  var classes = classNames(size && \"col-\" + size, xs && \"col-xs-\" + xs, sm && \"col-sm-\" + sm, md && \"col-md-\" + md, lg && \"col-lg-\" + lg, xl && \"col-xl-\" + xl, !size && !xs && !sm && !md && !lg && !xl ? \"col\" : \"\", top && \"align-self-start\", middle && \"align-self-center\", bottom && \"align-self-end\", className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"col\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nCol.propTypes = {\n  size: propTypes.string,\n  xs: propTypes.string,\n  sm: propTypes.string,\n  md: propTypes.string,\n  lg: propTypes.string,\n  xl: propTypes.string,\n  top: propTypes.bool,\n  bottom: propTypes.bool,\n  middle: propTypes.bool,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string\n};\nCol.defaultProps = {\n  tag: \"div\",\n  xs: null,\n  sm: null,\n  md: null,\n  lg: null,\n  xl: null\n};\nvar SHOW = 'SHOW';\nvar SHOWN = 'SHOWN';\nvar HIDE = 'HIDE';\nvar HIDDEN = 'HIDDEN';\nvar DEFAULT_DELAYS = {\n  show: 350,\n  hide: 350\n};\n\nvar Collapse =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Collapse, _Component);\n\n  function Collapse(props) {\n    var _this;\n\n    _classCallCheck(this, Collapse);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Collapse).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"setTransitionTag\", function (collapse, callback, delayType) {\n      _this.transitionTag = setTimeout(function () {\n        _this.setState({\n          collapse: collapse,\n          height: null\n        }, callback());\n      }, _this.getDelay(delayType));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"openCollapse\", function () {\n      _this.setState({\n        collapse: SHOW\n      }, function () {\n        _this.setState({\n          height: _this.getHeight()\n        });\n\n        _this.setTransitionTag(SHOWN, _this.props.onOpened, 'show');\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"closeCollapse\", function () {\n      _this.setState({\n        height: _this.getHeight()\n      }, function () {\n        _this.setState({\n          collapse: HIDE,\n          height: _this.getHeight()\n        }, function () {\n          _this.setState({\n            height: 0\n          });\n        });\n      });\n\n      _this.setTransitionTag(HIDDEN, _this.props.onClosed, 'hide');\n    });\n\n    _this.state = {\n      id: props.id,\n      collapse: HIDDEN,\n      height: null\n    };\n    _this.element = null;\n    return _this;\n  }\n\n  _createClass(Collapse, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if ((this.props.isOpen === this.state.id || this.props.isOpen === true) && this.state.collapse === HIDDEN) {\n        this.openCollapse();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var collapse = prevState.collapse;\n      var willOpen = typeof this.props.isOpen !== 'boolean' ? this.props.isOpen === prevState.id : this.props.isOpen;\n\n      if (willOpen && this.state.collapse === HIDDEN) {\n        this.openCollapse();\n      } else if (!willOpen && collapse === SHOWN) {\n        this.closeCollapse();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearTimeout(this.transitionTag);\n    }\n  }, {\n    key: \"getDelay\",\n    value: function getDelay(key) {\n      var delay = this.props.delay;\n\n      if (_typeof(delay) === 'object') {\n        return isNaN(delay[key]) ? DEFAULT_DELAYS[key] : delay[key];\n      }\n\n      return delay;\n    }\n  }, {\n    key: \"getHeight\",\n    value: function getHeight() {\n      return this.element.scrollHeight;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          navbar = _this$props.navbar,\n          children = _this$props.children,\n          className = _this$props.className,\n          isOpen = _this$props.isOpen,\n          delay = _this$props.delay,\n          onOpened = _this$props.onOpened,\n          onClosed = _this$props.onClosed,\n          attributes = _objectWithoutProperties(_this$props, [\"navbar\", \"children\", \"className\", \"isOpen\", \"delay\", \"onOpened\", \"onClosed\"]);\n\n      var _this$state = this.state,\n          collapse = _this$state.collapse,\n          height = _this$state.height;\n      var collapseClass;\n\n      switch (collapse) {\n        case SHOW:\n          collapseClass = 'collapsing';\n          break;\n\n        case SHOWN:\n          collapseClass = 'collapse show';\n          break;\n\n        case HIDE:\n          collapseClass = 'collapsing';\n          break;\n\n        case HIDDEN:\n          collapseClass = 'collapse';\n          break;\n\n        default:\n          // HIDDEN\n          collapseClass = 'collapse';\n      }\n\n      var classes = classNames(collapseClass, navbar ? 'navbar-collapse' : false, className);\n      var style = height === null ? null : {\n        height: height\n      };\n      return React.createElement(\"div\", _extends({\n        \"data-test\": \"collapse\"\n      }, attributes, {\n        style: _objectSpread({}, attributes.style, style),\n        className: classes,\n        ref: function ref(c) {\n          _this2.element = c;\n        }\n      }), children);\n    }\n  }]);\n\n  return Collapse;\n}(Component);\n\nCollapse.propTypes = {\n  isOpen: propTypes.oneOfType([propTypes.string, propTypes.bool]),\n  id: propTypes.string,\n  className: propTypes.node,\n  children: propTypes.node,\n  navbar: propTypes.bool,\n  delay: propTypes.oneOfType([propTypes.shape({\n    show: propTypes.number,\n    hide: propTypes.number\n  }), propTypes.number]),\n  onOpened: propTypes.func,\n  onClosed: propTypes.func\n};\nCollapse.defaultProps = {\n  isOpen: '',\n  delay: DEFAULT_DELAYS,\n  onOpened: function onOpened() {},\n  onClosed: function onClosed() {}\n};\n\nvar Container = function Container(props) {\n  var fluid = props.fluid,\n      className = props.className,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"fluid\", \"className\", \"tag\"]);\n\n  var classes = classNames(fluid ? 'container-fluid' : 'container', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"container\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nContainer.propTypes = {\n  fluid: propTypes.bool,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string\n};\nContainer.defaultProps = {\n  tag: 'div',\n  fluid: false\n};\n\nvar DataTableHead = function DataTableHead(props) {\n  var color = props.color,\n      columns = props.columns,\n      handleSort = props.handleSort,\n      scrollX = props.scrollX,\n      scrollY = props.scrollY,\n      sortable = props.sortable,\n      sorted = props.sorted,\n      textWhite = props.textWhite;\n  var theadClasses = classNames(color && (color !== \"dark\" && color !== \"light\" ? color : \"thead-\".concat(color)), textWhite && \"text-white\");\n  return React.createElement(Fragment, null, (scrollY || scrollX) && React.createElement(\"colgroup\", null, columns.map(function (col) {\n    return React.createElement(\"col\", {\n      key: col.field,\n      style: {\n        width: \"\".concat(col.width, \"px\") || \"auto\",\n        minWidth: \"\".concat(col.width, \"px\") || \"auto\"\n      }\n    });\n  })), React.createElement(\"thead\", {\n    className: theadClasses || undefined\n  }, React.createElement(\"tr\", null, columns.map(function (col) {\n    return React.createElement(\"th\", _extends({\n      onClick: function onClick() {\n        return sortable && handleSort(col.field, col.sort);\n      },\n      key: col.field,\n      className: classNames(col.hasOwnProperty(\"minimal\") ? \"th-\".concat(col.minimal) : null, sortable && col.sort !== 'disabled' && (sorted && col.sort ? \"sorting_\".concat(col.sort === 'asc' ? 'desc' : 'asc') : 'sorting'))\n    }, col.attributes), col.label);\n  }))));\n};\n\nDataTableHead.propTypes = {\n  sorted: propTypes.bool.isRequired,\n  color: propTypes.string,\n  columns: propTypes.arrayOf(propTypes.object),\n  handleSort: propTypes.func,\n  scrollX: propTypes.bool,\n  scrollY: propTypes.bool,\n  sortable: propTypes.bool,\n  textWhite: propTypes.bool\n};\nDataTableHead.defaultProps = {\n  scrollX: false,\n  scrollY: false,\n  sortable: true,\n  textWhite: false\n};\nvar css$4 = \".table-wrapper-scroll-y {\\n  display: block;\\n  max-height: 200px;\\n  overflow-y: auto;\\n  -ms-overflow-style: -ms-autohiding-scrollbar;\\n}\\n\";\nstyleInject(css$4);\n\nvar Table = function Table(props) {\n  var autoWidth = props.autoWidth,\n      bordered = props.bordered,\n      borderless = props.borderless,\n      btn = props.btn,\n      children = props.children,\n      dark = props.dark,\n      fixed = props.fixed,\n      theadColor = props.theadColor,\n      hover = props.hover,\n      maxHeight = props.maxHeight,\n      responsive = props.responsive,\n      responsiveSm = props.responsiveSm,\n      responsiveMd = props.responsiveMd,\n      responsiveLg = props.responsiveLg,\n      responsiveXl = props.responsiveXl,\n      scrollY = props.scrollY,\n      small = props.small,\n      striped = props.striped,\n      className = props.className,\n      attributes = _objectWithoutProperties(props, [\"autoWidth\", \"bordered\", \"borderless\", \"btn\", \"children\", \"dark\", \"fixed\", \"theadColor\", \"hover\", \"maxHeight\", \"responsive\", \"responsiveSm\", \"responsiveMd\", \"responsiveLg\", \"responsiveXl\", \"scrollY\", \"small\", \"striped\", \"className\"]);\n\n  var tableClasses = classNames('table', {\n    'w-auto': autoWidth,\n    'table-bordered': bordered,\n    'table-borderless': borderless,\n    'btn-table': btn,\n    'table-fixed': fixed,\n    'table-hover': hover,\n    'table-sm': small,\n    'table-striped': striped\n  }, className);\n  var wrapperClasses = classNames({\n    'table-dark': dark,\n    'table-responsive': responsive,\n    'table-responsive-sm': responsiveSm,\n    'table-responsive-md': responsiveMd,\n    'table-responsive-lg': responsiveLg,\n    'table-responsive-xl': responsiveXl,\n    'table-wrapper-scroll-y': scrollY\n  });\n  var wrapperStyles = {\n    maxHeight: maxHeight ? \"\".concat(maxHeight) : null\n  };\n  return React.createElement(\"div\", {\n    \"data-test\": \"table\",\n    className: wrapperClasses,\n    style: wrapperStyles\n  }, React.createElement(\"table\", _extends({}, attributes, {\n    className: tableClasses\n  }), children));\n};\n\nTable.propTypes = {\n  autoWidth: propTypes.bool,\n  bordered: propTypes.bool,\n  borderless: propTypes.bool,\n  btn: propTypes.bool,\n  children: propTypes.node,\n  dark: propTypes.bool,\n  fixed: propTypes.bool,\n  theadColor: propTypes.string,\n  hover: propTypes.bool,\n  maxHeight: propTypes.string,\n  responsive: propTypes.bool,\n  responsiveSm: propTypes.bool,\n  responsiveMd: propTypes.bool,\n  responsiveLg: propTypes.bool,\n  responsiveXl: propTypes.bool,\n  scrollY: propTypes.bool,\n  small: propTypes.bool,\n  striped: propTypes.bool,\n  className: propTypes.string\n};\n\nvar TableBody = function TableBody(props) {\n  var children = props.children,\n      color = props.color,\n      rows = props.rows,\n      textWhite = props.textWhite,\n      attributes = _objectWithoutProperties(props, [\"children\", \"color\", \"rows\", \"textWhite\"]);\n\n  var classes = classNames(color, {\n    \"text-white\": textWhite\n  });\n  return React.createElement(\"tbody\", _extends({\n    \"data-test\": \"table-body\"\n  }, attributes, {\n    className: classes || undefined\n  }), rows && rows.map(function (row, index) {\n    return React.createElement(\"tr\", {\n      onClick: row.hasOwnProperty(\"clickEvent\") ? row.clickEvent : undefined,\n      key: index\n    }, Object.keys(row).map(function (key, index, array) {\n      if (key === \"clickEvent\") return null;\n\n      if (key !== \"colspan\") {\n        return array[index + 1] !== \"colspan\" ? React.createElement(\"td\", {\n          key: key\n        }, row[key]) : null;\n      } else {\n        return React.createElement(\"td\", {\n          key: key,\n          colSpan: row[key]\n        }, row[array[index - 1]]);\n      }\n    }));\n  }), children);\n};\n\nTableBody.propTypes = {\n  children: propTypes.node,\n  color: propTypes.string,\n  rows: propTypes.arrayOf(propTypes.object),\n  textWhite: propTypes.bool\n};\nTableBody.defaultProps = {\n  textWhite: false\n};\n\nvar TableFoot = function TableFoot(props) {\n  var _classNames;\n\n  var children = props.children,\n      color = props.color,\n      columns = props.columns,\n      textWhite = props.textWhite,\n      attributes = _objectWithoutProperties(props, [\"children\", \"color\", \"columns\", \"textWhite\"]);\n\n  var isTheadColor = color === 'dark' || color === 'light';\n  var classes = classNames((_classNames = {\n    'text-white': textWhite\n  }, _defineProperty(_classNames, \"thead-\".concat(color), color && isTheadColor), _defineProperty(_classNames, \"\".concat(color), color && !isTheadColor), _classNames));\n  return React.createElement(\"thead\", _extends({\n    \"data-test\": \"table-foot\"\n  }, attributes, {\n    className: classes || undefined\n  }), columns && React.createElement(\"tr\", null, columns.map(function (col) {\n    return React.createElement(\"th\", {\n      key: col.field,\n      className: col.hasOwnProperty('minimal') ? \"th-\".concat(col.minimal) : undefined\n    }, col.label);\n  })), children);\n};\n\nTableFoot.propTypes = {\n  children: propTypes.node,\n  color: propTypes.string,\n  columns: propTypes.arrayOf(propTypes.object),\n  textWhite: propTypes.bool\n};\nTableFoot.defaultProps = {\n  textWhite: false\n};\n\nvar DataTableTable = function DataTableTable(props) {\n  var autoWidth = props.autoWidth,\n      bordered = props.bordered,\n      borderless = props.borderless,\n      btn = props.btn,\n      children = props.children,\n      columns = props.columns,\n      dark = props.dark,\n      fixed = props.fixed,\n      hover = props.hover,\n      handleSort = props.handleSort,\n      responsive = props.responsive,\n      responsiveSm = props.responsiveSm,\n      responsiveMd = props.responsiveMd,\n      responsiveLg = props.responsiveLg,\n      responsiveXl = props.responsiveXl,\n      rows = props.rows,\n      small = props.small,\n      sortable = props.sortable,\n      sorted = props.sorted,\n      striped = props.striped,\n      tbodyColor = props.tbodyColor,\n      tbodyTextWhite = props.tbodyTextWhite,\n      theadColor = props.theadColor,\n      theadTextWhite = props.theadTextWhite,\n      attributes = _objectWithoutProperties(props, [\"autoWidth\", \"bordered\", \"borderless\", \"btn\", \"children\", \"columns\", \"dark\", \"fixed\", \"hover\", \"handleSort\", \"responsive\", \"responsiveSm\", \"responsiveMd\", \"responsiveLg\", \"responsiveXl\", \"rows\", \"small\", \"sortable\", \"sorted\", \"striped\", \"tbodyColor\", \"tbodyTextWhite\", \"theadColor\", \"theadTextWhite\"]);\n\n  return React.createElement(\"div\", {\n    className: \"col-sm-12\"\n  }, React.createElement(Table, _extends({\n    autoWidth: autoWidth,\n    bordered: bordered,\n    borderless: borderless,\n    btn: btn,\n    dark: dark,\n    fixed: fixed,\n    hover: hover,\n    responsive: responsive,\n    responsiveSm: responsiveSm,\n    responsiveMd: responsiveMd,\n    responsiveLg: responsiveLg,\n    responsiveXl: responsiveXl,\n    small: small,\n    striped: striped,\n    className: \"dataTable\"\n  }, attributes), React.createElement(DataTableHead, {\n    color: theadColor,\n    textWhite: theadTextWhite,\n    columns: columns,\n    handleSort: handleSort,\n    sortable: sortable,\n    sorted: sorted\n  }), React.createElement(TableBody, {\n    color: tbodyColor,\n    textWhite: tbodyTextWhite,\n    rows: rows\n  }), React.createElement(TableFoot, {\n    color: theadColor,\n    textWhite: theadTextWhite,\n    columns: columns\n  }), children));\n};\n\nDataTableTable.propTypes = {\n  autoWidth: propTypes.bool.isRequired,\n  bordered: propTypes.bool.isRequired,\n  borderless: propTypes.bool.isRequired,\n  btn: propTypes.bool.isRequired,\n  dark: propTypes.bool.isRequired,\n  fixed: propTypes.bool.isRequired,\n  hover: propTypes.bool.isRequired,\n  handleSort: propTypes.func.isRequired,\n  responsive: propTypes.bool.isRequired,\n  responsiveSm: propTypes.bool.isRequired,\n  responsiveMd: propTypes.bool.isRequired,\n  responsiveLg: propTypes.bool.isRequired,\n  responsiveXl: propTypes.bool.isRequired,\n  sortable: propTypes.bool.isRequired,\n  sorted: propTypes.bool.isRequired,\n  small: propTypes.bool.isRequired,\n  striped: propTypes.bool.isRequired,\n  theadColor: propTypes.string.isRequired,\n  theadTextWhite: propTypes.bool.isRequired,\n  tbodyColor: propTypes.string.isRequired,\n  tbodyTextWhite: propTypes.bool.isRequired,\n  columns: propTypes.arrayOf(propTypes.object),\n  rows: propTypes.arrayOf(propTypes.object),\n  children: propTypes.node\n};\n\nvar DataTableTableScroll = function DataTableTableScroll(props) {\n  var autoWidth = props.autoWidth,\n      bordered = props.bordered,\n      borderless = props.borderless,\n      btn = props.btn,\n      children = props.children,\n      columns = props.columns,\n      dark = props.dark,\n      fixed = props.fixed,\n      hover = props.hover,\n      handleSort = props.handleSort,\n      handleTableBodyScroll = props.handleTableBodyScroll,\n      maxHeight = props.maxHeight,\n      responsive = props.responsive,\n      responsiveSm = props.responsiveSm,\n      responsiveMd = props.responsiveMd,\n      responsiveLg = props.responsiveLg,\n      responsiveXl = props.responsiveXl,\n      rows = props.rows,\n      scrollX = props.scrollX,\n      scrollY = props.scrollY,\n      small = props.small,\n      sortable = props.sortable,\n      sorted = props.sorted,\n      striped = props.striped,\n      tbodyColor = props.tbodyColor,\n      tbodyTextWhite = props.tbodyTextWhite,\n      theadColor = props.theadColor,\n      theadTextWhite = props.theadTextWhite,\n      translateScrollHead = props.translateScrollHead,\n      attributes = _objectWithoutProperties(props, [\"autoWidth\", \"bordered\", \"borderless\", \"btn\", \"children\", \"columns\", \"dark\", \"fixed\", \"hover\", \"handleSort\", \"handleTableBodyScroll\", \"maxHeight\", \"responsive\", \"responsiveSm\", \"responsiveMd\", \"responsiveLg\", \"responsiveXl\", \"rows\", \"scrollX\", \"scrollY\", \"small\", \"sortable\", \"sorted\", \"striped\", \"tbodyColor\", \"tbodyTextWhite\", \"theadColor\", \"theadTextWhite\", \"translateScrollHead\"]);\n\n  return React.createElement(\"div\", {\n    className: \"col-sm-12\"\n  }, React.createElement(\"div\", {\n    className: \"dataTables_scroll\"\n  }, React.createElement(\"div\", {\n    className: \"dataTables_scrollHead\",\n    style: {\n      overflow: \"hidden\"\n    }\n  }, React.createElement(\"div\", {\n    className: \"dataTables_scrollHeadInner\",\n    style: {\n      position: \"relative\",\n      transform: \"translateX(-\".concat(translateScrollHead, \"px)\"),\n      boxSizing: \"content-box\",\n      paddingRight: \"15px\",\n      minWidth: \"\".concat(scrollX ? columns.map(function (col) {\n        return col.width;\n      }).reduce(function (prev, curr) {\n        return prev + curr;\n      }, 0) + \"px\" : \"auto\")\n    }\n  }, React.createElement(Table, _extends({\n    autoWidth: autoWidth,\n    bordered: bordered,\n    borderless: borderless,\n    btn: btn,\n    dark: dark,\n    fixed: fixed,\n    hover: hover,\n    responsive: responsive,\n    responsiveSm: responsiveSm,\n    responsiveMd: responsiveMd,\n    responsiveLg: responsiveLg,\n    responsiveXl: responsiveXl,\n    small: small,\n    striped: striped,\n    className: \"dataTable\"\n  }, attributes), React.createElement(DataTableHead, {\n    color: theadColor,\n    textWhite: theadTextWhite,\n    columns: columns,\n    handleSort: handleSort,\n    scrollX: scrollX,\n    scrollY: scrollY,\n    sortable: sortable,\n    sorted: sorted\n  })))), React.createElement(\"div\", {\n    className: \"dataTable_scrollBody\",\n    style: {\n      overflow: \"auto\"\n    },\n    onScroll: handleTableBodyScroll\n  }, React.createElement(Table, _extends({\n    style: {\n      minWidth: \"\".concat(scrollX ? columns.map(function (col) {\n        return col.width;\n      }).reduce(function (prev, curr) {\n        return prev + curr;\n      }, 0) + \"px\" : \"auto\")\n    },\n    autoWidth: autoWidth,\n    bordered: bordered,\n    borderless: borderless,\n    btn: btn,\n    dark: dark,\n    fixed: fixed,\n    hover: hover,\n    maxHeight: maxHeight,\n    responsive: responsive,\n    responsiveSm: responsiveSm,\n    responsiveMd: responsiveMd,\n    responsiveLg: responsiveLg,\n    responsiveXl: responsiveXl,\n    scrollY: scrollY,\n    small: small,\n    striped: striped,\n    className: \"dataTable\"\n  }, attributes), React.createElement(\"colgroup\", null, columns.map(function (col) {\n    return React.createElement(\"col\", {\n      key: col.field,\n      style: {\n        width: \"\".concat(col.width, \"px\") || \"auto\",\n        minWidth: \"\".concat(col.width, \"px\") || \"auto\"\n      }\n    });\n  })), React.createElement(TableBody, {\n    color: tbodyColor,\n    textWhite: tbodyTextWhite,\n    rows: rows\n  }), children))));\n};\n\nDataTableTableScroll.propTypes = {\n  autoWidth: propTypes.bool.isRequired,\n  bordered: propTypes.bool.isRequired,\n  borderless: propTypes.bool.isRequired,\n  btn: propTypes.bool.isRequired,\n  dark: propTypes.bool.isRequired,\n  fixed: propTypes.bool.isRequired,\n  hover: propTypes.bool.isRequired,\n  handleSort: propTypes.func.isRequired,\n  handleTableBodyScroll: propTypes.func.isRequired,\n  responsive: propTypes.bool.isRequired,\n  responsiveSm: propTypes.bool.isRequired,\n  responsiveMd: propTypes.bool.isRequired,\n  responsiveLg: propTypes.bool.isRequired,\n  responsiveXl: propTypes.bool.isRequired,\n  sortable: propTypes.bool.isRequired,\n  sorted: propTypes.bool.isRequired,\n  small: propTypes.bool.isRequired,\n  striped: propTypes.bool.isRequired,\n  theadColor: propTypes.string.isRequired,\n  theadTextWhite: propTypes.bool.isRequired,\n  tbodyColor: propTypes.string.isRequired,\n  tbodyTextWhite: propTypes.bool.isRequired,\n  translateScrollHead: propTypes.number.isRequired,\n  columns: propTypes.arrayOf(propTypes.object),\n  rows: propTypes.arrayOf(propTypes.object),\n  children: propTypes.node,\n  maxHeight: propTypes.string,\n  scrollX: propTypes.bool,\n  scrollY: propTypes.bool\n};\nvar ControlledSelectInput = React.forwardRef(function (_ref, inputRef) {\n  var value = _ref.value,\n      required = _ref.required;\n  return React.createElement(\"input\", {\n    type: \"text\",\n    ref: inputRef,\n    required: required ? required : false,\n    readOnly: true,\n    value: value,\n    onChange: function onChange() {},\n    className: \"select-dropdown\",\n    onFocus: function onFocus(e) {\n      return e.target.style.caretColor = \"transparent\";\n    }\n  });\n});\nControlledSelectInput.propTypes = {\n  required: propTypes.bool,\n  value: propTypes.string\n};\nControlledSelectInput.defaultProps = {\n  required: false\n};\n\nvar Input =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Input, _React$Component);\n\n  function Input(props) {\n    var _this;\n\n    _classCallCheck(this, Input);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Input).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onBlur\", function (event) {\n      event.stopPropagation();\n\n      _this.setState({\n        isFocused: false\n      });\n\n      _this.props.onBlur && _this.props.onBlur(event);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFocus\", function (event) {\n      event.stopPropagation();\n\n      _this.setState({\n        isFocused: true\n      });\n\n      _this.props.onFocus && _this.props.onFocus(event);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (event) {\n      event.stopPropagation();\n\n      if (_this.props.type !== \"checkbox\" && _this.props.type !== \"radio\") {\n        _this.setState({\n          innerValue: event.target.value,\n          isPristine: false\n        });\n      }\n\n      _this.props.onChange && _this.props.onChange(event);\n      _this.props.getValue && _this.props.getValue(event.target.value);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onInput\", function (event) {\n      event.stopPropagation();\n\n      if (_this.props.type !== \"checkbox\" && _this.props.type !== \"radio\") {\n        _this.setState({\n          innerValue: event.target.value,\n          isPristine: false\n        });\n      }\n\n      _this.props.onInput && _this.props.onInput(event);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setFocus\", function () {\n      _this.inputElementRef.current.focus();\n    });\n\n    _this.state = {\n      innerValue: props.value || props.valueDefault,\n      isFocused: false,\n      isPristine: true\n    };\n    _this.inputElementRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(Input, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // User wants to access the input ref, but we have to use it intenrally to.\n      // Return Ref instance to share ref with parent\n      // then user sets ref as a callback -> inputRef={ref => this.myInputRef = ref}\n      this.props.inputRef && this.props.inputRef(this.inputElementRef.current);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          background = _this$props.background,\n          children = _this$props.children,\n          className = _this$props.className,\n          containerClass = _this$props.containerClass,\n          disabled = _this$props.disabled,\n          error = _this$props.error,\n          filled = _this$props.filled,\n          gap = _this$props.gap,\n          getValue = _this$props.getValue,\n          group = _this$props.group,\n          hint = _this$props.hint,\n          icon = _this$props.icon,\n          iconBrand = _this$props.iconBrand,\n          iconClass = _this$props.iconClass,\n          iconLight = _this$props.iconLight,\n          onIconClick = _this$props.onIconClick,\n          onIconMouseEnter = _this$props.onIconMouseEnter,\n          onIconMouseLeave = _this$props.onIconMouseLeave,\n          iconRegular = _this$props.iconRegular,\n          iconSize = _this$props.iconSize,\n          id = _this$props.id,\n          inputRef = _this$props.inputRef,\n          noTag = _this$props.noTag,\n          outline = _this$props.outline,\n          label = _this$props.label,\n          labelClass = _this$props.labelClass,\n          size = _this$props.size,\n          success = _this$props.success,\n          Tag = _this$props.tag,\n          type = _this$props.type,\n          validate = _this$props.validate,\n          value = _this$props.value,\n          valueDefault = _this$props.valueDefault,\n          attributes = _objectWithoutProperties(_this$props, [\"background\", \"children\", \"className\", \"containerClass\", \"disabled\", \"error\", \"filled\", \"gap\", \"getValue\", \"group\", \"hint\", \"icon\", \"iconBrand\", \"iconClass\", \"iconLight\", \"onIconClick\", \"onIconMouseEnter\", \"onIconMouseLeave\", \"iconRegular\", \"iconSize\", \"id\", \"inputRef\", \"noTag\", \"outline\", \"label\", \"labelClass\", \"size\", \"success\", \"tag\", \"type\", \"validate\", \"value\", \"valueDefault\"]);\n\n      var isNotEmpty = (!!this.state.innerValue || !!hint || this.state.isFocused || this.state.innerValue === 0) && type !== \"checkbox\" && type !== \"radio\";\n      var TagInput = \"\";\n      var formControlClass = \"\";\n\n      if (type === \"textarea\") {\n        formControlClass = outline ? \"form-control\" : \"md-textarea form-control\";\n        TagInput = \"textarea\";\n      } else {\n        formControlClass = \"form-control\";\n        TagInput = \"input\";\n        attributes.type = type;\n      }\n\n      attributes.disabled = disabled;\n      var classes = classNames(formControlClass, size ? \"form-control-\".concat(size) : false, validate ? \"validate\" : false, filled ? \"filled-in\" : false, gap ? \"with-gap\" : false, type === \"checkbox\" ? gap ? false : \"form-check-input\" : false, type === \"radio\" ? \"form-check-input\" : false, className);\n      var containerClassFix = classNames(type === \"checkbox\" || type === \"radio\" ? typeof label === \"boolean\" && label ? \"d-flex\" : \"form-check my-3\" : \"md-form\", group ? \"form-group\" : false, size ? \"form-\".concat(size) : false, outline && \"md-outline\", background && \"md-bg\", containerClass);\n      var iconClassFix = classNames(isNotEmpty && this.state.isFocused ? \"active\" : false, iconClass, \"prefix\");\n      var labelClassFix = classNames(isNotEmpty ? \"active\" : false, disabled ? \"disabled\" : false, type === \"checkbox\" ? typeof label === \"boolean\" && label ? \"form-check-label\" : \"form-check-label mr-5\" : false, type === \"radio\" ? typeof label === \"boolean\" && label ? \"form-check-label\" : \"form-check-label mr-5\" : false, labelClass);\n\n      var renderFunction = function renderFunction() {\n        return React.createElement(React.Fragment, null, icon && React.createElement(Fa, {\n          icon: icon,\n          size: iconSize,\n          brand: iconBrand,\n          light: iconLight,\n          regular: iconRegular,\n          className: iconClassFix,\n          onClick: onIconClick ? onIconClick : _this2.setFocus,\n          onMouseEnter: onIconMouseEnter,\n          onMouseLeave: onIconMouseLeave\n        }), React.createElement(TagInput, _extends({\n          \"data-test\": \"input\"\n        }, attributes, {\n          className: classes,\n          id: id,\n          placeholder: hint,\n          ref: _this2.inputElementRef,\n          value: _this2.state.innerValue,\n          onBlur: _this2.onBlur,\n          onChange: _this2.onChange,\n          onInput: _this2.onInput,\n          onFocus: _this2.onFocus\n        })), label && React.createElement(\"label\", {\n          className: labelClassFix,\n          htmlFor: id,\n          \"data-error\": error,\n          \"data-success\": success,\n          id: id,\n          onClick: _this2.setFocus\n        }, label), children);\n      };\n\n      return noTag ? renderFunction() : React.createElement(Tag, {\n        className: containerClassFix\n      }, renderFunction());\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (nextProps.value !== prevState.value) {\n        return {\n          innerValue: nextProps.value\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return Input;\n}(React.Component);\n\nInput.propTypes = {\n  className: propTypes.string,\n  children: propTypes.node,\n  containerClass: propTypes.string,\n  disabled: propTypes.bool,\n  error: propTypes.string,\n  filled: propTypes.bool,\n  gap: propTypes.bool,\n  getValue: propTypes.func,\n  group: propTypes.bool,\n  hint: propTypes.string,\n  icon: propTypes.string,\n  iconBrand: propTypes.bool,\n  iconClass: propTypes.string,\n  iconLight: propTypes.bool,\n  onIconClick: propTypes.func,\n  onIconMouseEnter: propTypes.func,\n  onIconMouseLeave: propTypes.func,\n  iconRegular: propTypes.bool,\n  iconSize: propTypes.string,\n  id: propTypes.string,\n  inputRef: propTypes.oneOfType([propTypes.object, propTypes.func]),\n  label: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.object, propTypes.bool]),\n  labelClass: propTypes.string,\n  noTag: propTypes.bool,\n  onBlur: propTypes.func,\n  onChange: propTypes.func,\n  onFocus: propTypes.func,\n  onInput: propTypes.func,\n  outline: propTypes.bool,\n  size: propTypes.string,\n  success: propTypes.string,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  type: propTypes.string,\n  validate: propTypes.bool,\n  value: propTypes.oneOfType([propTypes.number, propTypes.string]),\n  valueDefault: propTypes.oneOfType([propTypes.number, propTypes.string])\n};\nInput.defaultProps = {\n  className: \"\",\n  containerClass: \"\",\n  disabled: false,\n  error: \"\",\n  filled: false,\n  gap: false,\n  group: false,\n  hint: undefined,\n  icon: \"\",\n  iconBrand: false,\n  iconClass: \"\",\n  iconLight: false,\n  onIconMouseEnter: function onIconMouseEnter() {},\n  onIconMouseLeave: function onIconMouseLeave() {},\n  iconRegular: false,\n  iconSize: undefined,\n  id: undefined,\n  noTag: false,\n  outline: false,\n  label: \"\",\n  labelClass: \"\",\n  size: \"\",\n  success: \"\",\n  tag: \"div\",\n  type: \"text\",\n  validate: false,\n  valueDefault: \"\"\n};\n\nvar ControlledSelectOption = function ControlledSelectOption(_ref) {\n  var checked = _ref.checked,\n      disabled = _ref.disabled,\n      icon = _ref.icon,\n      multiple = _ref.multiple,\n      selectOption = _ref.selectOption,\n      text = _ref.text,\n      value = _ref.value,\n      separator = _ref.separator,\n      isFocused = _ref.isFocused,\n      focusShadow = _ref.focusShadow,\n      focusBackgroundColor = _ref.focusBackgroundColor,\n      selectAllClassName = _ref.selectAllClassName;\n  var classes = classNames((disabled || separator) && 'disabled', separator && 'optgroup', checked && 'active');\n  var spanClasses = classNames('filtrable', selectAllClassName && selectAllClassName);\n  var focusedStyles = {\n    backgroundColor: isFocused ? focusBackgroundColor : null,\n    boxShadow: isFocused ? focusShadow : null\n  };\n  return React.createElement(\"li\", {\n    \"data-multiple\": multiple,\n    className: classes,\n    onClick: function onClick() {\n      return selectOption(value);\n    },\n    style: focusedStyles\n  }, icon && React.createElement(\"img\", {\n    src: icon,\n    alt: \"\",\n    className: \"rounded-circle\"\n  }), React.createElement(\"span\", {\n    \"data-multiple\": multiple,\n    className: spanClasses\n  }, multiple && React.createElement(React.Fragment, null, React.createElement(\"input\", {\n    type: \"checkbox\",\n    value: value,\n    className: \"form-check-input\",\n    checked: checked,\n    disabled: disabled,\n    onChange: function onChange() {}\n  }), !separator && React.createElement(\"label\", {\n    style: {\n      height: '10px'\n    },\n    \"data-multiple\": multiple\n  })), text ? text : value));\n};\n\nControlledSelectOption.propTypes = {\n  checked: propTypes.bool,\n  disabled: propTypes.bool,\n  focusShadow: propTypes.string,\n  focusBackgroundColor: propTypes.string,\n  icon: propTypes.string,\n  isFocused: propTypes.bool,\n  multiple: propTypes.bool,\n  selectAllClassName: propTypes.string,\n  separator: propTypes.bool,\n  selectOption: propTypes.func,\n  text: propTypes.oneOfType([propTypes.object, propTypes.string]),\n  value: propTypes.string\n};\nControlledSelectOption.defaultProps = {\n  checked: false,\n  disabled: false,\n  focusShadow: 'inset 0px -17px 15px -16px rgba(0, 0, 0, 0.35)',\n  focusBackgroundColor: '#eee',\n  icon: '',\n  isFocused: false,\n  multiple: false,\n  separator: false\n};\n\nvar ControlledSelectOptions =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ControlledSelectOptions, _Component);\n\n  function ControlledSelectOptions(props) {\n    var _this;\n\n    _classCallCheck(this, ControlledSelectOptions);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ControlledSelectOptions).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"search\", function (value) {\n      var filteredOptions = _this.state.options.filter(function (option) {\n        if (option.text) {\n          return option.text.toLowerCase().match(value.toLowerCase().trim());\n        } else {\n          return option.value.toLowerCase().match(value.toLowerCase().trim());\n        }\n      });\n\n      _this.props.changeFocus(null);\n\n      _this.setState({\n        filteredOptions: filteredOptions\n      }, function () {\n        return _this.props.setFilteredOptions(_this.state.filteredOptions);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFocus\", function (e) {\n      var focused = _this.props.focused;\n      (e.keyCode === 40 || e.keyCode === 38 || e.keyCode === 13) && e.preventDefault(); //Enter\n\n      if (e.keyCode === 13 && focused !== null) {\n        focused === -1 ? _this.props.selectOption(_this.props.selectAllValue) : _this.props.selectOption(_this.state.filteredOptions[focused].value);\n      } //Esc\n\n\n      e.keyCode === 27 && _this.props.changeFocus(null); //Down\n\n      if (e.keyCode === 40) {\n        if (focused === null) {\n          _this.props.selectAll && _this.state.filteredOptions.length !== 1 ? _this.props.changeFocus(-1) : _this.props.changeFocus(0);\n        } else {\n          focused < _this.state.filteredOptions.length - 1 && _this.props.changeFocus(1);\n        }\n      } //Up\n\n\n      if (e.keyCode === 38) {\n        focused >= (_this.props.selectAll ? 0 : 1) && _this.state.filteredOptions.length > 1 && _this.props.changeFocus(-1);\n      }\n    });\n\n    _this.state = {\n      filteredOptions: _this.props.options || [],\n      options: _this.props.options || [],\n      searchValue: ''\n    };\n    _this.inputRef = null;\n    return _this;\n  }\n\n  _createClass(ControlledSelectOptions, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.inputRef.current) this.inputRef = this.props.inputRef.current;\n      this.inputRef.addEventListener('keydown', this.handleFocus);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.inputRef.removeEventListener('keydown', this.handleFocus);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevState.options !== this.props.options) {\n        this.setState({\n          filteredOptions: this.props.options,\n          options: this.props.options\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          multiple = _this$props.multiple,\n          search = _this$props.search,\n          searchLabel = _this$props.searchLabel,\n          searchId = _this$props.searchId,\n          selected = _this$props.selected,\n          selectOption = _this$props.selectOption,\n          selectAll = _this$props.selectAll;\n      var classes = classNames('dropdown-content', 'select-dropdown', 'fadeElement');\n      return React.createElement(\"ul\", {\n        className: classes\n      }, search && React.createElement(Input, {\n        label: searchLabel,\n        id: searchId,\n        getValue: this.search,\n        \"data-search\": \"true\",\n        onKeyDown: this.handleFocus\n      }), React.createElement(ControlledSelectOption, {\n        checked: false,\n        disabled: true,\n        icon: null,\n        value: selected\n      }), selectAll && multiple && this.state.filteredOptions.length > 1 && React.createElement(ControlledSelectOption, {\n        text: this.props.selectAllLabel,\n        value: this.props.selectAllValue,\n        selectAllClassName: this.props.selectAllClassName,\n        checked: this.props.allChecked,\n        multiple: true,\n        selectOption: selectOption,\n        isFocused: this.props.focused === -1,\n        focusShadow: this.props.focusShadow,\n        focusBackgroundColor: this.props.focusBackgroundColor\n      }), this.state.filteredOptions.map(function (option, index) {\n        return React.createElement(ControlledSelectOption, {\n          key: \"\".concat(option.value, \"-\").concat(index),\n          checked: option.checked,\n          disabled: option.disabled,\n          multiple: multiple,\n          icon: option.icon,\n          text: option.text,\n          value: option.value,\n          separator: option.separator,\n          selectOption: selectOption,\n          isFocused: index === _this2.props.focused,\n          focusShadow: _this2.props.focusShadow,\n          focusBackgroundColor: _this2.props.focusBackgroundColor\n        });\n      }));\n    }\n  }]);\n\n  return ControlledSelectOptions;\n}(Component);\n\nControlledSelectOptions.propTypes = {\n  allChecked: propTypes.bool,\n  changeFocus: propTypes.func,\n  focused: propTypes.number,\n  focusShadow: propTypes.string,\n  focusBackgroundColor: propTypes.string,\n  inputRef: propTypes.shape({\n    current: propTypes.instanceOf(typeof Element === 'undefined' ? function () {} : Element)\n  }),\n  multiple: propTypes.bool,\n  options: propTypes.arrayOf(propTypes.shape({\n    checked: propTypes.bool,\n    separator: propTypes.bool,\n    disabled: propTypes.bool,\n    icon: propTypes.string,\n    image: propTypes.string,\n    text: propTypes.oneOfType([propTypes.object, propTypes.string]),\n    value: propTypes.string\n  })),\n  selected: propTypes.string.isRequired,\n  selectOption: propTypes.func.isRequired,\n  search: propTypes.bool,\n  searchLabel: propTypes.string,\n  searchId: propTypes.string,\n  selectAllClassName: propTypes.string,\n  selectAllLabel: propTypes.string,\n  selectAllValue: propTypes.string,\n  setFilteredOptions: propTypes.func\n};\nControlledSelectOptions.defaultProps = {\n  focused: null,\n  multiple: false,\n  options: [],\n  search: false,\n  selectAllLabel: 'Select All',\n  searchId: 'selectSearchInput',\n  searchLabel: 'Search'\n};\nvar SelectContext = React.createContext();\n\nvar Select =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Select, _React$Component);\n\n  function Select(props) {\n    var _this;\n\n    _classCallCheck(this, Select);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Select).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onInputClick\", function (_ref) {\n      var input = _ref.target;\n      var dropdown = input.nextElementSibling;\n      dropdown.classList.add(\"fadeIn\");\n      !_this.props.outline && (dropdown.style.top = \".6rem\");\n\n      _this.setState({\n        dropdown: dropdown,\n        input: input\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDocumentClick\", function (_ref2) {\n      var target = _ref2.target;\n      var _this$state = _this.state,\n          dropdown = _this$state.dropdown,\n          input = _this$state.input;\n\n      if (dropdown) {\n        var isMultiple = target.dataset.multiple === \"true\";\n        var isSearchLabel = target.id === \"selectSearchInput\";\n\n        if (target === input || isMultiple || isSearchLabel) {\n          return;\n        } else {\n          dropdown.classList.remove(\"fadeIn\");\n\n          _this.changeFocus(null);\n\n          _this.setState({\n            dropdown: null\n          });\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"computeValuesAndText\", function (options) {\n      var checkedOptions = options.filter(function (option) {\n        return option.checked;\n      });\n      var checkedValues = checkedOptions.map(function (opt) {\n        return opt.value;\n      });\n      var checkedTexts = checkedOptions.map(function (opt) {\n        return opt.text ? opt.text : opt.value;\n      });\n      var selectTextContent = checkedTexts.length ? checkedTexts.join(\", \") : _this.props.selected;\n      var allChecked = checkedOptions.length === options.filter(function (option) {\n        return !option.disabled;\n      }).length;\n      return {\n        isControlledEmpty: !checkedOptions.length,\n        selectValue: checkedValues,\n        selectTextContent: selectTextContent,\n        allChecked: allChecked\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setFilteredOptions\", function (filteredOptions) {\n      _this.setState({\n        filteredOptions: filteredOptions\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setOptionStatus\", function (option, status) {\n      if (!option.disabled) {\n        option.checked = status;\n      }\n\n      return option;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"applyFilteredOptionsChanges\", function (options, filteredOptions) {\n      filteredOptions.forEach(function (filteredOption) {\n        var index = options.findIndex(function (option) {\n          return option.value === filteredOption.value;\n        });\n        filteredOption.checked !== options[index].checked && _this.setOptionStatus(options[index], filteredOption.checked);\n      });\n      return options;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"changeFocus\", function (value) {\n      switch (value) {\n        case null:\n          _this.setState(function (prevState) {\n            return prevState.focused !== value ? {\n              focused: null\n            } : null;\n          });\n\n          break;\n\n        case 0:\n          _this.setState({\n            focused: 0\n          });\n\n          break;\n\n        default:\n          _this.setState(function (prevState) {\n            return {\n              focused: prevState.focused + value\n            };\n          });\n\n          break;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"selectOneOption\", function (value) {\n      _this.setState(function (prevState) {\n        var options = _toConsumableArray(prevState.options);\n\n        var optionIndex = options.findIndex(function (option) {\n          return option.value === value;\n        });\n        options.forEach(function (option, index) {\n          return index !== optionIndex ? _this.setOptionStatus(option, false) : _this.setOptionStatus(option, !option.checked);\n        });\n        return _this.computeValuesAndText(options);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"selectMultipleOption\", function (value) {\n      _this.setState(function (prevState) {\n        var options = _toConsumableArray(prevState.options);\n\n        var optionIndex = options.findIndex(function (option) {\n          return option.value === value;\n        });\n        options[optionIndex].checked = !options[optionIndex].checked;\n        return _this.computeValuesAndText(options);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"selectAllOptions\", function () {\n      _this.setState(function (prevState) {\n        var options = _toConsumableArray(prevState.options);\n\n        var filteredOptions = _toConsumableArray(prevState.filteredOptions).filter(function (option) {\n          return !option.disabled;\n        });\n\n        var areSomeUnchecked = filteredOptions.some(function (option) {\n          return !option.checked;\n        });\n        areSomeUnchecked ? filteredOptions.map(function (option) {\n          return !option.checked && _this.setOptionStatus(option, true);\n        }) : filteredOptions.map(function (option) {\n          return _this.setOptionStatus(option, false);\n        });\n\n        if (filteredOptions.length !== options.length) {\n          options = _this.applyFilteredOptionsChanges(options, filteredOptions);\n        }\n\n        return _this.computeValuesAndText(options);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"selectOption\", function (value) {\n      if (_this.props.multiple) {\n        value === _this.props.selectAllValue ? _this.selectAllOptions() : _this.selectMultipleOption(value);\n      } else {\n        _this.selectOneOption(value);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"triggerOptionChange\", function () {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var text = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.state.selectedValue;\n      Array.isArray(text) && (text = text.join(\", \"));\n\n      _this.setState({\n        selectValue: value,\n        selectTextContent: text,\n        isEmpty: value.length ? false : true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setSelected\", function (selectedValue) {\n      return _this.setState({\n        selectedValue: selectedValue\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"returnComponentContent\", function () {\n      var _this$props = _this.props,\n          className = _this$props.className,\n          color = _this$props.color,\n          children = _this$props.children,\n          getTextContent = _this$props.getTextContent,\n          getValue = _this$props.getValue,\n          label = _this$props.label,\n          labelClass = _this$props.labelClass,\n          multiple = _this$props.multiple,\n          outline = _this$props.outline,\n          required = _this$props.required,\n          search = _this$props.search,\n          searchLabel = _this$props.searchLabel,\n          searchId = _this$props.searchId,\n          selected = _this$props.selected,\n          selectAll = _this$props.selectAll,\n          selectAllClassName = _this$props.selectAllClassName,\n          selectAllLabel = _this$props.selectAllLabel,\n          selectAllValue = _this$props.selectAllValue,\n          focusShadow = _this$props.focusShadow,\n          focusBackgroundColor = _this$props.focusBackgroundColor,\n          attributes = _objectWithoutProperties(_this$props, [\"className\", \"color\", \"children\", \"getTextContent\", \"getValue\", \"label\", \"labelClass\", \"multiple\", \"outline\", \"required\", \"search\", \"searchLabel\", \"searchId\", \"selected\", \"selectAll\", \"selectAllClassName\", \"selectAllLabel\", \"selectAllValue\", \"focusShadow\", \"focusBackgroundColor\"]);\n\n      var _this$state2 = _this.state,\n          isEmpty = _this$state2.isEmpty,\n          isControlledEmpty = _this$state2.isControlledEmpty,\n          isOpened = _this$state2.dropdown,\n          selectTextContent = _this$state2.selectTextContent;\n      var classes = classNames(\"select-wrapper mdb-select md-form\", color ? \"colorful-select dropdown-\" + color : \"\", outline ? \"md-outline\" : className);\n      var labelClasses = classNames(!outline && \"mdb-main-label\", labelClass, children ? (!isEmpty || isOpened) && \"active text-primary\" : (!isControlledEmpty || isOpened) && \"active text-primary\");\n      var needToMoveOutline = outline && isEmpty && !isOpened;\n      var uncontrolledLabelStyles = {\n        transform: needToMoveOutline && \"translateY(23px)\",\n        fontSize: needToMoveOutline && \"1rem\",\n        fontWeight: needToMoveOutline && \"300\",\n        left: !outline && isEmpty && !isOpened && \"15px\"\n      };\n      var controlledLabelStyles = {\n        zIndex: outline && (!isControlledEmpty || isOpened) && 4,\n        transform: isControlledEmpty && !isOpened && \"translateY(7px)\"\n      };\n\n      if (!children) {\n        var controlledValue = isControlledEmpty ? selected && !label ? selected : \"\" : selectTextContent;\n        return React.createElement(React.Fragment, null, React.createElement(\"div\", _extends({}, attributes, {\n          \"data-color\": color,\n          \"data-multiple\": multiple,\n          className: classes\n        }), React.createElement(\"span\", {\n          className: \"caret\"\n        }, \"\\u25BC\"), React.createElement(ControlledSelectInput, {\n          value: controlledValue,\n          ref: _this.inputRef,\n          required: required\n        }), React.createElement(ControlledSelectOptions, {\n          multiple: multiple,\n          options: _this.state.options,\n          search: search,\n          searchLabel: searchLabel,\n          selected: selected,\n          selectOption: _this.selectOption,\n          selectAll: selectAll,\n          selectAllClassName: selectAllClassName,\n          selectAllLabel: selectAllLabel,\n          selectAllValue: selectAllValue,\n          allChecked: _this.state.allChecked,\n          inputRef: _this.inputRef,\n          setFilteredOptions: _this.setFilteredOptions,\n          focused: _this.state.focused,\n          changeFocus: _this.changeFocus,\n          focusShadow: focusShadow,\n          focusBackgroundColor: focusBackgroundColor\n        }), label && React.createElement(\"label\", {\n          className: labelClasses,\n          style: controlledLabelStyles\n        }, label)));\n      } else {\n        return React.createElement(SelectContext.Provider, {\n          value: {\n            state: _this.state,\n            multiple: multiple,\n            triggerOptionChange: _this.triggerOptionChange,\n            label: label,\n            setSelected: _this.setSelected,\n            onInputClick: _this.onInputClick\n          }\n        }, React.createElement(\"div\", _extends({}, attributes, {\n          \"data-color\": color,\n          \"data-multiple\": multiple,\n          className: classes\n        }), React.createElement(\"span\", {\n          className: \"caret\"\n        }, \"\\u25BC\"), children), label && React.createElement(\"label\", {\n          className: labelClasses,\n          style: uncontrolledLabelStyles\n        }, label));\n      }\n    });\n\n    _this.state = {\n      selectedValue: \"\",\n      isEmpty: true,\n      isControlledEmpty: true,\n      selectValue: [],\n      selectTextContent: \"\",\n      options: _this.props.options || [],\n      allChecked: false,\n      focused: null,\n      filteredOptions: _this.props.options || [],\n      input: null,\n      dropdown: null\n    };\n    _this.inputRef = React.createRef();\n\n    if (_this.props.options && _this.props.options.length) {\n      Object.assign(_this.state, _this.computeValuesAndText(_this.props.options));\n    }\n\n    return _this;\n  }\n\n  _createClass(Select, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.addEventListener(\"click\", this.onDocumentClick);\n\n      if (this.inputRef && this.inputRef.current) {\n        this.inputRef.current.addEventListener(\"click\", this.onInputClick);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevState.selectValue !== this.state.selectValue) {\n        if (typeof this.props.getValue === \"function\") {\n          this.props.getValue(this.state.selectValue);\n        }\n\n        if (typeof this.props.getTextContent === \"function\") {\n          this.props.getTextContent(this.state.selectTextContent);\n        }\n\n        if (!this.props.children) {\n          this.setState({\n            isControlledEmpty: !this.state.options.some(function (option) {\n              return option.checked;\n            })\n          });\n        }\n      }\n\n      if (this.props.options !== prevProps.options) {\n        var _this$computeValuesAn = this.computeValuesAndText(this.props.options),\n            selectValue = _this$computeValuesAn.selectValue,\n            selectTextContent = _this$computeValuesAn.selectTextContent,\n            allChecked = _this$computeValuesAn.allChecked;\n\n        this.setState({\n          options: this.props.options,\n          filteredOptions: this.props.options,\n          selectValue: selectValue,\n          selectTextContent: selectTextContent,\n          allChecked: allChecked\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.removeEventListener(\"click\", this.onDocumentClick);\n\n      if (this.inputRef && this.inputRef.current) {\n        this.inputRef.current.removeEventListener(\"click\", this.onInputClick);\n      }\n    } // open nieghbour ul of clicked input\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.returnComponentContent();\n    }\n  }]);\n\n  return Select;\n}(React.Component);\n\nSelect.propTypes = {\n  children: propTypes.node,\n  className: propTypes.string,\n  color: propTypes.string,\n  focusShadow: propTypes.string,\n  focusBackgroundColor: propTypes.string,\n  getTextContent: propTypes.func,\n  getValue: propTypes.func,\n  label: propTypes.string,\n  labelClass: propTypes.string,\n  multiple: propTypes.bool,\n  options: propTypes.arrayOf(propTypes.shape({\n    checked: propTypes.bool,\n    disabled: propTypes.bool,\n    icon: propTypes.string,\n    text: propTypes.oneOfType([propTypes.object, propTypes.string]),\n    value: propTypes.string\n  })),\n  outline: propTypes.bool,\n  required: propTypes.bool,\n  search: propTypes.bool,\n  searchLabel: propTypes.string,\n  searchId: propTypes.string,\n  selected: propTypes.string,\n  selectAllClassName: propTypes.string,\n  selectAllLabel: propTypes.string,\n  selectAllValue: propTypes.string\n};\nSelect.defaultProps = {\n  label: \"\",\n  labelClass: \"\",\n  outline: false,\n  required: false,\n  selected: \"\",\n  selectAllValue: \"0\"\n};\n\nvar selectContextHOC = function selectContextHOC(Component) {\n  return (\n    /*#__PURE__*/\n    function (_React$Component) {\n      _inherits(HOC, _React$Component);\n\n      function HOC() {\n        _classCallCheck(this, HOC);\n\n        return _possibleConstructorReturn(this, _getPrototypeOf(HOC).apply(this, arguments));\n      }\n\n      _createClass(HOC, [{\n        key: \"render\",\n        value: function render() {\n          var _this = this;\n\n          return React.createElement(SelectContext.Consumer, null, function (context) {\n            return React.createElement(Component, _extends({}, _this.props, {\n              context: context\n            }));\n          });\n        }\n      }]);\n\n      return HOC;\n    }(React.Component)\n  );\n};\n\nvar SelectInput =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SelectInput, _React$Component);\n\n  function SelectInput() {\n    _classCallCheck(this, SelectInput);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SelectInput).apply(this, arguments));\n  }\n\n  _createClass(SelectInput, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.selected && this.props.context.setSelected(this.props.selected);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevProps.context.state.isEmpty !== this.props.context.state.isEmpty) {\n        this.props.selected && this.props.context.setSelected(this.props.selected);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var classes = classNames(\"select-dropdown\", this.props.className);\n      var _this$props = this.props,\n          attributes = _this$props.attributes,\n          context = _this$props.context;\n      var value = context.state.isEmpty ? this.props.selected && !context.label ? this.props.selected : \"\" : context.state.selectTextContent;\n      return React.createElement(\"input\", _extends({\n        type: \"text\",\n        readOnly: true,\n        onClick: function onClick(e) {\n          return context.onInputClick(e);\n        },\n        value: value\n      }, attributes, {\n        className: classes\n      }));\n    }\n  }]);\n\n  return SelectInput;\n}(React.Component);\n\nSelectInput.propTypes = {\n  context: propTypes.object.isRequired,\n  className: propTypes.string,\n  selected: propTypes.oneOfType([propTypes.string, propTypes.number])\n};\nSelectInput.defaultProps = {\n  className: \"\"\n};\nvar SelectInput$1 = SelectInput = selectContextHOC(SelectInput);\nvar css$5 = \".fadeElement {\\n  -webkit-transition: 0.5s;\\n  -moz-transition: 0.5s;\\n  -o-transition: 0.5s;\\n  transition: 0.5s;\\n  display: block;\\n  width: 100%;\\n  top: 0;\\n  opacity: 0;\\n  transform-origin:top;\\n  transform:scaleY(0.7);\\n  visibility: hidden;\\n  pointer-events: none;\\n}\\n.fadeElement.fadeIn {\\n  transform:scaleY(1);\\n  opacity: 1;\\n  visibility: visible;\\n  pointer-events: auto;\\n}\\n\";\nstyleInject(css$5);\n\nvar Options =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Options, _React$Component);\n\n  function Options(props) {\n    var _this;\n\n    _classCallCheck(this, Options);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Options).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"search\", function (value) {\n      _this.state.options.forEach(function (option) {\n        if (!option.children[0].innerText.toLowerCase().includes(value.toLowerCase())) {\n          option.style.display = 'none';\n        } else {\n          option.style.display = 'flex';\n        }\n      });\n    });\n\n    _this.state = {\n      options: [],\n      searchValue: \"\"\n    };\n    _this.optionsRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(Options, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.search) {\n        var options = Array.from(this.optionsRef.current.children).filter(function (child) {\n          return child.tagName === 'LI';\n        });\n        this.setState({\n          options: options\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          children = _this$props.children,\n          search = _this$props.search,\n          searchLabel = _this$props.searchLabel,\n          searchId = _this$props.searchId,\n          attributes = _objectWithoutProperties(_this$props, [\"className\", \"children\", \"search\", \"searchLabel\", \"searchId\"]);\n\n      var classes = classNames('dropdown-content', 'select-dropdown', 'fadeElement', className);\n      return React.createElement(\"ul\", _extends({}, attributes, {\n        className: classes,\n        ref: this.optionsRef\n      }), search && React.createElement(\"div\", {\n        className: \"mx-2\"\n      }, React.createElement(Input, {\n        label: searchLabel,\n        id: searchId,\n        getValue: this.search,\n        \"data-search\": \"true\"\n      })), children);\n    }\n  }]);\n\n  return Options;\n}(React.Component);\n\nOptions.propTypes = {\n  children: propTypes.node,\n  className: propTypes.string,\n  search: propTypes.bool,\n  searchLabel: propTypes.string,\n  searchId: propTypes.string\n};\nOptions.defaultProps = {\n  className: '',\n  search: false,\n  searchLabel: 'Search',\n  searchId: 'selectSearchInput'\n};\n\nvar Option =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Option, _React$Component);\n\n  function Option(props) {\n    var _this;\n\n    _classCallCheck(this, Option);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Option).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"selectOption\", function () {\n      if (!_this.props.disabled) {\n        var selectedOption = _this.optionRef.current;\n        var value = [];\n        var text;\n        var options = selectedOption.parentNode.children;\n\n        if (_this.state.multiple) {\n          text = [];\n\n          if (selectedOption.classList.contains(\"active\")) {\n            selectedOption.classList.remove(\"active\");\n\n            _this.setState({\n              checked: false\n            });\n          } else {\n            selectedOption.classList.add(\"active\");\n\n            _this.setState({\n              checked: true\n            });\n          } // iterate throught child nodes options and add checked to arr\n\n\n          Array.from(options).forEach(function (option) {\n            if (option.classList.contains(\"active\")) {\n              text.push(option.textContent);\n              option.getElementsByTagName(\"input\")[0].value ? value.push(option.getElementsByTagName(\"input\")[0].value) : value.push(option.textContent);\n            }\n          });\n        } else {\n          Array.from(selectedOption.children).forEach(function (child) {\n            if (child.nodeName === \"SPAN\") {\n              text = child.textContent;\n              _this.props.value ? value.push(_this.props.value) : value.push(text);\n            }\n          });\n          Array.from(options).forEach(function (option) {\n            return option.classList.remove(\"active\");\n          });\n          selectedOption.classList.add(\"active\");\n        }\n\n        value.length ? _this.props.context.triggerOptionChange(value, text) : _this.props.context.triggerOptionChange();\n      }\n    });\n\n    _this.state = {\n      multiple: _this.props.context.multiple || false,\n      checked: _this.props.checked || _this.props.selected || false\n    };\n    _this.optionRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(Option, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (!this.state.multiple) {\n        this.state.checked && this.optionRef.current.click();\n      } else {\n        if (!this.props.disabled) {\n          !this.state.checked && this.optionRef.current.classList.add(\"active\");\n          this.selectOption();\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          children = _this$props.children,\n          disabled = _this$props.disabled,\n          separator = _this$props.separator,\n          icon = _this$props.icon,\n          triggerOptionClick = _this$props.triggerOptionClick,\n          value = _this$props.value,\n          attributes = _objectWithoutProperties(_this$props, [\"className\", \"children\", \"disabled\", \"separator\", \"icon\", \"triggerOptionClick\", \"value\"]);\n\n      var classes = classNames(disabled || separator ? \"disabled\" : \"\", separator ? \"optgroup\" : \"\", className, \"justify-content-between align-items-center\");\n      var input = null;\n      var label = null;\n\n      if (this.state.multiple) {\n        if (!disabled) {\n          input = React.createElement(\"input\", {\n            type: \"checkbox\",\n            value: value,\n            onChange: function onChange() {\n              return false;\n            },\n            className: \"form-check-input\",\n            checked: this.state.checked\n          });\n          label = React.createElement(\"label\", {\n            style: {\n              height: \"10px\"\n            },\n            \"data-multiple\": this.state.multiple\n          });\n        } else {\n          input = React.createElement(\"input\", {\n            type: \"checkbox\",\n            className: \"form-check-input\",\n            disabled: true\n          });\n          label = React.createElement(\"label\", {\n            style: {\n              height: \"10px\"\n            },\n            \"data-multiple\": this.state.multiple\n          });\n        }\n      }\n\n      return React.createElement(\"li\", _extends({\n        ref: this.optionRef\n      }, attributes, {\n        \"data-multiple\": this.state.multiple,\n        className: classes,\n        onClick: this.selectOption,\n        style: {\n          display: \"flex\"\n        }\n      }), React.createElement(\"span\", {\n        \"data-multiple\": this.state.multiple,\n        className: \"filtrable\",\n        style: {\n          flex: \"1\"\n        }\n      }, !separator ? input : null, label, children), icon && React.createElement(\"img\", {\n        src: this.props.icon,\n        alt: \"icon\",\n        className: \"rounded-circle\"\n      }));\n    }\n  }]);\n\n  return Option;\n}(React.Component);\n\nOption.propTypes = {\n  children: propTypes.node,\n  checked: propTypes.bool,\n  className: propTypes.string,\n  disabled: propTypes.bool,\n  icon: propTypes.string,\n  triggerOptionClick: propTypes.func,\n  value: propTypes.any,\n  separator: propTypes.bool\n};\nOption.defaultProps = {\n  children: \"span\",\n  checked: false,\n  className: \"\",\n  disabled: false,\n  separator: false,\n  icon: \"\",\n  triggerOptionClick: function triggerOptionClick() {},\n  value: \"\"\n};\nvar SelectOption = Option = selectContextHOC(Option);\n\nvar DataTableSelect = function DataTableSelect(_ref) {\n  var value = _ref.value,\n      onChange = _ref.onChange,\n      entries = _ref.entries,\n      label = _ref.label,\n      barReverse = _ref.barReverse;\n  return React.createElement(\"div\", {\n    className: classNames(\"dataTables_length\", \"d-flex\", \"flex-row\", barReverse && \"justify-content-end\")\n  }, React.createElement(\"label\", {\n    className: \"mt-4\"\n  }, label), React.createElement(Select, {\n    getValue: onChange,\n    className: \"my-0\"\n  }, React.createElement(SelectInput$1, {\n    selected: value\n  }), React.createElement(Options, null, entries.map(function (entry, index) {\n    return React.createElement(SelectOption, {\n      checked: index === 0,\n      key: entry,\n      value: entry\n    }, entry);\n  }))));\n};\n\nDataTableSelect.propTypes = {\n  barReverse: propTypes.bool,\n  entries: propTypes.arrayOf(propTypes.number).isRequired,\n  label: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.object]).isRequired,\n  onChange: propTypes.func.isRequired,\n  value: propTypes.number.isRequired\n}; // FREE START\n// import DataTableSelect from '../DataTableSelect';\n// FREE-END\n\nvar DataTableEntries = function DataTableEntries(props) {\n  var handleEntriesChange = props.handleEntriesChange,\n      displayEntries = props.displayEntries,\n      entries = props.entries,\n      entriesArr = props.entriesArr,\n      paging = props.paging,\n      label = props.label,\n      barReverse = props.barReverse;\n  return React.createElement(\"div\", {\n    className: \"col-sm-12 col-md-6\"\n  }, paging && displayEntries && React.createElement(DataTableSelect, {\n    value: entries,\n    onChange: handleEntriesChange,\n    entries: entriesArr,\n    label: label,\n    barReverse: barReverse\n  }));\n};\n\nDataTableEntries.propTypes = {\n  barReverse: propTypes.bool,\n  handleEntriesChange: propTypes.func.isRequired,\n  displayEntries: propTypes.bool.isRequired,\n  entries: propTypes.number.isRequired,\n  entriesArr: propTypes.arrayOf(propTypes.number).isRequired,\n  paging: propTypes.bool.isRequired,\n  label: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.object]).isRequired\n};\n\nvar DataTableInput = function DataTableInput(_ref) {\n  var value = _ref.value,\n      onChange = _ref.onChange,\n      label = _ref.label,\n      barReverse = _ref.barReverse;\n  return React.createElement(\"div\", {\n    className: classNames(\"dataTables_filter\", \"md-form\", \"flex-row\", barReverse && \"text-left\")\n  }, React.createElement(\"input\", {\n    value: value,\n    onChange: onChange,\n    type: \"search\",\n    className: \"form-control form-control-sm\",\n    placeholder: label || \"Search\"\n  }));\n};\n\nDataTableInput.propTypes = {\n  barReverse: propTypes.bool,\n  label: propTypes.string,\n  onChange: propTypes.func,\n  value: propTypes.string\n}; // FREE START\n// import DataTableInput from '../DataTableInput';\n// FREE END\n\nvar DataTableSearch = function DataTableSearch(props) {\n  var handleSearchChange = props.handleSearchChange,\n      search = props.search,\n      searching = props.searching,\n      label = props.label,\n      barReverse = props.barReverse;\n  return React.createElement(\"div\", {\n    className: \"col-sm-12 col-md-6\"\n  }, searching && React.createElement(DataTableInput, {\n    value: search,\n    onChange: handleSearchChange,\n    label: label,\n    barReverse: barReverse\n  }));\n};\n\nDataTableSearch.propTypes = {\n  barReverse: propTypes.bool,\n  handleSearchChange: propTypes.func.isRequired,\n  search: propTypes.string.isRequired,\n  searching: propTypes.bool.isRequired,\n  label: propTypes.string\n};\n\nvar DataTableInfo = function DataTableInfo(props) {\n  var activePage = props.activePage,\n      entries = props.entries,\n      filteredRows = props.filteredRows,\n      info = props.info,\n      pages = props.pages,\n      label = props.label;\n  return React.createElement(\"div\", {\n    className: \"col-sm-12 col-md-5\"\n  }, info && React.createElement(\"div\", {\n    className: \"dataTables_info\",\n    role: \"status\",\n    \"aria-live\": \"polite\"\n  }, label[0], \" \", activePage > 0 ? activePage * entries + 1 : activePage + 1, \" \", label[1], \" \", pages.length - 1 > activePage ? pages[activePage].length * (activePage + 1) : filteredRows.length, \" \", label[2], \" \", filteredRows.length, \" \", label[3]));\n};\n\nDataTableInfo.propTypes = {\n  activePage: propTypes.number.isRequired,\n  entries: propTypes.number.isRequired,\n  filteredRows: propTypes.array.isRequired,\n  info: propTypes.bool.isRequired,\n  pages: propTypes.array.isRequired,\n  label: propTypes.arrayOf(propTypes.string)\n};\nDataTableInfo.defaultProps = {\n  label: [\"Showing\", \"to\", \"of\", \"entries\"]\n};\n\nvar Pagination = function Pagination(props) {\n  var _classNames;\n\n  var children = props.children,\n      circle = props.circle,\n      className = props.className,\n      color = props.color,\n      Tag = props.tag,\n      size = props.size,\n      attributes = _objectWithoutProperties(props, [\"children\", \"circle\", \"className\", \"color\", \"tag\", \"size\"]);\n\n  var classes = classNames((_classNames = {\n    'pagination-circle': circle\n  }, _defineProperty(_classNames, \"pg-\".concat(color), color), _defineProperty(_classNames, \"pagination-\".concat(size), size), _classNames), 'pagination', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"pagination\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nPagination.propTypes = {\n  children: propTypes.node,\n  circle: propTypes.bool,\n  className: propTypes.string,\n  color: propTypes.string,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  size: propTypes.oneOf(['lg', 'sm'])\n};\nPagination.defaultProps = {\n  circle: false,\n  className: '',\n  color: '',\n  tag: 'ul'\n};\n\nvar PageItem = function PageItem(props) {\n  var active = props.active,\n      className = props.className,\n      children = props.children,\n      disabled = props.disabled,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"active\", \"className\", \"children\", \"disabled\", \"tag\"]);\n\n  var classes = classNames({\n    'disabled': disabled,\n    'active': active\n  }, 'page-item', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"page-item\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nPageItem.propTypes = {\n  active: propTypes.bool,\n  className: propTypes.string,\n  children: propTypes.node,\n  disabled: propTypes.bool,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string])\n};\nPageItem.defaultProps = {\n  active: false,\n  className: '',\n  disabled: false,\n  tag: 'li'\n};\n\nvar PageLink = function PageLink(props) {\n  var children = props.children,\n      className = props.className,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"children\", \"className\", \"tag\"]);\n\n  var classes = classNames('page-link', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"page-link\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nPageLink.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  children: propTypes.node\n};\nPageLink.defaultProps = {\n  tag: 'a'\n};\n\nvar DataTablePagination =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DataTablePagination, _Component);\n\n  function DataTablePagination(props) {\n    var _this;\n\n    _classCallCheck(this, DataTablePagination);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DataTablePagination).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidUpdate\", function (prevProps) {\n      if (prevProps.pages !== _this.props.pages) {\n        _this.setState({\n          pages: _this.props.pages\n        }, function () {\n          return _this.groupPages();\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"pagesIndexify\", function () {\n      var mutablePages = _toConsumableArray(_this.state.pages);\n\n      mutablePages.forEach(function (page, index) {\n        return page.index = index;\n      });\n      return mutablePages;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"groupPages\", function () {\n      var pGroups = [];\n\n      var pages = _this.pagesIndexify();\n\n      while (pages.length > 0) {\n        pGroups.push(pages.splice(0, _this.props.pagesAmount));\n      }\n\n      _this.setState({\n        pGroups: pGroups\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"choosePagesGroup\", function () {\n      var pGroupNumber = Math.floor(_this.props.activePage / _this.props.pagesAmount);\n      return _this.state.pGroups.length ? _this.state.pGroups[pGroupNumber] : [];\n    });\n\n    _this.state = {\n      pages: props.pages,\n      pGroups: []\n    };\n    return _this;\n  }\n\n  _createClass(DataTablePagination, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.groupPages();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          activePage = _this$props.activePage,\n          changeActivePage = _this$props.changeActivePage,\n          pages = _this$props.pages,\n          label = _this$props.label;\n      return React.createElement(\"div\", {\n        className: \"col-sm-12 col-md-7\"\n      }, React.createElement(\"div\", {\n        className: \"dataTables_paginate\"\n      }, React.createElement(Pagination, null, React.createElement(PageItem, {\n        disabled: activePage <= 0\n      }, React.createElement(PageLink, {\n        className: \"page-link\",\n        \"aria-label\": label[0],\n        onClick: function onClick() {\n          return changeActivePage(activePage - 1);\n        }\n      }, React.createElement(\"span\", null, label[0]))), this.choosePagesGroup().map(function (page) {\n        return React.createElement(PageItem, {\n          key: Object.keys(page[0])[0] + page.index,\n          active: page.index === activePage\n        }, React.createElement(PageLink, {\n          className: \"page-link\",\n          onClick: function onClick() {\n            return changeActivePage(page.index);\n          }\n        }, page.index + 1, page.index === activePage && React.createElement(\"span\", {\n          className: \"sr-only\"\n        }, \"(current)\")));\n      }), React.createElement(PageItem, {\n        disabled: !pages.length || activePage === pages.length - 1\n      }, React.createElement(PageLink, {\n        className: \"page-link\",\n        \"aria-label\": label[1],\n        onClick: function onClick() {\n          return changeActivePage(activePage + 1);\n        }\n      }, React.createElement(\"span\", null, label[1]))))));\n    }\n  }]);\n\n  return DataTablePagination;\n}(Component);\n\nDataTablePagination.propTypes = {\n  activePage: propTypes.number.isRequired,\n  changeActivePage: propTypes.func.isRequired,\n  pages: propTypes.array.isRequired,\n  pagesAmount: propTypes.number.isRequired,\n  label: propTypes.arrayOf(propTypes.string).isRequired\n};\n\nvar ExportToCSV =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ExportToCSV, _Component);\n\n  function ExportToCSV(props) {\n    var _this;\n\n    _classCallCheck(this, ExportToCSV);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ExportToCSV).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"computeDataToLink\", function () {\n      _this.setState(function (prevState) {\n        return {\n          href: encodeURI(\"data:text/csv;charset=utf-8,\" + [prevState.columns.map(function (col) {\n            return col.field;\n          }).join(\",\"), [].concat.apply([], prevState.data).map(function (row) {\n            return Object.values(row).join(\",\");\n          }).join(\"\\n\")].join(\"\\n\"))\n        };\n      });\n    });\n\n    _this.state = {\n      columns: _this.props.columns,\n      data: _this.props.data,\n      href: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(ExportToCSV, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.computeDataToLink();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevState.data !== this.props.data || prevState.columns !== this.props.columns) {\n        this.setState({\n          columns: this.props.columns,\n          data: this.props.data\n        }, this.computeDataToLink());\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          active = _this$props.active,\n          block = _this$props.block,\n          circle = _this$props.circle,\n          className = _this$props.className,\n          color = _this$props.color,\n          children = _this$props.children,\n          outline = _this$props.outline,\n          size = _this$props.size,\n          rounded = _this$props.rounded,\n          gradient = _this$props.gradient,\n          floating = _this$props.floating,\n          flat = _this$props.flat,\n          attributes = _objectWithoutProperties(_this$props, [\"active\", \"block\", \"circle\", \"className\", \"color\", \"children\", \"outline\", \"size\", \"rounded\", \"gradient\", \"floating\", \"flat\"]);\n\n      return React.createElement(Button, _extends({\n        active: active,\n        block: block,\n        circle: circle,\n        className: className,\n        color: color,\n        outline: outline,\n        size: size,\n        rounded: rounded,\n        gradient: gradient,\n        floating: floating,\n        flat: flat,\n        role: \"button\",\n        type: \"link\"\n      }, attributes, {\n        href: this.state.href,\n        download: \"export.csv\"\n      }), children);\n    }\n  }]);\n\n  return ExportToCSV;\n}(Component);\n\nExportToCSV.propTypes = {\n  columns: propTypes.arrayOf(propTypes.object).isRequired,\n  data: propTypes.array.isRequired,\n  active: propTypes.bool,\n  block: propTypes.bool,\n  color: propTypes.string,\n  gradient: propTypes.string,\n  disabled: propTypes.bool,\n  outline: propTypes.bool,\n  rounded: propTypes.bool,\n  circle: propTypes.bool,\n  floating: propTypes.bool,\n  flat: propTypes.bool,\n  size: propTypes.string,\n  children: propTypes.node,\n  className: propTypes.string\n};\n\nvar DataTable =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DataTable, _Component);\n\n  function DataTable(props) {\n    var _this;\n\n    _classCallCheck(this, DataTable);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DataTable).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"setUnsearchable\", function (columns) {\n      var unsearchable = [];\n      columns.forEach(function (column) {\n        if (column.searchable !== undefined && column.searchable === false) {\n          unsearchable.push(column.field);\n        }\n      });\n\n      _this.setState({\n        unsearchable: unsearchable\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"fetchData\", function (link) {\n      fetch(link).then(function (res) {\n        return res.json();\n      }).then(function (json) {\n        _this.setState({\n          columns: json.columns,\n          filteredRows: json.rows,\n          rows: json.rows\n        });\n      })[\"catch\"](function (err) {\n        return console.log(err);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"paginateRowsInitialy\", function () {\n      // findout how many pages there are need to be, then slice rows into pages\n      var pagesAmount = Math.ceil(_this.state.rows.length / _this.state.entries);\n\n      for (var i = 1; i <= pagesAmount; i++) {\n        var pageEndIndex = i * _this.state.entries;\n\n        _this.state.pages.push(_this.state.rows.slice(pageEndIndex - _this.state.entries, pageEndIndex));\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEntriesChange\", function (value) {\n      _this.setState({\n        entries: Array.isArray(value) ? value[0] : value\n      }, function () {\n        return _this.paginateRows();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSearchChange\", function (e) {\n      _this.setState({\n        search: e.target.value\n      }, function () {\n        return _this.filterRows();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"checkFieldValue\", function (array, field) {\n      return array[field] && typeof array[field] !== \"string\" ? array[field].props.searchValue : array[field];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"checkField\", function (field, a, b) {\n      var direction = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"desc\";\n      var _ref = [_this.checkFieldValue(a, field), _this.checkFieldValue(b, field)],\n          aField = _ref[0],\n          bField = _ref[1];\n      return direction === \"desc\" ? aField < bField : aField > bField;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSort\", function (field, sort) {\n      if (sort !== \"disabled\") {\n        _this.setState(function (prevState) {\n          // asc by default\n          switch (sort) {\n            case \"desc\":\n              prevState.rows.sort(function (a, b) {\n                if (_this.props.sortRows && _this.props.sortRows.includes(field)) {\n                  return _this.checkField(field, a, b);\n                }\n\n                return a[field] > b[field] ? -1 : 1;\n              });\n              break;\n\n            default:\n              prevState.rows.sort(function (a, b) {\n                if (_this.props.sortRows && _this.props.sortRows.includes(field)) {\n                  return _this.checkField(field, a, b, \"asc\");\n                }\n\n                return a[field] < b[field] ? -1 : 1;\n              });\n          }\n\n          prevState.columns.forEach(function (col) {\n            if (col.sort === \"disabled\") return;\n            col.sort = col.field === field ? col.sort === \"desc\" ? \"asc\" : \"desc\" : \"\";\n          });\n          return {\n            rows: prevState.rows,\n            columns: prevState.columns,\n            sorted: true\n          };\n        }, function () {\n          return _this.filterRows();\n        });\n      } else return;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"filterRows\", function () {\n      _this.setState(function (prevState) {\n        var filteredRows = prevState.rows.filter(function (row) {\n          for (var key in row) {\n            if (Object.prototype.hasOwnProperty.call(row, key)) {\n              if ((!_this.state.unsearchable.length || !_this.state.unsearchable.includes(key)) && typeof row[key] !== \"function\") {\n                var stringValue = \"\";\n\n                if (_this.props.sortRows && typeof row[key] !== \"string\") {\n                  stringValue = row[key].props.searchValue;\n                } else {\n                  if (row[key]) {\n                    stringValue = row[key].toString();\n                  }\n                }\n\n                if (stringValue.toLowerCase().match(_this.state.search.toLowerCase())) return true;\n              }\n            }\n          }\n\n          return false;\n        });\n        if (filteredRows.length === 0) filteredRows.push({\n          message: \"No matching records found\",\n          colspan: prevState.columns.length\n        });\n        return {\n          filteredRows: filteredRows,\n          activePage: 0\n        };\n      }, function () {\n        return _this.paginateRows();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"paginateRows\", function () {\n      // findout how many pages there are need to be, then slice rows into pages\n      var pagesAmount = Math.ceil(_this.state.filteredRows.length / _this.state.entries);\n\n      _this.setState(function (prevState) {\n        prevState.pages = [];\n\n        if (_this.props.paging) {\n          for (var i = 1; i <= pagesAmount; i++) {\n            var pageEndIndex = i * prevState.entries;\n            prevState.pages.push(prevState.filteredRows.slice(pageEndIndex - prevState.entries, pageEndIndex));\n          }\n\n          prevState.activePage = prevState.activePage < prevState.pages.length || prevState.activePage === 0 ? prevState.activePage : prevState.pages.length - 1;\n        } else {\n          prevState.pages.push(prevState.filteredRows);\n          prevState.activePage = 0;\n        }\n\n        return _objectSpread({}, prevState);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"changeActivePage\", function (page) {\n      _this.setState({\n        activePage: page\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTableBodyScroll\", function (e) {\n      _this.setState({\n        translateScrollHead: e.target.scrollLeft\n      });\n    });\n\n    _this.state = {\n      activePage: 0,\n      columns: props.data.columns || [],\n      entries: props.entries,\n      filteredRows: props.data.rows || [],\n      pages: [],\n      rows: props.data.rows || [],\n      search: \"\",\n      unsearchable: [],\n      translateScrollHead: 0,\n      order: props.order || [],\n      sorted: false\n    };\n\n    if (_this.props.paging) {\n      _this.paginateRowsInitialy();\n    } else {\n      _this.state.pages.push(_this.state.rows);\n    }\n\n    return _this;\n  }\n\n  _createClass(DataTable, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (typeof this.props.data === \"string\") {\n        this.fetchData(this.props.data);\n      }\n\n      this.state.order.length && this.handleSort(this.state.order[0], this.state.order[1]);\n      this.setUnsearchable(this.state.columns);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this;\n\n      if (prevProps.data !== this.props.data) {\n        if (typeof this.props.data === \"string\") {\n          this.fetchData(this.props.data);\n        } else {\n          this.setState({\n            columns: this.props.data.columns || [],\n            filteredRows: this.props.data.rows || [],\n            rows: this.props.data.rows || []\n          }, function () {\n            return _this2.paginateRows();\n          });\n        }\n\n        this.setUnsearchable(this.state.columns);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          autoWidth = _this$props.autoWidth,\n          bordered = _this$props.bordered,\n          borderless = _this$props.borderless,\n          barReverse = _this$props.barReverse,\n          btn = _this$props.btn,\n          className = _this$props.className,\n          children = _this$props.children,\n          dark = _this$props.dark,\n          data = _this$props.data,\n          displayEntries = _this$props.displayEntries,\n          entriesOptions = _this$props.entriesOptions,\n          entriesLabel = _this$props.entriesLabel,\n          exportToCSV = _this$props.exportToCSV,\n          fixed = _this$props.fixed,\n          hover = _this$props.hover,\n          info = _this$props.info,\n          infoLabel = _this$props.infoLabel,\n          maxHeight = _this$props.maxHeight,\n          order = _this$props.order,\n          pagesAmount = _this$props.pagesAmount,\n          paging = _this$props.paging,\n          paginationLabel = _this$props.paginationLabel,\n          responsive = _this$props.responsive,\n          responsiveSm = _this$props.responsiveSm,\n          responsiveMd = _this$props.responsiveMd,\n          responsiveLg = _this$props.responsiveLg,\n          responsiveXl = _this$props.responsiveXl,\n          searching = _this$props.searching,\n          searchLabel = _this$props.searchLabel,\n          scrollX = _this$props.scrollX,\n          scrollY = _this$props.scrollY,\n          small = _this$props.small,\n          sortable = _this$props.sortable,\n          striped = _this$props.striped,\n          tbodyColor = _this$props.tbodyColor,\n          tbodyTextWhite = _this$props.tbodyTextWhite,\n          theadColor = _this$props.theadColor,\n          theadTextWhite = _this$props.theadTextWhite,\n          sortRows = _this$props.sortRows,\n          attributes = _objectWithoutProperties(_this$props, [\"autoWidth\", \"bordered\", \"borderless\", \"barReverse\", \"btn\", \"className\", \"children\", \"dark\", \"data\", \"displayEntries\", \"entriesOptions\", \"entriesLabel\", \"exportToCSV\", \"fixed\", \"hover\", \"info\", \"infoLabel\", \"maxHeight\", \"order\", \"pagesAmount\", \"paging\", \"paginationLabel\", \"responsive\", \"responsiveSm\", \"responsiveMd\", \"responsiveLg\", \"responsiveXl\", \"searching\", \"searchLabel\", \"scrollX\", \"scrollY\", \"small\", \"sortable\", \"striped\", \"tbodyColor\", \"tbodyTextWhite\", \"theadColor\", \"theadTextWhite\", \"sortRows\"]);\n\n      var _this$state = this.state,\n          columns = _this$state.columns,\n          entries = _this$state.entries,\n          filteredRows = _this$state.filteredRows,\n          pages = _this$state.pages,\n          activePage = _this$state.activePage,\n          search = _this$state.search,\n          translateScrollHead = _this$state.translateScrollHead;\n      var tableClasses = classNames(className && \"\".concat(className), \"dataTables_wrapper dt-bootstrap4\");\n      return React.createElement(\"div\", {\n        className: tableClasses\n      }, React.createElement(\"div\", {\n        className: \"row\".concat(barReverse ? ' flex-row-reverse' : '')\n      }, React.createElement(DataTableEntries, {\n        paging: paging,\n        displayEntries: displayEntries,\n        entries: entries,\n        handleEntriesChange: this.handleEntriesChange,\n        entriesArr: entriesOptions,\n        label: entriesLabel,\n        barReverse: barReverse\n      }), React.createElement(DataTableSearch, {\n        handleSearchChange: this.handleSearchChange,\n        search: search,\n        searching: searching,\n        label: searchLabel,\n        barReverse: barReverse\n      })), !scrollY && !scrollX && React.createElement(\"div\", {\n        className: \"row\"\n      }, React.createElement(DataTableTable, _extends({\n        autoWidth: autoWidth,\n        bordered: bordered,\n        borderless: borderless,\n        btn: btn,\n        dark: dark,\n        fixed: fixed,\n        hover: hover,\n        responsive: responsive,\n        responsiveSm: responsiveSm,\n        responsiveMd: responsiveMd,\n        responsiveLg: responsiveLg,\n        responsiveXl: responsiveXl,\n        small: small,\n        striped: striped,\n        theadColor: theadColor,\n        theadTextWhite: theadTextWhite,\n        columns: columns,\n        handleSort: this.handleSort,\n        sortable: sortable,\n        tbodyColor: tbodyColor,\n        tbodyTextWhite: tbodyTextWhite,\n        rows: pages[activePage],\n        sorted: this.state.sorted\n      }, attributes))), (scrollY || scrollX) && React.createElement(\"div\", {\n        className: \"row\"\n      }, React.createElement(DataTableTableScroll, _extends({\n        autoWidth: autoWidth,\n        bordered: bordered,\n        borderless: borderless,\n        btn: btn,\n        dark: dark,\n        fixed: fixed,\n        handleTableBodyScroll: this.handleTableBodyScroll,\n        hover: hover,\n        maxHeight: maxHeight,\n        responsive: responsive,\n        responsiveSm: responsiveSm,\n        responsiveMd: responsiveMd,\n        responsiveLg: responsiveLg,\n        responsiveXl: responsiveXl,\n        scrollX: scrollX,\n        scrollY: scrollY,\n        small: small,\n        striped: striped,\n        theadColor: theadColor,\n        theadTextWhite: theadTextWhite,\n        columns: columns,\n        handleSort: this.handleSort,\n        sortable: sortable,\n        sorted: this.state.sorted,\n        tbodyColor: tbodyColor,\n        tbodyTextWhite: tbodyTextWhite,\n        rows: pages[activePage],\n        translateScrollHead: translateScrollHead\n      }, attributes))), paging && React.createElement(\"div\", {\n        className: \"row\"\n      }, React.createElement(DataTableInfo, {\n        activePage: activePage,\n        entries: entries,\n        filteredRows: filteredRows,\n        info: info,\n        pages: pages,\n        label: infoLabel\n      }), React.createElement(DataTablePagination, {\n        activePage: activePage,\n        changeActivePage: this.changeActivePage,\n        pages: pages,\n        pagesAmount: pagesAmount,\n        label: paginationLabel\n      })), exportToCSV && React.createElement(\"div\", {\n        className: \"row justify-content-end\"\n      }, React.createElement(ExportToCSV, {\n        columns: columns,\n        data: pages,\n        color: \"primary\"\n      }, \"Download CSV\")));\n    }\n  }]);\n\n  return DataTable;\n}(Component);\n\nDataTable.propTypes = {\n  autoWidth: propTypes.bool,\n  barReverse: propTypes.bool,\n  bordered: propTypes.bool,\n  borderless: propTypes.bool,\n  btn: propTypes.bool,\n  className: propTypes.string,\n  children: propTypes.node,\n  dark: propTypes.bool,\n  data: propTypes.oneOfType([propTypes.object, propTypes.string]),\n  displayEntries: propTypes.bool,\n  entries: propTypes.number,\n  entriesLabel: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.object]),\n  entriesOptions: propTypes.arrayOf(propTypes.number),\n  exportToCSV: propTypes.bool,\n  fixed: propTypes.bool,\n  hover: propTypes.bool,\n  info: propTypes.bool,\n  infoLabel: propTypes.arrayOf(propTypes.string),\n  maxHeight: propTypes.string,\n  order: propTypes.arrayOf(propTypes.string),\n  pagesAmount: propTypes.number,\n  paging: propTypes.bool,\n  paginationLabel: propTypes.arrayOf(propTypes.string),\n  responsive: propTypes.bool,\n  responsiveSm: propTypes.bool,\n  responsiveMd: propTypes.bool,\n  responsiveLg: propTypes.bool,\n  responsiveXl: propTypes.bool,\n  searching: propTypes.bool,\n  searchLabel: propTypes.string,\n  scrollX: propTypes.bool,\n  scrollY: propTypes.bool,\n  sortable: propTypes.bool,\n  sortRows: propTypes.arrayOf(propTypes.string),\n  small: propTypes.bool,\n  striped: propTypes.bool,\n  theadColor: propTypes.string,\n  theadTextWhite: propTypes.bool,\n  tbodyColor: propTypes.string,\n  tbodyTextWhite: propTypes.bool\n};\nDataTable.defaultProps = {\n  autoWidth: false,\n  barReverse: false,\n  bordered: false,\n  borderless: false,\n  btn: false,\n  dark: false,\n  data: {},\n  displayEntries: true,\n  entries: 10,\n  entriesLabel: \"Show entries\",\n  entriesOptions: [10, 20, 50, 100],\n  exportToCSV: false,\n  fixed: false,\n  hover: false,\n  info: true,\n  infoLabel: [\"Showing\", \"to\", \"of\", \"entries\"],\n  order: [],\n  pagesAmount: 8,\n  paging: true,\n  paginationLabel: [\"Previous\", \"Next\"],\n  responsive: false,\n  responsiveSm: false,\n  responsiveMd: false,\n  responsiveLg: false,\n  responsiveXl: false,\n  searching: true,\n  searchLabel: \"Search\",\n  scrollX: false,\n  scrollY: false,\n  sortable: true,\n  small: false,\n  striped: false,\n  theadColor: \"\",\n  theadTextWhite: false,\n  tbodyColor: \"\",\n  tbodyTextWhite: false\n};\n\nvar Dropdown =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Dropdown, _React$Component);\n\n  function Dropdown(props) {\n    var _this;\n\n    _classCallCheck(this, Dropdown);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Dropdown).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"toggle\", function () {\n      _this.setState({\n        isOpen: !_this.state.isOpen\n      });\n    });\n\n    _this.state = {\n      isOpen: false\n    };\n    _this.addEvents = _this.addEvents.bind(_assertThisInitialized(_this));\n    _this.handleDocumentClick = _this.handleDocumentClick.bind(_assertThisInitialized(_this));\n    _this.handleKeyDown = _this.handleKeyDown.bind(_assertThisInitialized(_this));\n    _this.removeEvents = _this.removeEvents.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Dropdown, [{\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      return {\n        isOpen: this.state.isOpen,\n        dropup: this.props.dropup,\n        dropright: this.props.dropright,\n        dropleft: this.props.dropleft,\n        toggle: this.toggle\n      };\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.handleEventsBinding();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.removeEvents();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.handleEventsBinding();\n    }\n  }, {\n    key: \"handleEventsBinding\",\n    value: function handleEventsBinding() {\n      if (this.state.isOpen) {\n        this.addEvents();\n      } else {\n        this.removeEvents();\n      }\n    }\n  }, {\n    key: \"getContainer\",\n    value: function getContainer() {\n      return ReactDOM.findDOMNode(this);\n    }\n  }, {\n    key: \"addEvents\",\n    value: function addEvents() {\n      var _this2 = this;\n\n      [\"click\", \"touchstart\", \"keyup\"].forEach(function (event) {\n        return document.addEventListener(event, _this2.handleDocumentClick, true);\n      });\n    }\n  }, {\n    key: \"removeEvents\",\n    value: function removeEvents() {\n      var _this3 = this;\n\n      [\"click\", \"touchstart\", \"keyup\"].forEach(function (event) {\n        return document.removeEventListener(event, _this3.handleDocumentClick, true);\n      });\n    }\n  }, {\n    key: \"handleDocumentClick\",\n    value: function handleDocumentClick(e) {\n      if (e && (e.which === 3 || e.type === \"keyup\" && e.which !== keyCodes.tab)) return;\n      var container = this.getContainer();\n\n      if (container.contains(e.target) && container !== e.target && (e.type !== \"keyup\" || e.which === keyCodes.tab)) {\n        return;\n      }\n\n      this.toggle(e);\n    }\n  }, {\n    key: \"handleKeyDown\",\n    value: function handleKeyDown(e) {\n      if ([keyCodes.esc, keyCodes.up, keyCodes.down, keyCodes.space].indexOf(e.which) === -1 || /button/i.test(e.target.tagName) && e.which === keyCodes.space || /input|textarea/i.test(e.target.tagName)) {\n        return;\n      }\n\n      e.preventDefault();\n      if (this.props.disabled) return;\n      var container = this.getContainer();\n\n      if (e.which === keyCodes.space && this.state.isOpen && container !== e.target) {\n        e.target.click();\n      }\n\n      if (e.which === keyCodes.esc || !this.state.isOpen) {\n        this.toggle(e);\n        container.querySelector(\"[aria-expanded]\").focus();\n        return;\n      }\n\n      var menuClass = \"dropdown-menu\";\n      var itemClass = \"dropdown-item\";\n      var disabledClass = \"disabled\";\n      var items = container.querySelectorAll(\".\".concat(menuClass, \" .\").concat(itemClass, \":not(.\").concat(disabledClass, \")\"));\n      if (!items.length) return;\n      var index = -1;\n\n      for (var i = 0; i < items.length; i += 1) {\n        if (items[i] === e.target) {\n          index = i;\n          break;\n        }\n      }\n\n      if (e.which === keyCodes.up && index > 0) {\n        index -= 1;\n      }\n\n      if (e.which === keyCodes.down && index < items.length - 1) {\n        index += 1;\n      }\n\n      if (index < 0) {\n        index = 0;\n      }\n\n      items[index].focus();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _classNames;\n\n      var _omit = omit(this.props, [\"toggle\", \"disabled\"]),\n          className = _omit.className,\n          children = _omit.children,\n          dropup = _omit.dropup,\n          group = _omit.group,\n          size = _omit.size,\n          dropright = _omit.dropright,\n          dropleft = _omit.dropleft;\n\n      var classes = classNames((_classNames = {\n        \"btn-group\": group\n      }, _defineProperty(_classNames, \"btn-group-\".concat(size), !!size), _defineProperty(_classNames, \"dropdown\", !group), _defineProperty(_classNames, \"show\", this.state.isOpen), _defineProperty(_classNames, \"dropup\", dropup), _defineProperty(_classNames, \"dropright\", dropright), _defineProperty(_classNames, \"dropleft\", dropleft), _classNames), className);\n      return React.createElement(Manager, null, React.createElement(\"div\", {\n        className: classes,\n        onKeyDown: this.handleKeyDown\n      }, children));\n    }\n  }]);\n\n  return Dropdown;\n}(React.Component);\n\nDropdown.propTypes = {\n  disabled: propTypes.bool,\n  dropup: propTypes.bool,\n  dropright: propTypes.bool,\n  dropleft: propTypes.bool,\n  group: propTypes.bool,\n  size: propTypes.string,\n  tag: propTypes.string,\n  toggle: propTypes.func,\n  children: propTypes.node,\n  className: propTypes.string\n};\nDropdown.defaultProps = {\n  dropup: false,\n  dropright: false,\n  dropleft: false,\n  tag: \"div\"\n};\nDropdown.childContextTypes = {\n  toggle: propTypes.func.isRequired,\n  isOpen: propTypes.bool.isRequired,\n  dropup: propTypes.bool.isRequired,\n  dropright: propTypes.bool.isRequired,\n  dropleft: propTypes.bool.isRequired\n};\nvar propTypes$1 = {\n  children: propTypes.node,\n  active: propTypes.bool,\n  disabled: propTypes.bool,\n  divider: propTypes.bool,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  header: propTypes.bool,\n  onClick: propTypes.func,\n  className: propTypes.string,\n  toggle: propTypes.bool\n};\nvar contextTypes = {\n  toggle: propTypes.func\n};\nvar defaultProps = {\n  tag: \"button\",\n  toggle: true\n};\n\nvar DropdownItem =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DropdownItem, _React$Component);\n\n  function DropdownItem(props) {\n    var _this;\n\n    _classCallCheck(this, DropdownItem);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DropdownItem).call(this, props));\n    _this.onClick = _this.onClick.bind(_assertThisInitialized(_this));\n    _this.getTabIndex = _this.getTabIndex.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(DropdownItem, [{\n    key: \"onClick\",\n    value: function onClick(e) {\n      if (this.props.disabled || this.props.header || this.props.divider) {\n        e.preventDefault();\n        return;\n      }\n\n      if (this.props.onClick) {\n        this.props.onClick(e);\n      }\n\n      if (this.props.toggle) {\n        this.context.toggle(e);\n      }\n    }\n  }, {\n    key: \"getTabIndex\",\n    value: function getTabIndex() {\n      if (this.props.disabled || this.props.header || this.props.divider) {\n        return \"-1\";\n      }\n\n      return \"0\";\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var tabIndex = this.getTabIndex();\n\n      var _omit = omit(this.props, [\"toggle\"]),\n          className = _omit.className,\n          divider = _omit.divider,\n          Tag = _omit.tag,\n          header = _omit.header,\n          active = _omit.active,\n          props = _objectWithoutProperties(_omit, [\"className\", \"divider\", \"tag\", \"header\", \"active\"]);\n\n      var classes = classNames({\n        disabled: props.disabled,\n        \"dropdown-item\": !divider && !header,\n        active: active,\n        \"dropdown-header\": header,\n        \"dropdown-divider\": divider\n      }, className);\n\n      if (Tag === \"button\") {\n        if (header) {\n          Tag = \"h6\";\n        } else if (divider) {\n          Tag = \"div\";\n        } else if (props.href) {\n          Tag = \"a\";\n        }\n      }\n\n      return React.createElement(Tag, _extends({\n        type: Tag === \"button\" && (props.onClick || this.props.toggle) ? \"button\" : undefined\n      }, props, {\n        tabIndex: tabIndex,\n        className: classes,\n        onClick: this.onClick\n      }));\n    }\n  }]);\n\n  return DropdownItem;\n}(React.Component);\n\nDropdownItem.propTypes = propTypes$1;\nDropdownItem.defaultProps = defaultProps;\nDropdownItem.contextTypes = contextTypes;\nvar css$6 = \".dropup .dropdown-menu {\\n  top: auto !important;\\n  bottom: 100% !important;\\n  transform: translate3d(5px, 5px, 0px) !important;\\n}\\n\\n.dropdown-menu-right {\\n  left: 0 !important;\\n  right: auto !important;\\n}\\n\";\nstyleInject(css$6);\n\nvar DropdownMenuProComponent = function DropdownMenuProComponent(_ref) {\n  var isOpen = _ref.isOpen,\n      Tag = _ref.tag,\n      tabIndex = _ref.tabIndex,\n      role = _ref.role,\n      attributes = _ref.attributes,\n      aria = _ref.aria,\n      d_key = _ref.d_key,\n      children = _ref.children;\n  return React.createElement(CSSTransition, {\n    \"in\": isOpen,\n    appear: isOpen,\n    classNames: \"popover\",\n    unmountOnExit: true,\n    timeout: {\n      enter: 300,\n      exit: 300\n    }\n  }, React.createElement(Tag, _extends({\n    tabIndex: tabIndex,\n    role: role\n  }, attributes, {\n    \"aria-hidden\": aria,\n    key: d_key\n  }), children));\n};\n\nDropdownMenuProComponent.propTypes = {\n  aria: propTypes.bool.isRequired,\n  attributes: propTypes.object.isRequired,\n  d_key: propTypes.string.isRequired,\n  role: propTypes.string.isRequired,\n  tabIndex: propTypes.string.isRequired,\n  tag: propTypes.any.isRequired,\n  isOpen: propTypes.bool.isRequired,\n  children: propTypes.node.isRequired\n};\n/*\n// PRO-END\nimport DropdownMenuComponent from './DropdownMenuComponent';\n// PRO-START\n*/\n// FREE-END\n// PRO-END\n\nvar noFlipModifier = {\n  flip: {\n    enabled: false\n  }\n};\n\nvar DropdownMenu =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DropdownMenu, _Component);\n\n  function DropdownMenu() {\n    _classCallCheck(this, DropdownMenu);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DropdownMenu).apply(this, arguments));\n  }\n\n  _createClass(DropdownMenu, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$props = this.props,\n          basic = _this$props.basic,\n          className = _this$props.className,\n          right = _this$props.right,\n          children = _this$props.children,\n          tag = _this$props.tag,\n          flip = _this$props.flip,\n          color = _this$props.color,\n          attrs = _objectWithoutProperties(_this$props, [\"basic\", \"className\", \"right\", \"children\", \"tag\", \"flip\", \"color\"]);\n\n      var classes = classNames('dropdown-menu', color && \"dropdown-\".concat(color), {\n        'dropdown-menu-right': right,\n        show: this.context.isOpen,\n        basic: basic\n      }, className);\n      var Tag = tag;\n\n      if (this.context.isOpen) {\n        var position1 = this.context.dropup ? 'top' : this.context.dropright ? 'right' : this.context.dropleft ? 'left' : 'bottom';\n        var position2 = right ? 'end' : 'start';\n        attrs.placement = \"\".concat(position1, \"-\").concat(position2);\n        attrs.component = tag;\n        attrs.modifiers = !flip ? noFlipModifier : undefined;\n      }\n\n      return React.createElement(Popper$1, {\n        modifires: attrs.modifiers,\n        eventsEnabled: true,\n        positionFixed: false,\n        placement: attrs.placement\n      }, function (_ref) {\n        var placement = _ref.placement,\n            ref = _ref.ref,\n            style = _ref.style;\n        return React.createElement(Tag, {\n          ref: ref,\n          style: style,\n          \"data-placement\": placement,\n          className: classes\n        }, React.createElement(DropdownMenuProComponent, {\n          isOpen: _this.context.isOpen,\n          tag: Tag,\n          tabIndex: \"-1\",\n          role: \"menu\",\n          attributes: attrs,\n          aria: !_this.context.isOpen,\n          d_key: \"dropDownMenu\",\n          color: color\n        }, children));\n      });\n    }\n  }]);\n\n  return DropdownMenu;\n}(Component);\n\nDropdownMenu.propTypes = {\n  children: propTypes.node.isRequired,\n  basic: propTypes.bool,\n  className: propTypes.string,\n  flip: propTypes.bool,\n  right: propTypes.bool,\n  tag: propTypes.string\n};\nDropdownMenu.defaultProps = {\n  basic: false,\n  className: '',\n  flip: false,\n  right: false,\n  tag: 'div',\n  color: false\n};\nDropdownMenu.contextTypes = {\n  isOpen: propTypes.bool.isRequired,\n  dropup: propTypes.bool.isRequired,\n  dropright: propTypes.bool.isRequired,\n  dropleft: propTypes.bool.isRequired,\n  color: propTypes.oneOfType([propTypes.oneOf(['primary', 'default', 'secondary', 'success', 'dark', 'danger', 'info', 'warning', 'ins']), propTypes.bool])\n};\n\nvar DropdownToggle =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DropdownToggle, _React$Component);\n\n  function DropdownToggle(props) {\n    var _this;\n\n    _classCallCheck(this, DropdownToggle);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DropdownToggle).call(this, props));\n    _this.onClick = _this.onClick.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(DropdownToggle, [{\n    key: \"onClick\",\n    value: function onClick(e) {\n      if (this.props.disabled) {\n        e.preventDefault();\n        return;\n      }\n\n      if (this.props.nav && !this.props.tag) {\n        e.preventDefault();\n      }\n\n      if (this.props.onClick) {\n        this.props.onClick(e);\n      }\n\n      this.context.toggle(e);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          className = _this$props.className,\n          color = _this$props.color,\n          caret = _this$props.caret,\n          nav = _this$props.nav,\n          tag = _this$props.tag,\n          props = _objectWithoutProperties(_this$props, [\"className\", \"color\", \"caret\", \"nav\", \"tag\"]);\n\n      var ariaLabel = props[\"aria-label\"] || \"Toggle Dropdown\";\n      var classes = classNames({\n        \"dropdown-toggle\": caret,\n        \"nav-link\": nav\n      }, className);\n      var children = props.children || React.createElement(\"span\", {\n        className: \"sr-only\"\n      }, ariaLabel);\n      var Tag;\n\n      if (nav && !tag) {\n        Tag = \"a\";\n        props.href = \"#\";\n      } else if (!tag) {\n        Tag = Button;\n        props.color = color;\n      } else {\n        Tag = tag;\n      }\n\n      return React.createElement(Reference, null, function (_ref) {\n        var ref = _ref.ref;\n        return tag || nav ? React.createElement(Tag, _extends({}, props, {\n          className: classes,\n          onClick: _this2.onClick,\n          \"aria-expanded\": _this2.context.isOpen,\n          ref: ref\n        }), children) : React.createElement(Tag, _extends({}, props, {\n          className: classes,\n          onClick: _this2.onClick,\n          \"aria-expanded\": _this2.context.isOpen,\n          innerRef: ref\n        }), children);\n      });\n    }\n  }]);\n\n  return DropdownToggle;\n}(React.Component);\n\nDropdownToggle.propTypes = {\n  caret: propTypes.bool,\n  color: propTypes.string,\n  children: propTypes.node,\n  className: propTypes.string,\n  disabled: propTypes.bool,\n  onClick: propTypes.func,\n  \"aria-haspopup\": propTypes.bool,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  nav: propTypes.bool\n};\nDropdownToggle.defaultProps = {\n  \"aria-haspopup\": true,\n  color: \"secondary\"\n};\nDropdownToggle.contextTypes = {\n  isOpen: propTypes.bool.isRequired,\n  toggle: propTypes.func.isRequired\n};\n\nvar EdgeHeader = function EdgeHeader(props) {\n  var color = props.color,\n      className = props.className,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"color\", \"className\", \"tag\"]);\n\n  var classes = classNames(\"edge-header\", color, className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"edgeHeader\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nEdgeHeader.propTypes = {\n  color: propTypes.string,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string\n};\nEdgeHeader.defaultProps = {\n  color: \"deep-purple\",\n  tag: \"div\"\n};\n\nvar Footer = function Footer(props) {\n  var color = props.color,\n      children = props.children,\n      className = props.className,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"color\", \"children\", \"className\", \"tag\"]);\n\n  var classes = classNames(\"page-footer\", color && color, className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"footer\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nFooter.propTypes = {\n  color: propTypes.string,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  children: propTypes.node\n};\nFooter.defaultProps = {\n  tag: \"footer\"\n};\n\nvar FormInline = function FormInline(props) {\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      cursorPos = _useState2[0],\n      setCursorPos = _useState2[1];\n\n  var handleClick = function handleClick(e) {\n    // Get Cursor Position\n    var cursorPos = {\n      top: e.clientY,\n      left: e.clientX,\n      time: Date.now()\n    };\n    setCursorPos(cursorPos);\n  };\n\n  var className = props.className,\n      waves = props.waves,\n      children = props.children,\n      attributes = _objectWithoutProperties(props, [\"className\", \"waves\", \"children\"]);\n\n  var classes = classNames('form-inline', props.waves && 'Ripple-parent', className);\n  return React.createElement(\"form\", _extends({\n    \"data-test\": \"form-inline\"\n  }, attributes, {\n    className: classes,\n    onMouseDown: handleClick,\n    onTouchStart: handleClick\n  }), props.children, props.waves && React.createElement(Waves, {\n    cursorPos: cursorPos\n  }));\n};\n\nFormInline.propTypes = {\n  children: propTypes.node,\n  className: propTypes.string,\n  waves: propTypes.bool\n};\n\nvar FreeBird = function FreeBird(props) {\n  var className = props.className,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"className\", \"tag\"]);\n\n  var classes = classNames(\"container free-bird\", className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"freebird\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nFreeBird.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string\n};\nFreeBird.defaultProps = {\n  tag: \"div\"\n};\nvar css$7 = \".hamburger-button__checkbox {\\n  display: none;\\n}\\n\\n.hamburger-button__button {\\n  background-color: transparent;\\n  height: 100%;\\n  width: 100%;\\n  text-align: center;\\n  cursor: pointer;\\n  top: -5px;\\n}\\n\\nlabel.hamburger-button__button {\\n  margin-bottom: 0;\\n}\\n\\n#nav-icon1 {\\n  width: 1.5em;\\n  height: 1.5em;\\n  position: relative;\\n  -webkit-transform: rotate(0deg);\\n  -moz-transform: rotate(0deg);\\n  -o-transform: rotate(0deg);\\n  transform: rotate(0deg);\\n  -webkit-transition: .5s ease-in-out;\\n  -moz-transition: .5s ease-in-out;\\n  -o-transition: .5s ease-in-out;\\n  transition: .5s ease-in-out;\\n  cursor: pointer;\\n}\\n\\n#nav-icon1 span {\\n  display: block;\\n  position: absolute;\\n  height: 3px;\\n  width: 100%;\\n  border-radius: 1px;\\n  background-color: #fff;\\n  opacity: 1;\\n  left: 0;\\n  -webkit-transform: rotate(0deg);\\n  -moz-transform: rotate(0deg);\\n  -o-transform: rotate(0deg);\\n  transform: rotate(0deg);\\n  -webkit-transition: .25s ease-in-out;\\n  -moz-transition: .25s ease-in-out;\\n  -o-transition: .25s ease-in-out;\\n  transition: .25s ease-in-out;\\n}\\n\\n#nav-icon1 span:nth-child(1) {\\n  top: 5px;\\n}\\n\\n#nav-icon1 span:nth-child(2) {\\n  top: 16px;\\n}\\n\\n#nav-icon1 span:nth-child(3) {\\n  top: 27px;\\n}\\n\\n.hamburger-button__checkbox:checked+#nav-icon1 span:nth-child(1) {\\n  top: 16px;\\n  -webkit-transform: rotate(135deg);\\n  -moz-transform: rotate(135deg);\\n  -o-transform: rotate(135deg);\\n  transform: rotate(135deg);\\n}\\n\\n.hamburger-button__checkbox:checked+#nav-icon1 span:nth-child(2) {\\n  opacity: 0;\\n  left: -60px;\\n}\\n\\n.hamburger-button__checkbox:checked+#nav-icon1 span:nth-child(3) {\\n  top: 16px;\\n  -webkit-transform: rotate(-135deg);\\n  -moz-transform: rotate(-135deg);\\n  -o-transform: rotate(-135deg);\\n  transform: rotate(-135deg);\\n}\\n\";\nstyleInject(css$7);\n\nvar HamburgerToggler = function HamburgerToggler(props) {\n  var id = props.id,\n      color = props.color,\n      className = props.className,\n      isOpen = props.isOpen,\n      onClick = props.onClick;\n  var classes = classNames('hamburger-button__button', className);\n  return React.createElement(React.Fragment, null, React.createElement(\"input\", {\n    \"data-test\": \"hamburger-toggler\",\n    type: \"checkbox\",\n    defaultChecked: isOpen || false,\n    onChange: onClick,\n    className: \"hamburger-button__checkbox\",\n    id: id\n  }), React.createElement(\"label\", {\n    id: \"nav-icon1\",\n    className: classes,\n    htmlFor: id\n  }, React.createElement(\"span\", {\n    style: {\n      background: color\n    }\n  }), React.createElement(\"span\", {\n    style: {\n      background: color\n    }\n  }), React.createElement(\"span\", {\n    style: {\n      background: color\n    }\n  })));\n};\n\nHamburgerToggler.propTypes = {\n  id: propTypes.string,\n  color: propTypes.string,\n  className: propTypes.string\n};\n\nvar Iframe =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Iframe, _Component);\n\n  function Iframe() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Iframe);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Iframe)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      width: '',\n      height: '',\n      ratio: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      var width = _this.props.width;\n      var height = _this.props.height;\n      var ratio = 9 / 16;\n\n      if (_this.props.ratio) {\n        var newRatio = _this.props.ratio.split('by')[0] / _this.props.ratio.split('by')[1];\n\n        if (typeof ratio === 'number') ratio = newRatio;\n      }\n\n      if (_this.props.width && _this.props.height) {\n        return;\n      } else if (_this.props.width) {\n        height = _this.props.width * ratio;\n      } else if (_this.props.height) {\n        width = _this.props.height * (1 / ratio);\n      }\n\n      _this.setState(_objectSpread({}, _this.state, {\n        width: width,\n        height: height,\n        ratio: ratio\n      }));\n    });\n\n    return _this;\n  }\n\n  _createClass(Iframe, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          allowFullScreen = _this$props.allowFullScreen,\n          className = _this$props.className,\n          id = _this$props.id,\n          name = _this$props.name,\n          onMouseOver = _this$props.onMouseOver,\n          onMouseOut = _this$props.onMouseOut,\n          onLoad = _this$props.onLoad,\n          sandbox = _this$props.sandbox,\n          src = _this$props.src,\n          style = _this$props.style,\n          _this$props$title = _this$props.title,\n          title = _this$props$title === void 0 ? \"\" : _this$props$title,\n          ratio = _this$props.ratio,\n          height = _this$props.height,\n          width = _this$props.width;\n      var classes = classNames('embed-responsive-item', className);\n      var wrapperClasses = classNames(!(height || width) && 'embed-responsive', ratio ? \"embed-responsive-\".concat(ratio) : \"embed-responsive-16by9\");\n      var iframeAttributes = {\n        src: src,\n        id: id || false,\n        frameBorder: '0',\n        target: '_parent',\n        allowFullScreen: allowFullScreen || true,\n        height: this.state.height || '100%',\n        name: name || undefined,\n        width: this.state.width || '100%',\n        onLoad: onLoad || undefined,\n        onMouseOver: onMouseOver || undefined,\n        onMouseOut: onMouseOut || undefined,\n        sandbox: sandbox || undefined,\n        style: style || undefined\n      };\n      iframeAttributes = returnAttributes(iframeAttributes);\n      return React.createElement(\"div\", {\n        \"data-test\": \"iframe\",\n        className: wrapperClasses\n      }, React.createElement(\"iframe\", _extends({\n        title: title,\n        className: classes\n      }, iframeAttributes)));\n    }\n  }]);\n\n  return Iframe;\n}(Component);\n\nIframe.propTypes = {\n  allowFullScreen: propTypes.bool,\n  className: propTypes.string,\n  height: propTypes.number,\n  id: propTypes.string,\n  name: propTypes.string,\n  onMouseOver: propTypes.func,\n  onMouseOut: propTypes.func,\n  onLoad: propTypes.func,\n  ratio: propTypes.string,\n  sandbox: propTypes.string,\n  src: propTypes.string.isRequired,\n  styles: propTypes.object,\n  width: propTypes.number,\n  title: propTypes.string\n};\n\nvar InputGroup = function InputGroup(_ref) {\n  var append = _ref.append,\n      appendClassName = _ref.appendClassName,\n      ariaLabel = _ref.ariaLabel,\n      children = _ref.children,\n      className = _ref.className,\n      containerClassName = _ref.containerClassName,\n      containerId = _ref.containerId,\n      hint = _ref.hint,\n      id = _ref.id,\n      inputs = _ref.inputs,\n      inputTag = _ref.inputTag,\n      label = _ref.label,\n      labelClassName = _ref.labelClassName,\n      material = _ref.material,\n      prepend = _ref.prepend,\n      prependClassName = _ref.prependClassName,\n      size = _ref.size,\n      Tag = _ref.tag,\n      textClassName = _ref.textClassName,\n      type = _ref.type,\n      value = _ref.value,\n      valueDefault = _ref.valueDefault,\n      attributes = _objectWithoutProperties(_ref, [\"append\", \"appendClassName\", \"ariaLabel\", \"children\", \"className\", \"containerClassName\", \"containerId\", \"hint\", \"id\", \"inputs\", \"inputTag\", \"label\", \"labelClassName\", \"material\", \"prepend\", \"prependClassName\", \"size\", \"tag\", \"textClassName\", \"type\", \"value\", \"valueDefault\"]);\n\n  var containerClassNames = classNames(\"input-group\", material && \"md-form\", size && \"input-group-\".concat(size), containerClassName);\n  var inputClassNames = classNames(className);\n  var prependClassNames = classNames(\"input-group-prepend\", prependClassName);\n  var appendClassNames = classNames(\"input-group-append\", appendClassName);\n  var textClassNames = classNames(\"input-group-text\", material && \"md-addon\", textClassName);\n  return React.createElement(React.Fragment, null, label && React.createElement(\"label\", {\n    htmlFor: id,\n    className: labelClassName\n  }, label), React.createElement(Tag, _extends({}, attributes, {\n    className: containerClassNames,\n    id: containerId\n  }), prepend && React.createElement(\"div\", {\n    className: prependClassNames\n  }, typeof prepend === \"string\" ? React.createElement(\"span\", {\n    className: textClassNames\n  }, prepend) : prepend), inputs || React.createElement(Input, {\n    noTag: true,\n    type: type,\n    className: inputClassNames,\n    id: id,\n    value: value,\n    valueDefault: valueDefault,\n    hint: hint,\n    \"aria-label\": ariaLabel\n  }), append && React.createElement(\"div\", {\n    className: appendClassNames\n  }, typeof append === \"string\" ? React.createElement(\"span\", {\n    className: textClassNames\n  }, append) : append), children));\n};\n\nInputGroup.propTypes = {\n  append: propTypes.oneOfType([propTypes.node, propTypes.string]),\n  appendClassNames: propTypes.string,\n  ariaLabel: propTypes.string,\n  children: propTypes.node,\n  className: propTypes.string,\n  containerClassName: propTypes.string,\n  containerId: propTypes.string,\n  hint: propTypes.string,\n  id: propTypes.string,\n  inputs: propTypes.node,\n  label: propTypes.string,\n  labelClassName: propTypes.string,\n  material: propTypes.bool,\n  prepend: propTypes.any,\n  prependClassName: propTypes.string,\n  size: propTypes.string,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  textClassName: propTypes.string,\n  type: propTypes.string,\n  value: propTypes.string,\n  valueDefault: propTypes.string\n};\nInputGroup.defaultProps = {\n  tag: \"div\",\n  type: \"text\"\n};\n\nvar InputNumeric = function InputNumeric(props) {\n  var onChangeHandler = function onChangeHandler(value) {\n    props.getValue && props.getValue(value);\n  };\n\n  var className = props.className,\n      getValue = props.getValue,\n      attributes = _objectWithoutProperties(props, [\"className\", \"getValue\"]);\n\n  var classes = classNames('form-control', className);\n  return React.createElement(NumericInput, _extends({\n    \"data-test\": \"input-numeric\"\n  }, attributes, {\n    onChange: onChangeHandler,\n    className: classes\n  }));\n};\n\nInputNumeric.propTypes = {\n  className: propTypes.string,\n  getValue: propTypes.func\n};\n\nvar Jumbotron = function Jumbotron(props) {\n  var className = props.className,\n      children = props.children,\n      fluid = props.fluid,\n      attributes = _objectWithoutProperties(props, [\"className\", \"children\", \"fluid\"]);\n\n  var classes = classNames('jumbotron', fluid ? 'jumbotron-fluid' : false, className);\n  return React.createElement(\"div\", _extends({\n    \"data-test\": \"jumbotron\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nJumbotron.propTypes = {\n  fluid: propTypes.bool,\n  children: propTypes.node,\n  className: propTypes.string\n};\n\nvar ListGroup = function ListGroup(props) {\n  var children = props.children,\n      className = props.className,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"children\", \"className\", \"tag\"]);\n\n  var classes = classNames(\"list-group\", className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"list-group\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nListGroup.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  children: propTypes.node\n};\nListGroup.defaultProps = {\n  tag: \"ul\"\n};\n\nvar ListGroupItem = function ListGroupItem(props) {\n  var _classNames;\n\n  var active = props.active,\n      children = props.children,\n      className = props.className,\n      color = props.color,\n      disabled = props.disabled,\n      hover = props.hover,\n      success = props.success,\n      info = props.info,\n      warning = props.warning,\n      danger = props.danger,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"active\", \"children\", \"className\", \"color\", \"disabled\", \"hover\", \"success\", \"info\", \"warning\", \"danger\", \"tag\"]);\n\n  var classes = classNames('list-group-item', className, (_classNames = {\n    active: active,\n    disabled: disabled\n  }, _defineProperty(_classNames, \"list-group-item-\".concat(color), ' color'), _defineProperty(_classNames, 'list-group-item-action', hover), _classNames));\n\n  if (attributes.href && Tag === 'li') {\n    Tag = 'a';\n  }\n\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"list-group-item\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nListGroupItem.propTypes = {\n  active: propTypes.bool,\n  disabled: propTypes.bool,\n  hover: propTypes.bool,\n  success: propTypes.bool,\n  info: propTypes.bool,\n  warning: propTypes.bool,\n  danger: propTypes.bool,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  children: propTypes.node,\n  color: propTypes.oneOf(['primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark'])\n};\nListGroupItem.defaultProps = {\n  tag: 'li'\n};\n\nvar Media = function Media(props) {\n  var body = props.body,\n      bottom = props.bottom,\n      className = props.className,\n      heading = props.heading,\n      left = props.left,\n      list = props.list,\n      middle = props.middle,\n      object = props.object,\n      right = props.right,\n      round = props.round,\n      thumbnail = props.thumbnail,\n      figure = props.figure,\n      figImg = props.figImg,\n      figCap = props.figCap,\n      figCapRight = props.figCapRight,\n      figCapLeft = props.figCapLeft,\n      tag = props.tag,\n      top = props.top,\n      attributes = _objectWithoutProperties(props, [\"body\", \"bottom\", \"className\", \"heading\", \"left\", \"list\", \"middle\", \"object\", \"right\", \"round\", \"thumbnail\", \"figure\", \"figImg\", \"figCap\", \"figCapRight\", \"figCapLeft\", \"tag\", \"top\"]);\n\n  var defaultTag;\n\n  if (heading) {\n    defaultTag = \"h4\";\n  } else if (left || right) {\n    defaultTag = \"a\";\n  } else if (object || figImg) {\n    defaultTag = \"img\";\n  } else if (list) {\n    defaultTag = \"ul\";\n  } else if (figure) {\n    defaultTag = \"figure\";\n  } else if (figCap || figCapRight || figCapLeft) {\n    defaultTag = \"figcaption\";\n  } else {\n    defaultTag = \"div\";\n  }\n\n  var Tag = tag || defaultTag;\n  var classes = classNames({\n    \"media-body\": body,\n    \"mt-0\": heading,\n    \"media-left\": left,\n    \"media-right\": right,\n    \"align-self-start\": top,\n    \"align-self-center\": middle,\n    \"align-self-end\": bottom,\n    \"media-object\": object,\n    \"img-thumbnail\": thumbnail,\n    \"media-list\": list,\n    figure: figure,\n    \"figure-img\": figImg,\n    \"figure-caption text-center\": figCap,\n    \"figure-caption text-right\": figCapRight,\n    \"figure-caption text-left\": figCapLeft,\n    \"rounded-circle z-depth-1-half\": round\n  }, !body && !heading && !left && !right && !top && !bottom && !middle && !object && !list && !figCap && !figCapRight && !figCapRight && !figImg && !figure ? \"media\" : false, className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"media\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nMedia.propTypes = {\n  body: propTypes.bool,\n  bottom: propTypes.bool,\n  children: propTypes.node,\n  className: propTypes.string,\n  heading: propTypes.bool,\n  figure: propTypes.bool,\n  figImg: propTypes.bool,\n  figCap: propTypes.bool,\n  figCapRight: propTypes.bool,\n  figCapLeft: propTypes.bool,\n  left: propTypes.bool,\n  list: propTypes.bool,\n  middle: propTypes.bool,\n  object: propTypes.bool,\n  thumbnail: propTypes.bool,\n  round: propTypes.bool,\n  right: propTypes.bool,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  top: propTypes.bool\n};\n\nvar Modal =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Modal, _Component);\n\n  function Modal() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Modal);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Modal)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isOpen: _this.props.isOpen || false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"modalContent\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      document.body.classList.add('modal-open');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentWillUnmount\", function () {\n      document.body.classList.remove('modal-open');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidUpdate\", function (prevProps, prevState) {\n      if (prevState.isOpen !== _this.props.isOpen) {\n        _this.setState({\n          isOpen: _this.props.isOpen\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOnEntered\", function (type, node) {\n      if (type === 'backdrop' && _this.props.fade === false) {\n        return;\n      }\n\n      node.classList.add('show');\n      _this.props.autoFocus && node.focus();\n\n      if (type === 'modal') {\n        _this.props.showModal && _this.props.showModal();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOnExit\", function (type, node) {\n      if (type === 'backdrop' && _this.props.fade === false) {\n        return;\n      }\n\n      node.classList.remove('show');\n\n      if (type === 'modal') {\n        _this.props.hideModal && _this.props.hideModal();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOnExited\", function (node) {\n      _this.props.hiddenModal && _this.props.hiddenModal();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleBackdropClick\", function (e) {\n      if (!_this.props.backdrop || e.target.closest('[role=\"dialog\"]') && !e.target.classList.contains('modal')) return;\n\n      if (!_this.modalContent.contains(e.target)) {\n        _this.props.toggle();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEscape\", function (e) {\n      if (e.keyCode === 27) {\n        e.preventDefault();\n\n        _this.props.toggle();\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(Modal, [{\n    key: \"render\",\n    value: function render() {\n      var _classNames,\n          _this2 = this;\n\n      var _this$props = this.props,\n          children = _this$props.children,\n          backdrop = _this$props.backdrop,\n          backdropClassName = _this$props.backdropClassName,\n          contentClassName = _this$props.contentClassName,\n          className = _this$props.className,\n          size = _this$props.size,\n          side = _this$props.side,\n          fullHeight = _this$props.fullHeight,\n          frame = _this$props.frame,\n          centered = _this$props.centered,\n          position = _this$props.position,\n          cascading = _this$props.cascading,\n          modalStyle = _this$props.modalStyle,\n          wrapClassName = _this$props.wrapClassName,\n          animation = _this$props.animation,\n          fade = _this$props.fade,\n          tabIndex = _this$props.tabIndex,\n          role = _this$props.role,\n          id = _this$props.id,\n          inline = _this$props.inline;\n      var timeout = fade ? 300 : 0;\n      var modalDialogClasses = classNames((_classNames = {\n        'cascading-modal': cascading,\n        'modal-side': side,\n        'modal-full-height': fullHeight,\n        'modal-frame': frame,\n        'modal-dialog-centered': centered\n      }, _defineProperty(_classNames, \"modal-\".concat(size), size), _defineProperty(_classNames, \"modal-\".concat(position), position), _defineProperty(_classNames, \"modal-notify white-text modal-\".concat(modalStyle), modalStyle), _classNames), 'modal-dialog', className);\n      var wrapperClasses = classNames(_defineProperty({\n        modal: !inline,\n        fade: fade,\n        top: fade && !animation && !position\n      }, \"\".concat(animation), fade && animation), fade && position && position.split('-')[1], wrapClassName);\n      var backdropClasses = classNames('modal-backdrop', fade ? 'fade' : 'show', backdropClassName);\n      var contentClasses = classNames('modal-content', contentClassName);\n      var modalAttributes = returnAttributes({\n        style: {\n          display: 'block'\n        },\n        id: id,\n        tabIndex: tabIndex,\n        role: role,\n        'aria-hidden': 'true'\n      });\n      return React.createElement(Fragment, null, backdrop && React.createElement(Transition, {\n        timeout: timeout,\n        \"in\": this.state.isOpen,\n        appear: this.state.isOpen,\n        mountOnEnter: true,\n        unmountOnExit: true,\n        onEntered: function onEntered(node) {\n          return _this2.handleOnEntered('backdrop', node);\n        },\n        onExit: function onExit(node) {\n          return _this2.handleOnExit('backdrop', node);\n        },\n        onExited: this.handleOnExited\n      }, React.createElement(\"div\", {\n        className: backdropClasses\n      })), React.createElement(Transition, {\n        timeout: timeout,\n        \"in\": this.state.isOpen,\n        appear: this.state.isOpen,\n        mountOnEnter: true,\n        unmountOnExit: true,\n        onMouseDown: this.handleBackdropClick,\n        onEntered: function onEntered(node) {\n          return _this2.handleOnEntered('modal', node);\n        },\n        onExit: function onExit(node) {\n          return _this2.handleOnExit('modal', node);\n        }\n      }, React.createElement(\"div\", _extends({\n        \"data-test\": \"modal\",\n        onKeyUp: this.handleEscape,\n        className: wrapperClasses\n      }, modalAttributes), React.createElement(\"div\", {\n        className: modalDialogClasses,\n        role: \"document\"\n      }, React.createElement(\"div\", {\n        ref: function ref(elem) {\n          return _this2.modalContent = elem;\n        },\n        className: contentClasses\n      }, children)))));\n    }\n  }]);\n\n  return Modal;\n}(Component);\n\nModal.defaultProps = {\n  autoFocus: true,\n  backdrop: true,\n  backdropTransitionTimeout: 150,\n  fade: true,\n  isOpen: false,\n  modalTransitionTimeout: 300,\n  role: 'dialog',\n  tabIndex: '-1',\n  zIndex: 1050\n};\nModal.propTypes = {\n  animation: propTypes.string,\n  backdrop: propTypes.bool,\n  backdropClassName: propTypes.string,\n  cascading: propTypes.bool,\n  centered: propTypes.bool,\n  children: propTypes.node,\n  className: propTypes.string,\n  contentClassName: propTypes.string,\n  fade: propTypes.bool,\n  frame: propTypes.bool,\n  fullHeight: propTypes.bool,\n  hiddenModal: propTypes.func,\n  hideModal: propTypes.func,\n  id: propTypes.string,\n  modalClassName: propTypes.string,\n  modalStyle: propTypes.string,\n  position: propTypes.string,\n  role: propTypes.string,\n  size: propTypes.string,\n  side: propTypes.bool,\n  showModal: propTypes.func,\n  tabIndex: propTypes.string,\n  wrapClassName: propTypes.string\n};\n\nvar ModalBody = function ModalBody(props) {\n  var className = props.className,\n      children = props.children,\n      attributes = _objectWithoutProperties(props, [\"className\", \"children\"]);\n\n  var classes = classNames('modal-body', className);\n  return React.createElement(\"div\", _extends({\n    \"data-test\": \"modal-body\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nModalBody.propTypes = {\n  className: propTypes.string,\n  children: propTypes.node\n};\n\nvar ModalFooter = function ModalFooter(props) {\n  var className = props.className,\n      children = props.children,\n      center = props.center,\n      start = props.start,\n      end = props.end,\n      around = props.around,\n      between = props.between,\n      attributes = _objectWithoutProperties(props, [\"className\", \"children\", \"center\", \"start\", \"end\", \"around\", \"between\"]);\n\n  var classes = classNames('modal-footer', className, {\n    'justify-content-start': start,\n    'justify-content-end': end,\n    'justify-content-center': center,\n    'justify-content-between': between,\n    'justify-content-around': around\n  });\n  return React.createElement(\"div\", _extends({\n    \"data-test\": \"modal-footer\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nModalFooter.propTypes = {\n  className: propTypes.string,\n  children: propTypes.node\n};\n\nvar ModalHeader = function ModalHeader(props) {\n  var closeButton;\n\n  var className = props.className,\n      children = props.children,\n      toggle = props.toggle,\n      Tag = props.tag,\n      closeAriaLabel = props.closeAriaLabel,\n      titleClass = props.titleClass,\n      attributes = _objectWithoutProperties(props, [\"className\", \"children\", \"toggle\", \"tag\", \"closeAriaLabel\", \"titleClass\"]);\n\n  var classes = classNames('modal-header', className);\n  var titleClasses = classNames('modal-title', titleClass);\n\n  if (toggle) {\n    closeButton = React.createElement(\"button\", {\n      type: \"button\",\n      onClick: toggle,\n      className: \"close\",\n      \"aria-label\": closeAriaLabel\n    }, React.createElement(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, String.fromCharCode(215)));\n  }\n\n  return React.createElement(\"div\", _extends({\n    \"data-test\": \"modal-header\"\n  }, attributes, {\n    className: classes\n  }), React.createElement(Tag, {\n    className: titleClasses\n  }, children), closeButton);\n};\n\nModalHeader.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  toggle: propTypes.func,\n  className: propTypes.string,\n  children: propTypes.node,\n  closeAriaLabel: propTypes.string\n};\nModalHeader.defaultProps = {\n  tag: 'h4',\n  closeAriaLabel: 'Close'\n};\n\nvar Nav = function Nav(props) {\n  var children = props.children,\n      className = props.className,\n      Tag = props.tag,\n      tabs = props.tabs,\n      color = props.color,\n      classicTabs = props.classicTabs,\n      pills = props.pills,\n      header = props.header,\n      attributes = _objectWithoutProperties(props, [\"children\", \"className\", \"tag\", \"tabs\", \"color\", \"classicTabs\", \"pills\", \"header\"]);\n\n  var classes = classNames('nav', tabs && 'md-tabs', pills && 'md-pills', header && 'nav-pills card-header-pills', color && !tabs && !classicTabs && !pills ? color : false, pills && color ? 'pills-' + color : false, (tabs || classicTabs) && color ? 'tabs-' + color : false, className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"nav\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nNav.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  children: propTypes.node,\n  color: propTypes.string,\n  classicTabs: propTypes.bool,\n  pills: propTypes.bool,\n  tabs: propTypes.bool,\n  header: propTypes.bool\n};\nNav.defaultProps = {\n  tag: 'ul',\n  classicTabs: false,\n  pills: false,\n  tabs: false,\n  header: false\n};\n\nvar getExpandClass = function getExpandClass(expand) {\n  if (expand === false) {\n    return false;\n  } else if (expand === true || expand === \"xs\") {\n    return \"navbar-expand\";\n  }\n\n  return \"navbar-expand-\".concat(expand);\n};\n\nvar Navbar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Navbar, _Component);\n\n  function Navbar(props) {\n    var _this;\n\n    _classCallCheck(this, Navbar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Navbar).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleScroll\", function () {\n      var scrollingNavbarOffset = _this.props.scrollingNavbarOffset || 50;\n\n      if (window.pageYOffset > scrollingNavbarOffset) {\n        _this.setState({\n          isCollapsed: true\n        });\n      } else {\n        _this.setState({\n          isCollapsed: false\n        });\n      }\n    });\n\n    _this.state = {\n      isCollapsed: false\n    };\n    return _this;\n  }\n\n  _createClass(Navbar, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.scrolling || this.props.scrollingNavbarOffset) {\n        window.addEventListener(\"scroll\", this.handleScroll);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.props.scrolling || this.props.scrollingNavbarOffset) {\n        window.removeEventListener(\"scroll\", this.handleScroll);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          expand = _this$props.expand,\n          light = _this$props.light,\n          dark = _this$props.dark,\n          sticky = _this$props.sticky,\n          fixed = _this$props.fixed,\n          scrolling = _this$props.scrolling,\n          color = _this$props.color,\n          className = _this$props.className,\n          scrollingNavbarOffset = _this$props.scrollingNavbarOffset,\n          Tag = _this$props.tag,\n          _double = _this$props[\"double\"],\n          transparent = _this$props.transparent,\n          attributes = _objectWithoutProperties(_this$props, [\"expand\", \"light\", \"dark\", \"sticky\", \"fixed\", \"scrolling\", \"color\", \"className\", \"scrollingNavbarOffset\", \"tag\", \"double\", \"transparent\"]);\n\n      var classes = classNames(\"navbar\", light ? \"navbar-light\" : \"\", dark ? \"navbar-dark\" : \"\", sticky ? \"sticky-\" + sticky : \"\", fixed ? \"fixed-\" + fixed : \"\", getExpandClass(expand), scrolling || scrollingNavbarOffset ? \"scrolling-navbar\" : \"\", this.state.isCollapsed ? \"top-nav-collapse\" : \"\", color ? transparent ? this.state.isCollapsed ? color : \"\" : color : \"\", _double ? \"double-nav\" : \"\", className);\n      return React.createElement(Tag, _extends({}, attributes, {\n        className: classes,\n        role: \"navigation\"\n      }));\n    }\n  }]);\n\n  return Navbar;\n}(Component);\n\nNavbar.propTypes = {\n  light: propTypes.bool,\n  dark: propTypes.bool,\n  \"double\": propTypes.bool,\n  fixed: propTypes.string,\n  sticky: propTypes.string,\n  scrolling: propTypes.bool,\n  scrollingNavbarOffset: propTypes.number,\n  color: propTypes.string,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  expand: propTypes.oneOfType([propTypes.bool, propTypes.string]),\n  transparent: propTypes.bool\n};\nNavbar.defaultProps = {\n  tag: \"nav\",\n  expand: false,\n  scrolling: false\n};\n\nvar NavbarBrand = function NavbarBrand(_ref) {\n  var className = _ref.className,\n      href = _ref.href,\n      attributes = _objectWithoutProperties(_ref, [\"className\", \"href\"]);\n\n  var classes = classNames(\"navbar-brand\", className);\n\n  var navbarBrand = function navbarBrand() {\n    if (href) {\n      return React.createElement(NavLink$1, _extends({\n        to: href\n      }, attributes, {\n        className: classes\n      }));\n    } else {\n      return React.createElement(\"div\", _extends({}, attributes, {\n        className: classes\n      }));\n    }\n  };\n\n  return navbarBrand();\n};\n\nNavbarBrand.propTypes = {\n  className: propTypes.string,\n  href: propTypes.string\n};\n\nvar NavbarNav = function NavbarNav(props) {\n  var children = props.children,\n      className = props.className,\n      right = props.right,\n      left = props.left,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"children\", \"className\", \"right\", \"left\", \"tag\"]);\n\n  var classes = classNames(\"navbar-nav\", right ? \"ml-auto\" : left ? \"mr-auto\" : \"justify-content-around w-100\", className);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }), children);\n};\n\nNavbarNav.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  children: propTypes.node,\n  right: propTypes.bool,\n  left: propTypes.bool\n};\nNavbarNav.defaultProps = {\n  tag: \"ul\"\n};\n\nvar NavbarToggler = function NavbarToggler(props) {\n  var right = props.right,\n      left = props.left,\n      children = props.children,\n      className = props.className,\n      Tag = props.tag,\n      image = props.image,\n      attributes = _objectWithoutProperties(props, [\"right\", \"left\", \"children\", \"className\", \"tag\", \"image\"]);\n\n  var classes = classNames({\n    \"navbar-toggler-right\": right,\n    \"navbar-toggler-left\": left\n  }, \"navbar-toggler\", className);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }), children ? children : image ? React.createElement(\"span\", {\n    className: \"navbar-toggler-icon\",\n    style: {\n      backgroundImage: \"url(\\\"\".concat(image, \"\\\")\")\n    }\n  }) : React.createElement(\"span\", {\n    className: \"navbar-toggler-icon\"\n  }));\n};\n\nNavbarToggler.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  type: propTypes.string,\n  className: propTypes.string,\n  children: propTypes.node,\n  right: propTypes.bool,\n  left: propTypes.bool,\n  image: propTypes.string\n};\nNavbarToggler.defaultProps = {\n  tag: \"button\",\n  type: \"button\"\n};\n\nvar NavItem = function NavItem(props) {\n  var children = props.children,\n      className = props.className,\n      active = props.active,\n      text = props.text,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"children\", \"className\", \"active\", \"text\", \"tag\"]);\n\n  var classes = classNames(\"nav-item\", active && \"active\", text && \"navbar-text\", className);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }), children);\n};\n\nNavItem.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  children: propTypes.node,\n  active: propTypes.bool\n};\nNavItem.defaultProps = {\n  tag: \"li\"\n};\n\nvar NavLink = function NavLink(props) {\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      cursorPos = _useState2[0],\n      setCursorPos = _useState2[1];\n\n  var handleClick = function handleClick(e) {\n    if (!props.disabled) {\n      e.stopPropagation(); // Waves - Get Cursor Position\n\n      var _cursorPos = {\n        top: e.clientY,\n        left: e.clientX,\n        time: Date.now()\n      };\n      setCursorPos(_cursorPos);\n    }\n  };\n\n  var children = props.children,\n      className = props.className,\n      disabled = props.disabled,\n      active = props.active,\n      to = props.to,\n      attributes = _objectWithoutProperties(props, [\"children\", \"className\", \"disabled\", \"active\", \"to\"]);\n\n  var classes = classNames(\"nav-link\", disabled ? \"disabled\" : \"Ripple-parent\", active && \"active\", className);\n  return React.createElement(NavLink$1, _extends({\n    className: classes,\n    onMouseUp: handleClick,\n    onTouchStart: handleClick,\n    to: to\n  }, attributes), children, props.disabled ? false : React.createElement(Waves, {\n    cursorPos: cursorPos\n  }));\n};\n\nNavLink.propTypes = {\n  children: propTypes.node,\n  className: propTypes.string,\n  disabled: propTypes.bool,\n  to: propTypes.string,\n  active: propTypes.bool\n};\nNavLink.defaultProps = {\n  active: false,\n  className: \"\",\n  disabled: false\n};\n\nvar Notification =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Notification, _React$Component);\n\n  function Notification() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Notification);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Notification)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      componentState: _this.props.show ? \"show\" : \"hide\"\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"hide\", function () {\n      var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      setTimeout(function () {\n        _this.setState({\n          componentState: \"\"\n        }, function () {\n          setTimeout(function () {\n            _this.setState({\n              componentState: \"hide\"\n            });\n          }, 150);\n        });\n      }, time);\n    });\n\n    return _this;\n  }\n\n  _createClass(Notification, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.autohide > 0) this.hide(this.props.autohide);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          Tag = _this$props.tag,\n          className = _this$props.className,\n          show = _this$props.show,\n          fade = _this$props.fade,\n          message = _this$props.message,\n          bodyClassName = _this$props.bodyClassName,\n          icon = _this$props.icon,\n          iconClassName = _this$props.iconClassName,\n          title = _this$props.title,\n          titleClassName = _this$props.titleClassName,\n          text = _this$props.text,\n          closeClassName = _this$props.closeClassName,\n          attributes = _objectWithoutProperties(_this$props, [\"tag\", \"className\", \"show\", \"fade\", \"message\", \"bodyClassName\", \"icon\", \"iconClassName\", \"title\", \"titleClassName\", \"text\", \"closeClassName\"]);\n\n      var classes = classNames(\"toast\", fade && \"fade\", this.state.componentState, className);\n      var headerClasses = classNames(\"toast-header\", titleClassName);\n      var iconClassNames = classNames(\"mr-2\", iconClassName);\n      var bodyClasses = classNames(\"toast-body\", bodyClassName);\n      var closeClasses = classNames(\"ml-2\", \"mb-1\", closeClassName);\n      return React.createElement(Tag, _extends({}, attributes, {\n        className: classes\n      }), React.createElement(\"div\", {\n        className: headerClasses\n      }, React.createElement(Fa, {\n        icon: icon,\n        className: iconClassNames,\n        size: \"lg\"\n      }), React.createElement(\"strong\", {\n        className: \"mr-auto\"\n      }, title), React.createElement(\"small\", null, text), React.createElement(MDBCloseIcon, {\n        className: closeClasses,\n        onClick: function onClick() {\n          return _this2.hide();\n        }\n      })), React.createElement(\"div\", {\n        className: bodyClasses\n      }, message));\n    }\n  }]);\n\n  return Notification;\n}(React.Component);\n\nNotification.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  show: propTypes.bool,\n  fade: propTypes.bool,\n  autohide: propTypes.number,\n  iconClassName: propTypes.string,\n  title: propTypes.string,\n  text: propTypes.string,\n  titleColor: propTypes.string,\n  titleClassName: propTypes.string,\n  closeClassName: propTypes.string,\n  bodyClassName: propTypes.string,\n  bodyColor: propTypes.string,\n  message: propTypes.string\n};\nNotification.defaultProps = {\n  icon: \"square\",\n  tag: \"div\",\n  closeClassName: \"text-dark\"\n};\n\nvar Popper = function Popper(_ref) {\n  var children = _ref.children,\n      clickable = _ref.clickable,\n      domElement = _ref.domElement,\n      modifiers = _ref.modifiers,\n      id = _ref.id,\n      isVisible = _ref.isVisible,\n      onChange = _ref.onChange,\n      placement = _ref.placement,\n      popover = _ref.popover,\n      style = _ref.style,\n      tag = _ref.tag;\n\n  var _useState = useState(isVisible),\n      _useState2 = _slicedToArray(_useState, 2),\n      visible = _useState2[0],\n      setVisible = _useState2[1];\n\n  useEffect(function () {\n    setVisible(isVisible);\n  }, [isVisible]);\n  useEffect(function () {\n    onChange && onChange(visible);\n  }, [onChange, visible]);\n  useEffect(function () {\n    window.addEventListener('click', handleClick);\n    return function () {\n      return window.removeEventListener('click', handleClick);\n    };\n  });\n\n  function handleClick(e) {\n    var element = document.elementsFromPoint(e.clientX, e.clientY).find(function (el) {\n      return el.dataset.popper === id;\n    });\n    if (element) return;\n    setVisible(false);\n  }\n\n  var Wrapper = children[0];\n  var Content = children[1];\n  var Tag = tag;\n  var tooltipClasses = classNames(\"fade\", popover ? \"popover bs-popover-\".concat(placement, \" popover-enter-done\") : \"tooltip bs-tooltip-\".concat(placement), visible ? \"show\" : \"\");\n  var contentClasses = classNames(!popover && \"tooltip-inner\");\n  return React.createElement(Manager, null, React.createElement(Reference, null, function (_ref2) {\n    var ref = _ref2.ref;\n    return !domElement ? React.createElement(Wrapper.type, _extends({}, Wrapper.props, {\n      onMouseEnter: function onMouseEnter() {\n        return !clickable && setVisible(true);\n      },\n      onMouseLeave: function onMouseLeave() {\n        return !clickable && setVisible(false);\n      },\n      onTouchStart: function onTouchStart() {\n        return !clickable && setVisible(true);\n      },\n      onTouchEnd: function onTouchEnd() {\n        return !clickable && setVisible(false);\n      },\n      onMouseDown: function onMouseDown() {\n        return clickable && setVisible(!visible);\n      },\n      innerRef: ref,\n      \"data-popper\": id\n    })) : React.createElement(Wrapper.type, _extends({}, Wrapper.props, {\n      onMouseEnter: function onMouseEnter() {\n        return !clickable && setVisible(true);\n      },\n      onMouseLeave: function onMouseLeave() {\n        return !clickable && setVisible(false);\n      },\n      onTouchStart: function onTouchStart() {\n        return !clickable && setVisible(true);\n      },\n      onTouchEnd: function onTouchEnd() {\n        return !clickable && setVisible(false);\n      },\n      onMouseDown: function onMouseDown() {\n        return clickable && setVisible(!visible);\n      },\n      ref: ref,\n      \"data-popper\": id\n    }));\n  }), visible && Content.props.children && React.createElement(Tag, {\n    style: style\n  }, React.createElement(Popper$1, {\n    modifiers: modifiers,\n    eventsEnabled: true,\n    positionFixed: false,\n    placement: placement\n  }, function (_ref3) {\n    var placement = _ref3.placement,\n        ref = _ref3.ref,\n        style = _ref3.style,\n        arrowProps = _ref3.arrowProps;\n    return React.createElement(Tag, {\n      ref: ref,\n      style: style,\n      \"data-placement\": placement,\n      className: tooltipClasses,\n      \"data-popper\": id\n    }, React.createElement(Content.type, _extends({}, Content.props, {\n      className: contentClasses\n    }), Content.props.children), React.createElement(\"span\", {\n      ref: arrowProps.ref,\n      style: arrowProps.style,\n      \"data-placement\": placement,\n      className: \"arrow\"\n    }));\n  })));\n};\n\nPopper.propTypes = {\n  children: propTypes.node,\n  clickable: propTypes.bool,\n  domElement: propTypes.bool,\n  modifiers: propTypes.object,\n  id: propTypes.string,\n  isVisible: propTypes.bool,\n  placement: propTypes.string,\n  popover: propTypes.bool,\n  style: propTypes.objectOf(propTypes.string),\n  tag: propTypes.string\n};\nPopper.defaultProps = {\n  clickable: false,\n  domElement: false,\n  id: 'popper',\n  isVisible: false,\n  placement: 'top',\n  popover: false,\n  style: {\n    display: 'inline-block'\n  },\n  tag: 'div'\n};\n\nvar PopoverBody = function PopoverBody(_ref) {\n  var attributes = _ref.attributes,\n      children = _ref.children,\n      className = _ref.className,\n      Tag = _ref.tag;\n  var classes = classNames('popover-body', className);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }), children);\n};\n\nPopoverBody.propTypes = {\n  children: propTypes.node,\n  className: propTypes.string,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string])\n};\nPopoverBody.defaultProps = {\n  tag: \"div\"\n};\n\nvar PopoverHeader = function PopoverHeader(_ref) {\n  var attributes = _ref.attributes,\n      children = _ref.children,\n      className = _ref.className,\n      Tag = _ref.tag;\n  var classes = classNames('popover-header', className);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }), children);\n};\n\nPopoverHeader.propTypes = {\n  children: propTypes.node,\n  className: propTypes.string,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string])\n};\nPopoverHeader.defaultProps = {\n  className: \"\",\n  tag: \"h3\"\n};\n\nvar Progress = function Progress(_ref) {\n  var animated = _ref.animated,\n      barClassName = _ref.barClassName,\n      children = _ref.children,\n      className = _ref.className,\n      color = _ref.color,\n      height = _ref.height,\n      material = _ref.material,\n      max = _ref.max,\n      min = _ref.min,\n      preloader = _ref.preloader,\n      striped = _ref.striped,\n      wrapperStyle = _ref.wrapperStyle,\n      value = _ref.value,\n      attributes = _objectWithoutProperties(_ref, [\"animated\", \"barClassName\", \"children\", \"className\", \"color\", \"height\", \"material\", \"max\", \"min\", \"preloader\", \"striped\", \"wrapperStyle\", \"value\"]);\n\n  var percent = (value - min) / (max - min) * 100;\n  var progressClasses = classNames('progress', material && 'md-progress', preloader && (color ? color + '-color' : 'primary-color') + '-dark', className);\n  var progressBarClasses = classNames(preloader ? 'indeterminate' : 'progress-bar', barClassName ? barClassName : null, animated ? 'progress-bar-animated' : null, color ? \"bg-\".concat(color) : null, striped || animated ? 'progress-bar-striped' : null);\n  var computedHeight = height ? height : children && '1rem';\n\n  var computedWrapperStyle = _objectSpread({}, wrapperStyle, {\n    height: computedHeight\n  });\n\n  return React.createElement(\"div\", _extends({\n    \"data-test\": \"progress\"\n  }, attributes, {\n    className: progressClasses,\n    style: computedWrapperStyle\n  }), React.createElement(\"div\", {\n    className: progressBarClasses,\n    style: {\n      width: \"\".concat(percent, \"%\"),\n      height: computedHeight\n    },\n    role: \"progressbar\",\n    \"aria-valuenow\": value,\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max\n  }, children));\n};\n\nProgress.propTypes = {\n  animated: propTypes.bool,\n  barClassName: propTypes.string,\n  children: propTypes.node,\n  className: propTypes.string,\n  color: propTypes.string,\n  height: propTypes.string,\n  material: propTypes.bool,\n  max: propTypes.number,\n  min: propTypes.number,\n  preloader: propTypes.bool,\n  striped: propTypes.bool,\n  wrapperStyle: propTypes.object,\n  value: propTypes.number\n};\nProgress.defaultProps = {\n  animated: false,\n  barClassName: '',\n  className: '',\n  color: 'indigo',\n  height: '',\n  material: false,\n  max: 100,\n  min: 0,\n  preloader: false,\n  striped: false,\n  wrapperStyle: {},\n  value: 0\n};\n\nvar Row = function Row(props) {\n  var className = props.className,\n      Tag = props.tag,\n      center = props.center,\n      start = props.start,\n      end = props.end,\n      around = props.around,\n      between = props.between,\n      top = props.top,\n      bottom = props.bottom,\n      middle = props.middle,\n      attributes = _objectWithoutProperties(props, [\"className\", \"tag\", \"center\", \"start\", \"end\", \"around\", \"between\", \"top\", \"bottom\", \"middle\"]);\n\n  var classes = classNames(\"row\", end && \"justify-content-end\", start && \"justify-content-start\", center && \"justify-content-center\", between && \"justify-content-between\", around && \"justify-content-around\", top && \"align-self-start\", middle && \"align-self-center\", bottom && \"align-self-end\", className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"row\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nRow.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  top: propTypes.bool,\n  bottom: propTypes.bool,\n  middle: propTypes.bool,\n  end: propTypes.bool,\n  start: propTypes.bool,\n  center: propTypes.bool,\n  between: propTypes.bool,\n  around: propTypes.bool\n};\nRow.defaultProps = {\n  tag: \"div\"\n};\nvar propTypes$2 = {\n  activeItem: propTypes.any,\n  tabId: propTypes.any,\n  className: propTypes.string\n};\n\nvar TabContent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TabContent, _React$Component);\n\n  function TabContent(props) {\n    var _this;\n\n    _classCallCheck(this, TabContent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TabContent).call(this, props));\n    _this.state = {\n      activeItem: _this.props.activeItem\n    };\n    return _this;\n  }\n\n  _createClass(TabContent, [{\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      return {\n        activeItemId: this.state.activeItem\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var className = this.props.className;\n      var attributes = omit(this.props, Object.keys(propTypes$2));\n      var classes = classNames(\"tab-content\", className);\n      return React.createElement(\"div\", _extends({\n        \"data-test\": \"tabContent\"\n      }, attributes, {\n        className: classes\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      return prevState.activeItem !== nextProps.activeItem ? {\n        activeItem: nextProps.activeItem\n      } : null;\n    }\n  }]);\n\n  return TabContent;\n}(React.Component);\n\nTabContent.childContextTypes = {\n  activeItemId: propTypes.any\n};\nTabContent.propTypes = propTypes$2;\n\nvar TabPane =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TabPane, _React$Component);\n\n  function TabPane() {\n    _classCallCheck(this, TabPane);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TabPane).apply(this, arguments));\n  }\n\n  _createClass(TabPane, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          tabId = _this$props.tabId,\n          attributes = _objectWithoutProperties(_this$props, [\"className\", \"tabId\"]);\n\n      var classes = classNames('tab-pane', {\n        active: tabId === this.context.activeItemId\n      }, className);\n      return React.createElement(\"div\", _extends({\n        \"data-test\": \"tab-pane\"\n      }, attributes, {\n        className: classes,\n        role: \"tabpanel\"\n      }));\n    }\n  }]);\n\n  return TabPane;\n}(React.Component);\n\nTabPane.contextTypes = {\n  activeItemId: propTypes.any\n};\nTabPane.propTypes = {\n  tabId: propTypes.any,\n  className: propTypes.string\n};\n\nvar TableHead = function TableHead(props) {\n  var _classNames;\n\n  var children = props.children,\n      color = props.color,\n      columns = props.columns,\n      textWhite = props.textWhite,\n      attributes = _objectWithoutProperties(props, [\"children\", \"color\", \"columns\", \"textWhite\"]);\n\n  var isTheadColor = color === 'dark' || color === 'light';\n  var classes = classNames((_classNames = {\n    'text-white': textWhite\n  }, _defineProperty(_classNames, \"thead-\".concat(color), color && isTheadColor), _defineProperty(_classNames, \"\".concat(color), color && !isTheadColor), _classNames));\n  return React.createElement(\"thead\", _extends({\n    \"data-test\": \"table-head\"\n  }, attributes, {\n    className: classes\n  }), columns && React.createElement(\"tr\", null, columns.map(function (col) {\n    return React.createElement(\"th\", {\n      key: col.field,\n      className: col.hasOwnProperty('minimal') ? \"th-\".concat(col.minimal) : ''\n    }, col.label);\n  })), children);\n};\n\nTableHead.propTypes = {\n  children: propTypes.node,\n  color: propTypes.string,\n  columns: propTypes.arrayOf(propTypes.object),\n  textWhite: propTypes.bool\n};\nTableHead.defaultProps = {\n  textWhite: false\n};\nvar TreeviewContext = React.createContext();\n\nvar Treeview = function Treeview(props) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      active = _useState2[0],\n      setActive = _useState2[1];\n\n  useEffect(function () {\n    if (props.getValue) {\n      props.getValue({\n        item: active ? active.closest('li') : active,\n        value: active ? active.closest('li').childNodes[1].textContent : active\n      });\n    }\n  }, [active, props]);\n\n  var getActive = function getActive(target) {\n    setActive(target);\n    return target;\n  };\n\n  var theme = props.theme,\n      children = props.children,\n      className = props.className,\n      getValue = props.getValue,\n      header = props.header,\n      listClassName = props.listClassName,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"theme\", \"children\", \"className\", \"getValue\", \"header\", \"listClassName\", \"tag\"]);\n\n  var classes = classNames('border', theme ? \"treeview-\".concat(theme) : 'treeview', className);\n  var ulClasses = classNames('list-unstyled', header ? 'pb-2 mb-1' : 'py-2 my-1', theme && \"treeview-\".concat(theme, \"-list\"), theme === 'animated' || !theme && 'pl-3', listClassName);\n  var head = header && React.createElement(React.Fragment, null, React.createElement(\"h6\", {\n    className: \"pt-3 pl-3\"\n  }, header), React.createElement(\"hr\", null));\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }), head, React.createElement(\"ul\", {\n    className: ulClasses\n  }, React.createElement(TreeviewContext.Provider, {\n    value: {\n      active: active,\n      theme: theme,\n      getActive: getActive\n    }\n  }, children)));\n};\n\nTreeview.propTypes = {\n  className: propTypes.string,\n  header: propTypes.string,\n  listClassName: propTypes.string,\n  tag: propTypes.string,\n  theme: propTypes.string,\n  getValue: propTypes.func\n};\nTreeview.defaultProps = {\n  tag: 'div',\n  theme: '',\n  getValue: function getValue() {}\n};\n\nvar TreeviewItem = function TreeviewItem(props) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      target = _useState2[0],\n      setTarget = _useState2[1];\n\n  var targetRef = useRef(null);\n\n  var className = props.className,\n      disabled = props.disabled,\n      disabledClassName = props.disabledClassName,\n      fab = props.fab,\n      fal = props.fal,\n      far = props.far,\n      icon = props.icon,\n      opened = props.opened,\n      Tag = props.tag,\n      title = props.title,\n      attributes = _objectWithoutProperties(props, [\"className\", \"disabled\", \"disabledClassName\", \"fab\", \"fal\", \"far\", \"icon\", \"opened\", \"tag\", \"title\"]);\n\n  var _useContext = useContext(TreeviewContext),\n      theme = _useContext.theme,\n      active = _useContext.active,\n      getActive = _useContext.getActive;\n\n  useEffect(function () {\n    if (targetRef && targetRef.current) {\n      setTarget(targetRef.current);\n      opened && getActive(targetRef.current);\n    }\n  }, []);\n\n  var handleClick = function handleClick() {\n    return target.classList.contains('opened') ? getActive(null) : getActive(target);\n  };\n\n  var classes = classNames(disabled && disabledClassName, theme && \"treeview-\".concat(theme, \"-items treeview-\").concat(theme, \"-element closed mb-1\"), active === target && !active.classList.contains('opened') ? 'opened' : '', className);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: targetRef,\n    onMouseDown: !disabled ? handleClick : null,\n    style: {\n      transform: 'translateY(0.3em)'\n    }\n  }), React.createElement(Fa, {\n    className: \"mr-2\",\n    fab: fab,\n    fal: fal,\n    far: far,\n    icon: icon\n  }), React.createElement(\"span\", null, title));\n};\n\nTreeviewItem.propTypes = {\n  className: propTypes.string,\n  disabled: propTypes.bool,\n  disabledClassName: propTypes.string,\n  fab: propTypes.bool,\n  fal: propTypes.bool,\n  far: propTypes.bool,\n  icon: propTypes.string,\n  opened: propTypes.bool,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string])\n};\nTreeviewItem.defaultProps = {\n  disabled: false,\n  fab: false,\n  fal: false,\n  far: false,\n  icon: 'folder-open',\n  opened: false,\n  tag: 'li'\n};\n\nvar TreeviewList = function TreeviewList(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      opened = _useState2[0],\n      setOpen = _useState2[1];\n\n  useEffect(function () {\n    setOpen(props.opened);\n  }, [props.opened]);\n\n  var handleSwitch = function handleSwitch() {\n    return setOpen(!opened);\n  };\n\n  var children = props.children,\n      className = props.className,\n      disabled = props.disabled,\n      disabledClassName = props.disabledClassName,\n      fab = props.fab,\n      fal = props.fal,\n      far = props.far,\n      icon = props.icon,\n      _ = props.opened,\n      Tag = props.tag,\n      title = props.title,\n      attributes = _objectWithoutProperties(props, [\"children\", \"className\", \"disabled\", \"disabledClassName\", \"fab\", \"fal\", \"far\", \"icon\", \"opened\", \"tag\", \"title\"]);\n\n  var _useContext = useContext(TreeviewContext),\n      theme = _useContext.theme;\n\n  var nestedClasses = classNames('nested', opened && 'active');\n  var folder = classNames(theme && \"closed treeview-\".concat(theme, \"-element d-block\"), !children && 'ml-2', opened && 'opened', disabled && disabledClassName);\n  var classes = classNames(theme && \"treeview-\".concat(theme, \"-items px-0\"), className);\n  var iconClasses = classNames(theme ? 'mx-2' : 'mr-2');\n  var child = children && React.createElement(\"ul\", {\n    className: nestedClasses,\n    style: {\n      height: 'calc(100% + 0.6rem)',\n      marginLeft: '2px'\n    }\n  }, children);\n  var collapse = theme && React.createElement(Collapse, {\n    isOpen: opened\n  }, child);\n  var iconArrow = theme !== 'colorful' ? 'angle-right' : opened ? 'minus-circle' : 'plus-circle';\n  var arrow = children && React.createElement(Fa, {\n    icon: iconArrow,\n    rotate: theme !== 'colorful' ? opened ? '90 down' : '0' : '',\n    className: \"rotate\"\n  });\n  var btn = children && React.createElement(Button, {\n    flat: true,\n    className: \"m-0 py-0 px-1 mr-1 z-depth-0\",\n    onClick: handleSwitch\n  }, arrow);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }), React.createElement(\"span\", {\n    className: folder,\n    onClick: !disabled && theme ? handleSwitch : null\n  }, theme ? arrow : btn, React.createElement(\"span\", null, React.createElement(Fa, {\n    className: iconClasses,\n    fab: fab,\n    fal: fal,\n    far: far,\n    icon: icon\n  }), title)), collapse || child);\n};\n\nTreeviewList.propTypes = {\n  className: propTypes.string,\n  disabled: propTypes.bool,\n  disabledClassName: propTypes.string,\n  fab: propTypes.bool,\n  fal: propTypes.bool,\n  far: propTypes.bool,\n  icon: propTypes.string,\n  opened: propTypes.bool,\n  tag: propTypes.string\n};\nTreeviewList.defaultProps = {\n  disabled: false,\n  fab: false,\n  fal: false,\n  far: false,\n  icon: 'folder-open',\n  opened: false,\n  tag: 'li'\n};\nTreeviewList.contextTypes = {\n  theme: propTypes.string\n};\n\nvar Autocomplete =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Autocomplete, _Component);\n\n  function Autocomplete(props) {\n    var _this;\n\n    _classCallCheck(this, Autocomplete);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Autocomplete).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"outsideClickHandler\", function (e) {\n      _this.suggestionsList && e.target !== _this.suggestionsList && _this.setState({\n        choosed: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"filterRepeated\", function (data) {\n      return data.filter(function (el, index) {\n        return data.indexOf(el) === index;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleInput\", function (e) {\n      var value = e.target.value;\n\n      _this.setState({\n        value: value,\n        choosed: false,\n        focusedListItem: 0\n      });\n\n      if (value !== '') {\n        _this.setSuggestions(value);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setSuggestions\", function (value) {\n      var filteredSuggestions = _this.state.suggestions.filter(function (suggest) {\n        return suggest.toLowerCase().includes(value.toLowerCase().trim());\n      });\n\n      _this.setState({\n        filteredSuggestions: filteredSuggestions\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClear\", function () {\n      return _this.setState({\n        value: '',\n        focusedListItem: 0\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSelect\", function () {\n      var value = _this.state.filteredSuggestions[_this.state.focusedListItem];\n\n      if (value) {\n        _this.setState({\n          value: value,\n          focusedListItem: 0,\n          choosed: true\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"keyDownHandler\", function (e) {\n      var _this$state = _this.state,\n          filteredSuggestions = _this$state.filteredSuggestions,\n          focusedListItem = _this$state.focusedListItem;\n\n      if (_this.suggestionsList && _this.state.filteredSuggestions) {\n        var suggestionsListNodes = _this.suggestionsList.childNodes;\n        suggestionsListNodes.length >= 5 && suggestionsListNodes[_this.state.focusedListItem].scrollIntoView({\n          block: \"center\",\n          behavior: \"smooth\"\n        });\n\n        if (e.keyCode === 13) {\n          _this.handleSelect();\n\n          e.target.blur();\n        }\n\n        e.keyCode === 40 && focusedListItem < filteredSuggestions.length - 1 && _this.setState({\n          focusedListItem: focusedListItem + 1\n        });\n        e.keyCode === 38 && focusedListItem > 0 && _this.setState({\n          focusedListItem: focusedListItem - 1\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateFocus\", function (index) {\n      return _this.setState({\n        focusedListItem: index\n      });\n    });\n\n    _this.state = {\n      value: props.value || props.valueDefault,\n      suggestions: [],\n      choosed: false,\n      filteredSuggestions: [],\n      focusedListItem: 0\n    };\n    _this.suggestionsList = null;\n    return _this;\n  }\n\n  _createClass(Autocomplete, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        suggestions: this.filterRepeated(this.props.data)\n      });\n      window.addEventListener('click', this.outsideClickHandler);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      prevState.value !== this.state.value && this.props.getValue && this.props.getValue(this.state.value);\n      prevProps.value !== this.props.value && this.setState({\n        value: this.props.value\n      });\n      prevProps.data !== this.props.data && this.setState({\n        suggestions: this.filterRepeated(this.props.data)\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('click', this.outsideClickHandler);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state2 = this.state,\n          value = _this$state2.value,\n          filteredSuggestions = _this$state2.filteredSuggestions,\n          choosed = _this$state2.choosed;\n      var _this$props = this.props,\n          clear = _this$props.clear,\n          clearColor = _this$props.clearColor,\n          clearSize = _this$props.clearSize,\n          clearClass = _this$props.clearClass,\n          disabled = _this$props.disabled,\n          id = _this$props.id,\n          className = _this$props.className,\n          label = _this$props.label,\n          icon = _this$props.icon,\n          iconBrand = _this$props.iconBrand,\n          iconClass = _this$props.iconClass,\n          iconLight = _this$props.iconLight,\n          iconRegular = _this$props.iconRegular,\n          iconSize = _this$props.iconSize,\n          size = _this$props.size,\n          labelClass = _this$props.labelClass,\n          placeholder = _this$props.placeholder,\n          valueDefault = _this$props.valueDefault;\n      var btnStyles = classNames(clearClass, 'mdb-autocomplete-clear');\n      return React.createElement(\"div\", {\n        style: {\n          position: \"relative\"\n        }\n      }, React.createElement(Input, {\n        icon: icon,\n        iconSize: iconSize,\n        iconBrand: iconBrand,\n        iconLight: iconLight,\n        iconRegular: iconRegular,\n        iconClass: iconClass,\n        id: id,\n        className: className,\n        label: label,\n        labelClass: labelClass,\n        hint: placeholder,\n        disabled: disabled,\n        value: value,\n        valueDefault: valueDefault,\n        onChange: this.handleInput,\n        onKeyDown: this.keyDownHandler,\n        size: size\n      }, clear && value && React.createElement(\"button\", {\n        onClick: this.handleClear,\n        className: btnStyles,\n        style: {\n          visibility: \"visible\"\n        }\n      }, React.createElement(\"svg\", {\n        fill: clearColor,\n        height: clearSize,\n        viewBox: \"0 0 24 24\",\n        width: clearSize,\n        xmlns: \"https://www.w3.org/2000/svg\"\n      }, React.createElement(\"path\", {\n        d: \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n      }), React.createElement(\"path\", {\n        d: \"M0 0h24v24H0z\",\n        fill: \"none\"\n      })))), value && !choosed && React.createElement(\"ul\", {\n        ref: function ref(list) {\n          return _this2.suggestionsList = list;\n        },\n        className: \"mdb-autocomplete-wrap\",\n        style: {\n          marginTop: \"-15px\"\n        },\n        onClick: this.handleSelect\n      }, filteredSuggestions.map(function (el, index) {\n        return React.createElement(\"li\", {\n          key: el + index,\n          className: \"list-item\",\n          style: {\n            background: \"\".concat(_this2.state.focusedListItem === index ? '#eee' : '#fff')\n          },\n          onMouseEnter: function onMouseEnter() {\n            return _this2.updateFocus(index);\n          }\n        }, el);\n      })));\n    }\n  }]);\n\n  return Autocomplete;\n}(Component);\n\nAutocomplete.propTypes = {\n  clear: propTypes.bool,\n  clearColor: propTypes.string,\n  clearSize: propTypes.string,\n  data: propTypes.arrayOf(propTypes.string),\n  disabled: propTypes.bool,\n  getValue: propTypes.func,\n  id: propTypes.string,\n  label: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.object]),\n  labelClass: propTypes.string,\n  icon: propTypes.string,\n  iconBrand: propTypes.bool,\n  iconLight: propTypes.bool,\n  iconRegular: propTypes.bool,\n  iconSize: propTypes.string,\n  iconClassName: propTypes.string,\n  placeholder: propTypes.string,\n  valueDefault: propTypes.string\n};\nAutocomplete.defaultProps = {\n  clear: false,\n  clearColor: \"#a6a6a6\",\n  clearSize: \"24\",\n  data: [],\n  disabled: false,\n  id: \"\",\n  label: \"\",\n  className: \"\",\n  clearClass: \"\",\n  labelClass: \"\",\n  icon: \"\",\n  iconBrand: false,\n  iconSize: \"\",\n  iconLight: false,\n  iconRegular: false,\n  iconClassName: \"\",\n  placeholder: \"\",\n  valueDefault: \"\"\n};\n\nvar Avatar = function Avatar(props) {\n  var className = props.className,\n      Tag = props.tag,\n      round = props.round,\n      circle = props.circle,\n      attributes = _objectWithoutProperties(props, [\"className\", \"tag\", \"round\", \"circle\"]);\n\n  var classes = classNames(\"avatar\", round && \"rounded\", circle && \"rounded-circle\", className);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nAvatar.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  round: propTypes.bool,\n  circle: propTypes.bool\n};\nAvatar.defaultProps = {\n  tag: \"div\",\n  round: false,\n  circle: false\n};\n\nvar ButtonFixed =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ButtonFixed, _React$Component);\n\n  function ButtonFixed(props) {\n    var _this;\n\n    _classCallCheck(this, ButtonFixed);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ButtonFixed).call(this, props));\n    _this.state = {\n      cursorPos: {}\n    };\n    _this.onClick = _this.onClick.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(ButtonFixed, [{\n    key: \"handleClick\",\n    value: function handleClick(e) {\n      // Get Cursor Position\n      e.preventDefault();\n      var cursorPos = {\n        top: e.clientY,\n        left: e.clientX,\n        time: Date.now()\n      };\n      this.setState({\n        cursorPos: cursorPos\n      });\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(e) {\n      if (this.props.disabled) {\n        e.preventDefault();\n        return;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          active = _this$props.active,\n          block = _this$props.block,\n          className = _this$props.className,\n          color = _this$props.color,\n          outline = _this$props.outline,\n          size = _this$props.size,\n          rounded = _this$props.rounded,\n          gradient = _this$props.gradient,\n          floating = _this$props.floating,\n          flat = _this$props.flat,\n          role = _this$props.role,\n          type = _this$props.type,\n          icon = _this$props.icon,\n          iconBrand = _this$props.iconBrand,\n          iconClass = _this$props.iconClass,\n          iconLight = _this$props.iconLight,\n          iconRegular = _this$props.iconRegular,\n          iconSize = _this$props.iconSize,\n          innerRef = _this$props.innerRef,\n          topSection = _this$props.topSection,\n          attributes = _objectWithoutProperties(_this$props, [\"active\", \"block\", \"className\", \"color\", \"outline\", \"size\", \"rounded\", \"gradient\", \"floating\", \"flat\", \"role\", \"type\", \"icon\", \"iconBrand\", \"iconClass\", \"iconLight\", \"iconRegular\", \"iconSize\", \"innerRef\", \"topSection\"]);\n\n      var buttonFixedClasses = classNames(\"fixed-action-btn active\");\n      var classes = classNames(floating ? \"btn-floating\" : \"btn\", flat ? \"btn-flat\" : gradient ? \"\".concat(gradient, \"-gradient\") : \"\".concat(color), size ? \"btn-\".concat(size) : false, rounded ? \"btn-rounded\" : false, block ? \"btn-block\" : false, \"Ripple-parent\", className, {\n        active: active,\n        disabled: this.props.disabled\n      });\n      return React.createElement(\"div\", _extends({\n        className: buttonFixedClasses,\n        ref: innerRef,\n        style: {\n          bottom: \"45px\",\n          right: \"24px\"\n        }\n      }, attributes), React.createElement(\"a\", {\n        href: this.props.topSection ? this.props.topSection : \"#\",\n        className: classes,\n        onClick: this.onClick,\n        onMouseDown: this.handleClick.bind(this),\n        onTouchStart: this.handleClick.bind(this)\n      }, icon && React.createElement(Fa, {\n        icon: icon,\n        size: iconSize,\n        brand: iconBrand,\n        light: iconLight,\n        regular: iconRegular,\n        className: iconClass\n      }), this.props.disabled ? false : React.createElement(Waves, {\n        cursorPos: this.state.cursorPos,\n        outline: outline,\n        flat: flat\n      })), React.createElement(\"ul\", {\n        className: \"list-unstyled\"\n      }, this.props.children));\n    }\n  }]);\n\n  return ButtonFixed;\n}(React.Component);\n\nButtonFixed.defaultProps = {\n  color: \"default\"\n};\nButtonFixed.propTypes = {\n  active: propTypes.bool,\n  block: propTypes.bool,\n  color: propTypes.string,\n  gradient: propTypes.string,\n  role: propTypes.string,\n  type: propTypes.string,\n  disabled: propTypes.bool,\n  outline: propTypes.bool,\n  rounded: propTypes.bool,\n  floating: propTypes.bool,\n  flat: propTypes.bool,\n  icon: propTypes.string,\n  iconBrand: propTypes.bool,\n  iconClass: propTypes.string,\n  iconLight: propTypes.bool,\n  iconRegular: propTypes.bool,\n  iconSize: propTypes.string,\n  innerRef: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  onClick: propTypes.func,\n  size: propTypes.string,\n  children: propTypes.node,\n  className: propTypes.string,\n  topSection: propTypes.string\n};\n\nvar ButtonFixed$1 =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ButtonFixed, _React$Component);\n\n  function ButtonFixed(props) {\n    var _this;\n\n    _classCallCheck(this, ButtonFixed);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ButtonFixed).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onClick\", function (e) {\n      if (_this.props.disabled) {\n        e.preventDefault();\n        return;\n      }\n\n      _this.props.onClick && _this.props.onClick();\n    });\n\n    _this.state = {\n      cursorPos: {},\n      buttonStyle: {\n        transform: \"scaleY(0.4) scaleX(0.4) translateY(40px) translateX(0)\",\n        opacity: \"0\"\n      }\n    };\n    return _this;\n  }\n\n  _createClass(ButtonFixed, [{\n    key: \"handleClick\",\n    value: function handleClick(e) {\n      // Get Cursor Position\n      var cursorPos = {\n        top: e.clientY,\n        left: e.clientX,\n        time: Date.now()\n      };\n      this.setState({\n        cursorPos: cursorPos\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          active = _this$props.active,\n          block = _this$props.block,\n          className = _this$props.className,\n          color = _this$props.color,\n          outline = _this$props.outline,\n          size = _this$props.size,\n          rounded = _this$props.rounded,\n          gradient = _this$props.gradient,\n          floating = _this$props.floating,\n          flat = _this$props.flat,\n          role = _this$props.role,\n          type = _this$props.type,\n          icon = _this$props.icon,\n          iconBrand = _this$props.iconBrand,\n          iconClass = _this$props.iconClass,\n          iconLight = _this$props.iconLight,\n          iconRegular = _this$props.iconRegular,\n          iconSize = _this$props.iconSize,\n          innerRef = _this$props.innerRef,\n          buttonStyle = _this$props.buttonStyle,\n          attributes = _objectWithoutProperties(_this$props, [\"active\", \"block\", \"className\", \"color\", \"outline\", \"size\", \"rounded\", \"gradient\", \"floating\", \"flat\", \"role\", \"type\", \"icon\", \"iconBrand\", \"iconClass\", \"iconLight\", \"iconRegular\", \"iconSize\", \"innerRef\", \"buttonStyle\"]);\n\n      var classes = classNames(size && \"btn-\".concat(size), \"btn-floating\", color ? color : false, \"Ripple-parent\", className);\n      return React.createElement(\"li\", null, React.createElement(\"a\", _extends({}, attributes, {\n        style: this.props.buttonStyle,\n        onClick: this.onClick,\n        onMouseDown: this.handleClick.bind(this),\n        onTouchStart: this.handleClick.bind(this),\n        className: classes\n      }), icon && React.createElement(Fa, {\n        icon: icon,\n        size: iconSize,\n        brand: iconBrand,\n        light: iconLight,\n        regular: iconRegular,\n        className: iconClass\n      }), this.props.disabled ? false : React.createElement(Waves, {\n        cursorPos: this.state.cursorPos,\n        outline: outline,\n        flat: flat\n      })));\n    }\n  }]);\n\n  return ButtonFixed;\n}(React.Component);\n\nButtonFixed$1.defaultProps = {\n  color: \"default\"\n};\nButtonFixed$1.propTypes = {\n  active: propTypes.bool,\n  block: propTypes.bool,\n  color: propTypes.string,\n  gradient: propTypes.string,\n  role: propTypes.string,\n  type: propTypes.string,\n  disabled: propTypes.bool,\n  outline: propTypes.bool,\n  rounded: propTypes.bool,\n  floating: propTypes.bool,\n  flat: propTypes.bool,\n  innerRef: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  onClick: propTypes.func,\n  size: propTypes.oneOf(['lg', 'sm']),\n  children: propTypes.node,\n  className: propTypes.string,\n  icon: propTypes.string,\n  iconBrand: propTypes.bool,\n  iconClass: propTypes.string,\n  iconLight: propTypes.bool,\n  iconRegular: propTypes.bool,\n  iconSize: propTypes.string,\n  buttonStyle: propTypes.object\n};\n\nvar CardUp = function CardUp(props) {\n  var className = props.className,\n      Tag = props.tag,\n      color = props.color,\n      gradient = props.gradient,\n      attributes = _objectWithoutProperties(props, [\"className\", \"tag\", \"color\", \"gradient\"]);\n\n  var classes = classNames(\"card-up\", color && color + \"-color\", gradient && gradient + \"-gradient\", className);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCardUp.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string\n};\nCardUp.defaultProps = {\n  tag: \"div\"\n};\nvar css$8 = \".chip.chip-md {\\n  height: 42px;\\n  line-height: 42px;\\n  border-radius: 21px;\\n}\\n.chip.chip-md img {\\n  height: 42px;\\n  width: 42px;\\n}\\n.chip.chip-md .close {\\n  height: 42px;\\n  line-height: 42px;\\n  border-radius: 21px;\\n}\\n.chip.chip-lg {\\n  height: 52px;\\n  line-height: 52px;\\n  border-radius: 26px;\\n}\\n.chip.chip-lg img {\\n  height: 52px;\\n  width: 52px;\\n}\\n.chip.chip-lg .close {\\n  height: 52px;\\n  line-height: 52px;\\n  border-radius: 26px;\\n}\\n\";\nstyleInject(css$8);\n\nvar Chip = function Chip(props) {\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      cursorPos = _useState2[0],\n      setCursorPos = _useState2[1];\n\n  var handleClick = function handleClick(e) {\n    // Get Cursor Position\n    e.stopPropagation();\n    e.preventDefault();\n    var cursorPos = {\n      top: e.clientY,\n      left: e.clientX,\n      time: Date.now()\n    };\n    setCursorPos(cursorPos);\n  };\n\n  var handleCloseClick = function handleCloseClick(e) {\n    if (props.handleClose) {\n      props.handleClose(e);\n    }\n  };\n\n  var className = props.className,\n      Tag = props.tag,\n      size = props.size,\n      bgColor = props.bgColor,\n      text = props.text,\n      gradient = props.gradient,\n      src = props.src,\n      alt = props.alt,\n      close = props.close,\n      waves = props.waves,\n      handleClose = props.handleClose,\n      attributes = _objectWithoutProperties(props, [\"className\", \"tag\", \"size\", \"bgColor\", \"text\", \"gradient\", \"src\", \"alt\", \"close\", \"waves\", \"handleClose\"]);\n\n  var classes = classNames(\"chip\", size && \"chip-\" + size, bgColor && bgColor, text && text + \"-text\", gradient && gradient + \"-gradient\", waves && \"Ripple-parent\", className);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    onMouseDown: handleClick,\n    onTouchStart: handleClick\n  }), src && React.createElement(\"img\", {\n    src: src,\n    alt: alt\n  }), props.children, waves && React.createElement(Waves, {\n    cursorPos: cursorPos\n  }), close && React.createElement(Fa, {\n    icon: \"times\",\n    className: \"close\",\n    onClick: handleCloseClick\n  }));\n};\n\nChip.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  size: propTypes.string,\n  bgColor: propTypes.string,\n  text: propTypes.string,\n  gradient: propTypes.string,\n  src: propTypes.string,\n  alt: propTypes.string,\n  close: propTypes.bool,\n  handleClose: propTypes.func\n};\nChip.defaultProps = {\n  tag: \"div\"\n};\n\nvar ChipsInput =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ChipsInput, _Component);\n\n  function ChipsInput(props) {\n    var _this;\n\n    _classCallCheck(this, ChipsInput);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChipsInput).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClick\", function () {\n      _this.setState({\n        isTouched: true\n      });\n\n      _this.inputRef.current.focus();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (e) {\n      _this.setState({\n        inputValue: e.target.value,\n        isReadyToDelete: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEnter\", function (e) {\n      // 1) get the value:\n      var newChipString = _this.inputRef.current.value; // 2) upon pressing Enter:\n\n      if (e.which === 13) {\n        // 3) if the string is empty or consists only of spaces: return\n        if (/^ *$/.test(newChipString)) {\n          return;\n        } // 3.5) of the string is already in the array, delete input value and return\n\n\n        if (_this.state.chipsList.includes(newChipString)) {\n          _this.setState({\n            inputValue: \"\"\n          });\n\n          return;\n        } // 4) else: add the input value to the array and reset it on input:\n\n\n        _this.setState({\n          inputValue: \"\",\n          chipsList: [].concat(_toConsumableArray(_this.state.chipsList), [newChipString])\n        });\n      } // 5) in case the keyboard events caused the input to be empty, prepare to delete chips:\n\n\n      if (_this.state.inputValue === \"\") {\n        _this.setState({\n          isReadyToDelete: true\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleBackspace\", function (e) {\n      // 1) if the input is already empty (is ready to delete chips) and Backspace is pressed:\n      if (_this.state.isReadyToDelete && e.which === 8) {\n        // 2) grab the array\n        var array = _this.state.chipsList; // 3) delete its last element\n        // const popTheArray = array.pop();\n        // 4) and update the state with the new array.\n\n        _this.setState({\n          chipsList: array\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClose\", function (param) {\n      return function (e) {\n        // Close functionality:\n        // 1) get the chips list from state:\n        var currentChipsList = _this.state.chipsList; // 2) check the chip's index in the said array:\n\n        var index = _this.state.chipsList.indexOf(param); // 3) delete the array item using splice:\n\n\n        currentChipsList.splice(index, 1); // 4) update state with the new chips list.\n\n        _this.setState({\n          chipsList: currentChipsList\n        });\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOutsideClick\", function () {\n      _this.setState({\n        isTouched: false\n      });\n    });\n\n    _this.state = {\n      chipsList: _this.props.chips,\n      inputValue: \"\",\n      isTouched: false,\n      isReadyToDelete: false\n    };\n    _this.inputRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(ChipsInput, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          className = _this$props.className,\n          Tag = _this$props.tag,\n          handleClose = _this$props.handleClose,\n          placeholder = _this$props.placeholder,\n          secondaryPlaceholder = _this$props.secondaryPlaceholder,\n          chipSize = _this$props.chipSize,\n          chipColor = _this$props.chipColor,\n          chipText = _this$props.chipText,\n          chipGradient = _this$props.chipGradient,\n          chipWaves = _this$props.chipWaves,\n          attributes = _objectWithoutProperties(_this$props, [\"className\", \"tag\", \"handleClose\", \"placeholder\", \"secondaryPlaceholder\", \"chipSize\", \"chipColor\", \"chipText\", \"chipGradient\", \"chipWaves\"]);\n\n      var renderedChips = this.state.chipsList.map(function (chip) {\n        return React.createElement(Chip, {\n          close: true,\n          handleClose: _this2.handleClose(chip),\n          key: chip.toString(),\n          size: chipSize,\n          bgColor: chipColor,\n          text: chipText,\n          gradient: chipGradient,\n          waves: chipWaves\n        }, chip);\n      });\n      var calculatePlaceholder;\n\n      if (this.state.chipsList.length < 1) {\n        calculatePlaceholder = placeholder;\n      } else {\n        calculatePlaceholder = secondaryPlaceholder;\n      }\n\n      var classes = classNames(\"chips\", this.state.isTouched && \"focus\", className);\n      return React.createElement(Tag, _extends({}, attributes, {\n        className: classes,\n        onClick: this.handleClick,\n        onKeyUp: this.handleBackspace\n      }), renderedChips, React.createElement(\"input\", {\n        className: \"input\",\n        type: \"text\",\n        placeholder: calculatePlaceholder,\n        ref: this.inputRef,\n        onKeyUp: this.handleEnter,\n        value: this.state.inputValue,\n        onChange: this.handleChange,\n        onBlur: this.handleOutsideClick\n      }));\n    }\n  }]);\n\n  return ChipsInput;\n}(Component);\n\nChipsInput.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  placeholder: propTypes.string,\n  secondaryPlaceholder: propTypes.string,\n  chipSize: propTypes.string,\n  chipColor: propTypes.string,\n  chipText: propTypes.string,\n  chipGradient: propTypes.string\n};\nChipsInput.defaultProps = {\n  tag: \"div\",\n  chips: []\n};\n\nvar CollapseHeader = function CollapseHeader(props) {\n  var className = props.className,\n      tagClassName = props.tagClassName,\n      children = props.children,\n      Tag = props.tag,\n      triggerOnClick = props.triggerOnClick,\n      attributes = _objectWithoutProperties(props, [\"className\", \"tagClassName\", \"children\", \"tag\", \"triggerOnClick\"]);\n\n  var classes = classNames(\"card-header\", className);\n  var tagClasses = classNames(\"mb-0\", tagClassName);\n  return React.createElement(\"div\", _extends({}, attributes, {\n    className: classes,\n    style: {\n      cursor: \"pointer\"\n    }\n  }), React.createElement(Tag, {\n    className: tagClasses\n  }, children));\n};\n\nCollapseHeader.defaultProps = {\n  tag: \"h5\"\n};\nCollapseHeader.propTypes = {\n  children: propTypes.node,\n  className: propTypes.string,\n  tagClassName: propTypes.string,\n  tag: propTypes.string,\n  triggerOnClick: propTypes.func\n};\nvar css$9 = \"/* fallback */\\n@font-face {\\n  font-family: 'Material Icons';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: url(https://fonts.gstatic.com/s/materialicons/v41/flUhRq6tzZclQEJ-Vdg-IuiaDsNc.woff2) format('woff2');\\n}\\n\\n.material-icons {\\n  font-family: 'Material Icons';\\n  font-weight: normal;\\n  font-style: normal;\\n  font-size: 24px;\\n  line-height: 1;\\n  letter-spacing: normal;\\n  text-transform: none;\\n  display: inline-block;\\n  white-space: nowrap;\\n  word-wrap: normal;\\n  direction: ltr;\\n  -webkit-font-feature-settings: 'liga';\\n  -webkit-font-smoothing: antialiased;\\n}\\n\";\nstyleInject(css$9);\n\nvar DatePicker =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DatePicker, _Component);\n\n  function DatePicker(props) {\n    var _this;\n\n    _classCallCheck(this, DatePicker);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DatePicker).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDateChange\", function (date) {\n      _this.setState({\n        selectedDate: date ? date._d : _this.props.value\n      });\n    });\n\n    _this.state = {\n      selectedDate: props.value || props.valueDefault,\n      muiTheme: createMuiTheme(_objectSpread({}, props.theme, {\n        typography: {\n          useNextVariants: true\n        }\n      }))\n    };\n    return _this;\n  }\n\n  _createClass(DatePicker, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.getValue && prevState.selectedDate !== this.state.selectedDate) {\n        this.props.getValue(this.state.selectedDate);\n      }\n\n      if (this.props.value !== prevProps.value) {\n        this.setState({\n          selectedDate: this.props.value\n        });\n      }\n\n      if (prevProps.theme !== this.props.theme) {\n        this.setState({\n          muiTheme: createMuiTheme(this.props.theme)\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          adornmentPosition = _this$props.adornmentPosition,\n          allowKeyboardControl = _this$props.allowKeyboardControl,\n          animateYearScrolling = _this$props.animateYearScrolling,\n          autoOk = _this$props.autoOk,\n          cancelLabel = _this$props.cancelLabel,\n          clearable = _this$props.clearable,\n          clearLabel = _this$props.clearLabel,\n          disableFuture = _this$props.disableFuture,\n          disableOpenOnEnter = _this$props.disableOpenOnEnter,\n          disablePast = _this$props.disablePast,\n          emptyLabel = _this$props.emptyLabel,\n          initialFocusedDate = _this$props.initialFocusedDate,\n          InputAdornmentProps = _this$props.InputAdornmentProps,\n          invalidDateMessage = _this$props.invalidDateMessage,\n          invalidLabel = _this$props.invalidLabel,\n          keyboard = _this$props.keyboard,\n          keyboardIcon = _this$props.keyboardIcon,\n          leftArrowIcon = _this$props.leftArrowIcon,\n          mask = _this$props.mask,\n          maxDate = _this$props.maxDate,\n          maxDateMessage = _this$props.maxDateMessage,\n          minDate = _this$props.minDate,\n          minDateMessage = _this$props.minDateMessage,\n          okLabel = _this$props.okLabel,\n          onInputChange = _this$props.onInputChange,\n          openToYearSelection = _this$props.openToYearSelection,\n          rightArrowIcon = _this$props.rightArrowIcon,\n          showTodayButton = _this$props.showTodayButton,\n          TextFieldComponent = _this$props.TextFieldComponent,\n          todayLabel = _this$props.todayLabel,\n          locale = _this$props.locale,\n          format = _this$props.format,\n          className = _this$props.className,\n          getValue = _this$props.getValue,\n          value = _this$props.value,\n          valueDefault = _this$props.valueDefault,\n          Tag = _this$props.tag,\n          attributes = _objectWithoutProperties(_this$props, [\"theme\", \"adornmentPosition\", \"allowKeyboardControl\", \"animateYearScrolling\", \"autoOk\", \"cancelLabel\", \"clearable\", \"clearLabel\", \"disableFuture\", \"disableOpenOnEnter\", \"disablePast\", \"emptyLabel\", \"initialFocusedDate\", \"InputAdornmentProps\", \"invalidDateMessage\", \"invalidLabel\", \"keyboard\", \"keyboardIcon\", \"leftArrowIcon\", \"mask\", \"maxDate\", \"maxDateMessage\", \"minDate\", \"minDateMessage\", \"okLabel\", \"onInputChange\", \"openToYearSelection\", \"rightArrowIcon\", \"showTodayButton\", \"TextFieldComponent\", \"todayLabel\", \"locale\", \"format\", \"className\", \"getValue\", \"value\", \"valueDefault\", \"tag\"]);\n\n      var classes = classNames('md-form', className);\n      return React.createElement(Tag, {\n        className: classes\n      }, React.createElement(MuiThemeProvider, {\n        theme: this.state.muiTheme\n      }, React.createElement(MuiPickersUtilsProvider, {\n        locale: locale,\n        moment: moment,\n        utils: MomentUtils\n      }, React.createElement(DatePicker$1, _extends({}, attributes, {\n        adornmentPosition: adornmentPosition,\n        allowKeyboardControl: allowKeyboardControl,\n        animateYearScrolling: animateYearScrolling,\n        autoOk: autoOk,\n        cancelLabel: cancelLabel,\n        clearable: clearable,\n        clearLabel: clearLabel,\n        disableFuture: disableFuture,\n        disableOpenOnEnter: disableOpenOnEnter,\n        disablePast: disablePast,\n        emptyLabel: emptyLabel,\n        initialFocusedDate: initialFocusedDate,\n        InputAdornmentProps: InputAdornmentProps,\n        invalidDateMessage: invalidDateMessage,\n        invalidLabel: invalidLabel,\n        keyboard: keyboard,\n        keyboardIcon: keyboardIcon,\n        leftArrowIcon: leftArrowIcon,\n        mask: mask,\n        maxDate: maxDate,\n        maxDateMessage: maxDateMessage,\n        minDate: minDate,\n        minDateMessage: minDateMessage,\n        okLabel: okLabel,\n        onInputChange: onInputChange,\n        openToYearSelection: openToYearSelection,\n        rightArrowIcon: rightArrowIcon,\n        showTodayButton: showTodayButton,\n        TextFieldComponent: TextFieldComponent,\n        todayLabel: todayLabel,\n        format: format || \"DD MMMM, YYYY\",\n        value: this.state.selectedDate,\n        onChange: this.handleDateChange\n      })))));\n    }\n  }]);\n\n  return DatePicker;\n}(Component);\n\nDatePicker.propTypes = {\n  theme: propTypes.object,\n  adornmentPosition: propTypes.string,\n  allowKeyboardControl: propTypes.bool,\n  animateYearScrolling: propTypes.bool,\n  autoOk: propTypes.bool,\n  cancelLabel: propTypes.node,\n  clearable: propTypes.bool,\n  clearLabel: propTypes.node,\n  disableFuture: propTypes.object,\n  disableOpenOnEnter: propTypes.bool,\n  disablePast: propTypes.bool,\n  emptyLabel: propTypes.string,\n  initialFocusedDate: propTypes.string,\n  InputAdornmentProps: propTypes.object,\n  invalidDateMessage: propTypes.node,\n  invalidLabel: propTypes.string,\n  keyboard: propTypes.bool,\n  keyboardIcon: propTypes.node,\n  leftArrowIcon: propTypes.node,\n  mask: propTypes.any,\n  maxDate: propTypes.string,\n  maxDateMessage: propTypes.node,\n  minDate: propTypes.string,\n  minDateMessage: propTypes.node,\n  okLabel: propTypes.node,\n  onInputChange: propTypes.func,\n  openToYearSelection: propTypes.bool,\n  rightArrowIcon: propTypes.node,\n  showTodayButton: propTypes.bool,\n  TextFieldComponent: propTypes.string,\n  todayLabel: propTypes.string,\n  locale: propTypes.string,\n  format: propTypes.string,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  getValue: propTypes.func,\n  value: propTypes.instanceOf(Date),\n  valueDefault: propTypes.instanceOf(Date)\n};\nDatePicker.defaultProps = {\n  theme: {},\n  tag: 'div',\n  value: null,\n  valueDefault: new Date(),\n  getValue: function getValue() {}\n};\n\nfunction RotatingCard(props) {\n  var className = props.className,\n      Tag = props.tag,\n      InnerTag = props.innerTag,\n      flipped = props.flipped,\n      attributes = _objectWithoutProperties(props, [\"className\", \"tag\", \"innerTag\", \"flipped\"]);\n\n  var classes = classNames(\"card-rotating effect__click\", props.flipped && \"flipped\", className);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: \"card-wrapper\"\n  }), React.createElement(InnerTag, {\n    className: classes\n  }, props.children));\n}\n\nRotatingCard.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  innerTag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  children: propTypes.node,\n  flipped: propTypes.bool\n};\nRotatingCard.defaultProps = {\n  tag: \"div\",\n  innerTag: \"div\",\n  flipped: false\n};\nvar css$a = \".file-field .file-field-right .file-path-wrapper {\\n  padding-left: 0;\\n  padding-right: 10px;\\n}\\n\";\nstyleInject(css$a);\n\nvar InputFile = function InputFile(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      files = _useState2[0],\n      setFiles = _useState2[1];\n\n  var fileChange = function fileChange(files) {\n    if (files.length > 0) {\n      if (files.length > 1) {\n        var filesNames = [];\n\n        for (var i = 0; i < files.length; i++) {\n          filesNames.push(files[i].name);\n        }\n\n        setFiles(filesNames);\n      } else {\n        setFiles(files[0].name);\n      }\n    } else {\n      setFiles(false);\n    }\n  };\n\n  var onChangeHandler = function onChangeHandler(e) {\n    fileChange(e.target.files);\n    props.getValue && props.getValue(e.target.files);\n  };\n\n  var resetFiles = function resetFiles() {\n    files && setFiles(false);\n  };\n\n  var className = props.className,\n      btnTitle = props.btnTitle,\n      btnColor = props.btnColor,\n      textFieldTitle = props.textFieldTitle,\n      multiple = props.multiple,\n      reset = props.reset,\n      resetClassName = props.resetClassName,\n      resetAriaLabel = props.resetAriaLabel,\n      reverse = props.reverse;\n  var btnClass = classNames(\"btn\", \"btn-\" + btnColor, \"btn-sm\", reverse ? \"float-right\" : \"float-left\");\n  var inputFieldClass = classNames(\"file-path\", \"validate\", files ? \"valid\" : false, className);\n  var wrapperClass = classNames(\"file-field\", \"md-form\", reverse && \"file-field-right\");\n  return React.createElement(\"div\", {\n    className: wrapperClass\n  }, React.createElement(\"div\", {\n    className: btnClass\n  }, React.createElement(\"span\", null, btnTitle), React.createElement(\"input\", {\n    multiple: multiple,\n    onChange: onChangeHandler,\n    type: \"file\"\n  })), React.createElement(\"div\", {\n    className: \"file-path-wrapper\"\n  }, React.createElement(\"input\", {\n    className: inputFieldClass,\n    type: \"text\",\n    placeholder: files ? files : textFieldTitle,\n    style: {\n      position: reset ? \"relative\" : null\n    }\n  })), reset && React.createElement(MDBCloseIcon, {\n    onClick: resetFiles,\n    className: resetClassName,\n    ariaLabel: resetAriaLabel ? resetAriaLabel : null,\n    style: {\n      position: \"absolute\",\n      top: \"50%\",\n      right: \"0\",\n      transform: \"translateY(-50%)\"\n    }\n  }));\n};\n\nInputFile.propTypes = {\n  className: propTypes.string,\n  btnTitle: propTypes.string,\n  btnColor: propTypes.string,\n  textFieldTitle: propTypes.string,\n  multiple: propTypes.bool,\n  reset: propTypes.bool,\n  resetClassName: propTypes.string,\n  resetAriaLabel: propTypes.string,\n  reverse: propTypes.bool\n};\nInputFile.defaultProps = {\n  btnTitle: \"Choose file\",\n  textFieldTitle: \"Upload your file\",\n  btnColor: \"primary\",\n  reset: false,\n  reverse: false\n};\nvar css$b = \".thumb {\\n  transition: top .2s, height .2s, width .2s, margin-left .2s;\\n}\\n\\ninput[type=\\\"range\\\"] {\\n  -webkit-appearance: none;\\n}\\n\\n/* thumb */\\n\\ninput[type=range]::-webkit-slider-thumb {\\n  -webkit-appearance: none;\\n  border: none;\\n  height: 14px;\\n  width: 14px;\\n  border-radius: 50%;\\n  background-color: #4285f4;\\n  transform-origin: 50% 50%;\\n  margin: -5px 0 0 0;\\n  transition: 0.3s; }\\n  input[type=range]:focus::-webkit-slider-runnable-track {\\n    background: #ccc; }\\n  input[type=range]::-moz-range-track {\\n    /*required for proper track sizing in FF*/\\n    height: 3px;\\n    background: #c2c0c2;\\n    border: none; }\\n  input[type=range]::-moz-range-thumb {\\n    border: none;\\n    height: 14px;\\n    width: 14px;\\n    border-radius: 50%;\\n    background: #4285f4;\\n    margin-top: -5px; }\\n  input[type=range]:-moz-focusring {\\n    /*hide the outline behind the border*/\\n    outline: 1px solid #ffffff;\\n    outline-offset: -1px; }\\n  input[type=range]:focus::-moz-range-track {\\n    background: #c2c0c2; }\\n  input[type=range]::-ms-track {\\n    height: 3px;\\n    background: transparent;\\n    /*remove bg colour from the track, we'll use ms-fill-lower and ms-fill-upper instead */\\n    border-color: transparent;\\n    /*leave room for the larger thumb to overflow with a transparent border */\\n    border-width: 6px 0;\\n    color: transparent;\\n    /*remove default tick marks*/ }\\n  input[type=range]::-ms-fill-lower {\\n    background: #c2c0c2; }\\n  input[type=range]::-ms-fill-upper {\\n    background: #c2c0c2; }\\n  input[type=range]::-ms-thumb {\\n    border: none;\\n    height: 14px;\\n    width: 14px;\\n    border-radius: 50%;\\n    background: #4285f4; }\\n  input[type=range]:focus::-ms-fill-lower {\\n    background: #c2c0c2; }\\n  input[type=range]:focus::-ms-fill-upper {\\n    background: #c2c0c2; }\";\nstyleInject(css$b);\n\nvar InputRange =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(InputRange, _React$Component);\n\n  function InputRange(props) {\n    var _this;\n\n    _classCallCheck(this, InputRange);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(InputRange).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      var input = _this.inputRef.current;\n      var inputWidth = input.offsetWidth;\n      var oneStep = inputWidth / (_this.props.max - _this.props.min);\n\n      _this.setState({\n        value: _this.props.value,\n        leftPosition: oneStep * _this.props.value - oneStep * _this.props.min,\n        oneStep: oneStep\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"rangeChange\", function (e) {\n      var newValue = e.target.value;\n\n      _this.setState({\n        value: newValue,\n        leftPosition: _this.state.oneStep * newValue - _this.state.oneStep * _this.props.min\n      });\n\n      _this.props.getValue && _this.props.getValue(e.target.value);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"rangeFocus\", function () {\n      _this.setState({\n        thumbActive: true,\n        thumbHeight: \"30px\",\n        thumbWidth: \"30px\",\n        thumbTop: \"-20px\",\n        thumbMarginLeft: \"-15px\"\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"rangeMouseLeave\", function () {\n      var input = _this.inputRef.current;\n      input.blur();\n\n      _this.setState({\n        thumbActive: false,\n        thumbHeight: 0,\n        thumbWidth: 0,\n        thumbTop: \"10px\",\n        thumbMarginLeft: \"-6px\"\n      });\n    });\n\n    _this.state = {\n      value: false,\n      leftPosition: false,\n      thumbActive: false,\n      thumbHeight: 0,\n      thumbWidth: 0,\n      thumbTop: \"10px\",\n      thumbMarginLeft: \"-6px\",\n      input: \"input\",\n      oneStep: \"\"\n    };\n    _this.inputRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(InputRange, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          formClassName = _this$props.formClassName,\n          min = _this$props.min,\n          max = _this$props.max,\n          step = _this$props.step,\n          Tag = _this$props.tag;\n      var inputClass = classNames(className);\n      var formClass = classNames(\"range-field\", formClassName);\n      var thumbClass = classNames(\"thumb\", this.state.thumbActive ? \"active\" : false);\n      return React.createElement(Tag, {\n        className: formClass\n      }, React.createElement(\"input\", {\n        ref: this.inputRef,\n        className: inputClass,\n        min: min,\n        max: max,\n        step: step,\n        value: this.state.value,\n        type: \"range\",\n        onChange: this.rangeChange,\n        onFocus: this.rangeFocus,\n        onMouseLeave: this.rangeMouseLeave\n      }), React.createElement(\"span\", {\n        className: thumbClass,\n        style: {\n          left: this.state.leftPosition,\n          height: this.state.thumbHeight,\n          width: this.state.thumbWidth,\n          top: this.state.thumbTop,\n          marginLeft: this.state.thumbMarginLeft\n        }\n      }, React.createElement(\"span\", {\n        className: \"value\"\n      }, this.state.value)));\n    }\n  }]);\n\n  return InputRange;\n}(React.Component);\n\nInputRange.propTypes = {\n  className: propTypes.string,\n  min: propTypes.number,\n  max: propTypes.number,\n  value: propTypes.number,\n  getValue: propTypes.oneOfType([propTypes.func, propTypes.bool]),\n  step: propTypes.number,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string])\n};\nInputRange.defaultProps = {\n  min: 0,\n  max: 100,\n  value: 50,\n  getValue: false,\n  tag: \"div\"\n};\n\nvar InputSwitch =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(InputSwitch, _React$Component);\n\n  function InputSwitch(props) {\n    var _this;\n\n    _classCallCheck(this, InputSwitch);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(InputSwitch).call(this, props));\n    _this.state = {\n      value: false\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(InputSwitch, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        value: this.props.checked\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.checked !== this.state.value) {\n        this.setState({\n          value: this.props.checked\n        });\n      }\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      this.setState({\n        value: !this.state.value\n      });\n      this.props.getValue && this.props.getValue(event.target.checked);\n      this.props.onChange && this.props.onChange(event);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          checked = _this$props.checked,\n          disabled = _this$props.disabled,\n          getValue = _this$props.getValue,\n          labelLeft = _this$props.labelLeft,\n          labelRight = _this$props.labelRight,\n          onChange = _this$props.onChange,\n          attributes = _objectWithoutProperties(_this$props, [\"className\", \"checked\", \"disabled\", \"getValue\", \"labelLeft\", \"labelRight\", \"onChange\"]);\n\n      var classes = classNames(\"switch\", className);\n      return React.createElement(\"div\", _extends({}, attributes, {\n        className: classes\n      }), React.createElement(\"label\", null, labelLeft, React.createElement(\"input\", {\n        disabled: this.props.disabled,\n        value: this.state.value,\n        checked: this.state.value,\n        onChange: this.handleChange,\n        type: \"checkbox\"\n      }), React.createElement(\"span\", {\n        className: \"lever\"\n      }), labelRight));\n    }\n  }]);\n\n  return InputSwitch;\n}(React.Component);\n\nInputSwitch.propTypes = {\n  className: propTypes.string,\n  disabled: propTypes.bool,\n  checked: propTypes.bool,\n  getValue: propTypes.oneOfType([propTypes.func, propTypes.bool]),\n  labelLeft: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.object]),\n  labelRight: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.object]),\n  onChange: propTypes.func\n};\nInputSwitch.defaultProps = {\n  checked: false,\n  getValue: false,\n  labelLeft: \"Off\",\n  labelRight: \"On\"\n};\nvar css$c = \".ReactModal__Overlay {\\n    z-index: 2000 !important;\\n}\";\nstyleInject(css$c);\nvar css$d = \"\\n/*\\n * Container style\\n */\\n .ps {\\n  overflow: hidden !important;\\n  overflow-anchor: none;\\n  -ms-overflow-style: none;\\n  touch-action: auto;\\n  -ms-touch-action: auto;\\n}\\n\\n/*\\n * Scrollbar rail styles\\n */\\n.ps__rail-x {\\n  display: none;\\n  opacity: 0;\\n  transition: background-color .2s linear, opacity .2s linear;\\n  -webkit-transition: background-color .2s linear, opacity .2s linear;\\n  height: 15px;\\n  /* there must be 'bottom' or 'top' for ps__rail-x */\\n  bottom: 0px;\\n  /* please don't change 'position' */\\n  position: absolute;\\n}\\n\\n.ps__rail-y {\\n  display: none;\\n  opacity: 0;\\n  transition: background-color .2s linear, opacity .2s linear;\\n  -webkit-transition: background-color .2s linear, opacity .2s linear;\\n  width: 15px;\\n  /* there must be 'right' or 'left' for ps__rail-y */\\n  right: 0;\\n  /* please don't change 'position' */\\n  position: absolute;\\n}\\n\\n.ps--active-x > .ps__rail-x,\\n.ps--active-y > .ps__rail-y {\\n  display: block;\\n  background-color: transparent;\\n}\\n\\n.ps:hover > .ps__rail-x,\\n.ps:hover > .ps__rail-y,\\n.ps--focus > .ps__rail-x,\\n.ps--focus > .ps__rail-y,\\n.ps--scrolling-x > .ps__rail-x,\\n.ps--scrolling-y > .ps__rail-y {\\n  opacity: 0.6;\\n}\\n\\n.ps__rail-x:hover,\\n.ps__rail-y:hover,\\n.ps__rail-x:focus,\\n.ps__rail-y:focus {\\n  background-color: #eee;\\n  opacity: 0.9;\\n}\\n\\n/*\\n * Scrollbar thumb styles\\n */\\n.ps__thumb-x {\\n  background-color: #aaa;\\n  border-radius: 6px;\\n  transition: background-color .2s linear, height .2s ease-in-out;\\n  -webkit-transition: background-color .2s linear, height .2s ease-in-out;\\n  height: 6px;\\n  /* there must be 'bottom' for ps__thumb-x */\\n  bottom: 2px;\\n  /* please don't change 'position' */\\n  position: absolute;\\n}\\n\\n.ps__thumb-y {\\n  background-color: #aaa;\\n  border-radius: 6px;\\n  transition: background-color .2s linear, width .2s ease-in-out;\\n  -webkit-transition: background-color .2s linear, width .2s ease-in-out;\\n  width: 6px;\\n  /* there must be 'right' for ps__thumb-y */\\n  right: 2px;\\n  /* please don't change 'position' */\\n  position: absolute;\\n}\\n\\n.ps__rail-x:hover > .ps__thumb-x,\\n.ps__rail-x:focus > .ps__thumb-x {\\n  background-color: #999;\\n  height: 11px;\\n}\\n\\n.ps__rail-y:hover > .ps__thumb-y,\\n.ps__rail-y:focus > .ps__thumb-y {\\n  background-color: #999;\\n  width: 11px;\\n}\\n\\n/* MS supports */\\n@supports (-ms-overflow-style: none) {\\n  .ps {\\n    overflow: auto !important;\\n  }\\n}\\n\\n@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {\\n  .ps {\\n    overflow: auto !important;\\n  }\\n}\\n\\n.scrollbar-container {\\n  position: relative;\\n  height: 100%;\\n}\\n\";\nstyleInject(css$d);\nvar handlerNameByEvent = {\n  'ps-scroll-y': 'onScrollY',\n  'ps-scroll-x': 'onScrollX',\n  'ps-scroll-up': 'onScrollUp',\n  'ps-scroll-down': 'onScrollDown',\n  'ps-scroll-left': 'onScrollLeft',\n  'ps-scroll-right': 'onScrollRight',\n  'ps-y-reach-start': 'onYReachStart',\n  'ps-y-reach-end': 'onYReachEnd',\n  'ps-x-reach-start': 'onXReachStart',\n  'ps-x-reach-end': 'onXReachEnd'\n};\nObject.freeze(handlerNameByEvent);\n\nvar ScrollBar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ScrollBar, _Component);\n\n  function ScrollBar(props) {\n    var _this;\n\n    _classCallCheck(this, ScrollBar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ScrollBar).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleRef\", function (ref) {\n      _this._container = ref;\n\n      _this.props.containerRef(ref);\n    });\n\n    _this._handlerByEvent = new Map();\n    return _this;\n  }\n\n  _createClass(ScrollBar, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this._ps = new PerfectScrollbar(this._container, this.props.option); // hook up events\n\n      Object.keys(handlerNameByEvent).forEach(function (key) {\n        var callback = _this2.props[handlerNameByEvent[key]];\n\n        if (callback) {\n          var handler = function handler() {\n            return callback(_this2._container);\n          };\n\n          _this2._handlerByEvent.set(key, handler);\n\n          _this2._container.addEventListener(key, handler, false);\n        }\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this._ps.update();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this3 = this; // unhook up evens\n\n\n      Object.keys(this._handlerByEvent).forEach(function (value, key) {\n        _this3._container.removeEventListener(key, value, false);\n      });\n\n      this._handlerByEvent.clear();\n\n      this._ps.destroy();\n\n      this._ps = null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          className = _this$props.className;\n      return React.createElement(\"div\", {\n        className: \"scrollbar-container \".concat(className),\n        ref: this.handleRef\n      }, children);\n    }\n  }]);\n\n  return ScrollBar;\n}(Component);\n\nScrollBar.defaultProps = {\n  className: '',\n  option: undefined,\n  containerRef: function containerRef() {},\n  onScrollY: undefined,\n  onScrollX: undefined,\n  onScrollUp: undefined,\n  onScrollDown: undefined,\n  onScrollLeft: undefined,\n  onScrollRight: undefined,\n  onYReachStart: undefined,\n  onYReachEnd: undefined,\n  onXReachStart: undefined,\n  onXReachEnd: undefined\n};\nScrollBar.propTypes = {\n  children: propTypes.node.isRequired,\n  className: propTypes.string,\n  option: propTypes.object,\n  containerRef: propTypes.func,\n  onScrollY: propTypes.func,\n  onScrollX: propTypes.func,\n  onScrollUp: propTypes.func,\n  onScrollDown: propTypes.func,\n  onScrollLeft: propTypes.func,\n  onScrollRight: propTypes.func,\n  onYReachStart: propTypes.func,\n  onYReachEnd: propTypes.func,\n  onXReachStart: propTypes.func,\n  onXReachEnd: propTypes.func\n};\n\nvar ScrollBox = function ScrollBox(props) {\n  var className = props.className,\n      children = props.children,\n      attributes = _objectWithoutProperties(props, [\"className\", \"children\"]);\n\n  var classes = classNames(\"scroll-box\", className);\n  return React.createElement(\"div\", _extends({}, attributes, {\n    className: classes\n  }), children);\n};\n\nScrollBox.propTypes = {\n  className: propTypes.string,\n  children: propTypes.node\n};\n\nvar ScrollSpyList = function ScrollSpyList(props) {\n  var className = props.className,\n      children = props.children,\n      color = props.color,\n      attributes = _objectWithoutProperties(props, [\"className\", \"children\", \"color\"]);\n\n  var classes = classNames(\"nav md-tabs horizontal-spy\", color ? color : false, className);\n  return React.createElement(\"ul\", _extends({}, attributes, {\n    role: \"navigation\",\n    className: classes\n  }), children);\n};\n\nScrollSpyList.propTypes = {\n  className: propTypes.string,\n  children: propTypes.node,\n  color: propTypes.string\n};\n\nvar ScrollSpyListItem = function ScrollSpyListItem(props) {\n  var className = props.className,\n      children = props.children,\n      active = props.active,\n      attributes = _objectWithoutProperties(props, [\"className\", \"children\", \"active\"]);\n\n  var classes = classNames(\"nav-link \", active ? \"active\" : false, className);\n  return React.createElement(\"li\", {\n    className: \"nav-item\"\n  }, React.createElement(\"a\", _extends({}, attributes, {\n    className: classes,\n    role: \"tab\"\n  }), children));\n};\n\nScrollSpyListItem.propTypes = {\n  className: propTypes.string,\n  children: propTypes.node,\n  active: propTypes.bool\n};\n\nvar ScrollSpyText = function ScrollSpyText(props) {\n  var className = props.className,\n      children = props.children,\n      scrollSpyRef = props.scrollSpyRef,\n      attributes = _objectWithoutProperties(props, [\"className\", \"children\", \"scrollSpyRef\"]);\n\n  var classes = classNames(\"scrollspy-example z-depth-1\", className);\n  return React.createElement(\"div\", _extends({}, attributes, {\n    ref: props.scrollSpyRef,\n    className: classes\n  }), children);\n};\n\nScrollSpyText.propTypes = {\n  className: propTypes.string,\n  children: propTypes.node,\n  scrollSpyRef: propTypes.oneOfType([propTypes.func, propTypes.object])\n};\nvar css$e = \".popover-enter {\\n  opacity: 0.01;\\n  transform: scale(0.9) translateY(50%);\\n}\\n\\n.popover-enter-active {\\n  opacity: 1;\\n  transform: scale(1);\\n  transition: scale 300ms ease-out, opacity 300ms ease;\\n}\\n\\n.popover-enter-done {\\n  opacity: 1;\\n  transform: scale(1);\\n}\\n\\n.popover-exit {\\n  opacity: 1;\\n  transform: scale(0.8);\\n  transition: all 300ms ease-out;\\n}\\n\\n.popover-exit-active {\\n  opacity: 0;\\n  transform: scale(0.8);\\n  transition: all 300ms ease-out;\\n}\\n\\n/* slide from side */\\n\\n.side-slide-enter, .side-slide-appear {\\n  opacity: 0.2;\\n  transform: translateX(-100%);\\n}\\n\\n.side-slide-enter-active, .side-slide-appear-active {\\n  opacity: 1;\\n  transform: translateX(0%);\\n  transition: transform 300ms ease-out, opacity 300ms ease;\\n}\\n\\n.side-slide-enter-done {\\n  opacity: 1;\\n  transform: translateX(0);\\n}\\n\\n.side-slide-exit {\\n  opacity: 1;\\n  transform: translateX(0%);\\n  transition: all 300ms ease-out;\\n}\\n\\n.side-slide-exit-active {\\n  opacity: 0.2;\\n  transform: translateX(-100%);\\n  transition: all 300ms ease-out;\\n}\\n\\n.right-side-slide-enter, .right-side-slide-appear {\\n  opacity: 0.2;\\n  transform: translateX(100%);\\n}\\n\\n.right-side-slide-enter-active, .right-side-slide-appear-active {\\n  opacity: 1;\\n  transform: translateX(0%) !important;\\n  transition: transform 300ms ease-out, opacity 300ms ease;\\n}\\n\\n.right-side-slide-enter-done {\\n  opacity: 1;\\n  transform: translateX(0%) !important;\\n}\\n\\n.right-side-slide-exit {\\n  opacity: 1;\\n  transform: translateX(0%);\\n  transition: all 300ms ease-out;\\n}\\n\\n.right-side-slide-exit-active {\\n  opacity: 0.2;\\n  transform: translateX(100%);\\n  transition: all 300ms ease-out;\\n}\\n\\n.side-nav[data-animate=\\\"false\\\"]{\\n  transform: translateX(0%);\\n}\\n\\n\\n.side-nav.wide {\\n    transition-property: all;\\n    transition-duration: 300ms;\\n    transition-timing-function: ease-out;\\n}\\n\\n\\n.side-nav.wide.slim {\\n    width: 3.75rem;\\n    transition-property: all;\\n    transition-duration: 300ms;\\n    transition-timing-function: ease-out;\\n    right: 3.75rem;\\n}\\n\\n.right-aligned.side-nav.wide.slim {\\n    right: 0;\\n}\\n\\n\\n\";\nstyleInject(css$e);\nvar defaultValue = {\n  slim: false\n};\nvar SideNavContext = React.createContext(defaultValue);\n\nvar SideNav =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SideNav, _React$Component);\n\n  function SideNav(props) {\n    var _this;\n\n    _classCallCheck(this, SideNav);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SideNav).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"startTouch\", function (e) {\n      _this.initialX = e.touches[0].clientX;\n      _this.initialY = e.touches[0].clientY;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"moveTouch\", function (e) {\n      if (_this.initialX === null) {\n        return;\n      }\n\n      if (_this.initialY === null) {\n        return;\n      }\n\n      var currentX = e.touches[0].clientX;\n      var currentY = e.touches[0].clientY;\n      var diffX = _this.initialX - currentX;\n      var diffY = _this.initialY - currentY;\n\n      if (Math.abs(diffX) > Math.abs(diffY)) {\n        if (diffX > 0) {\n          !_this.props.right && _this.handleOverlayClick();\n        } else {\n          _this.props.right && _this.handleOverlayClick();\n        }\n      }\n\n      _this.initialX = null;\n      _this.initialY = null;\n      e.preventDefault();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updatePredicate\", function () {\n      if (!_this.props.hidden && _this.props.responsive) {\n        _this.setState({\n          isOpen: window.innerWidth > _this.props.breakWidth\n        });\n\n        if (window.innerWidth > _this.props.breakWidth) {\n          _this.setState({\n            isOpen: true,\n            isFixed: _this.state.initiallyFixed\n          });\n        } else {\n          _this.setState({\n            isOpen: false,\n            isFixed: false\n          });\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleSlim\", function (e) {\n      return function () {\n        _this.setState({\n          slim: !_this.state.slim\n        });\n\n        var sidenav = ReactDOM.findDOMNode(_this.sideNavRef.current);\n        sidenav.classList.toggle(\"slim\");\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOverlayClick\", function () {\n      if (_this.state.isFixed) return;\n\n      _this.setState({\n        isOpen: false\n      });\n\n      if (_this.props.onOverlayClick) {\n        _this.props.onOverlayClick();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClick\", function (e) {\n      if (!_this.props.disabled) {\n        // Waves - Get Cursor Position\n        var cursorPos = {\n          top: e.clientY,\n          left: e.clientX,\n          time: Date.now()\n        };\n\n        _this.setState({\n          cursorPos: cursorPos\n        }); // do the passed in callback:\n\n\n        if (_this.props.onClick) {\n          _this.props.onClick(e);\n        }\n      }\n\n      e.stopPropagation();\n    });\n\n    function isOpen() {\n      if (props.fixed) {\n        if (window.innerWidth <= props.breakWidth) {\n          return props.responsive ? false : true;\n        }\n\n        return true;\n      } else {\n        if (props.triggerOpening) {\n          if (window.innerWidth > props.breakWidth) {\n            return true;\n          }\n\n          return false;\n        }\n\n        return false;\n      }\n    }\n\n    _this.sideNavRef = React.createRef();\n    _this.initialX = null;\n    _this.initialY = null;\n    _this.state = {\n      initiallyFixed: props.fixed,\n      isFixed: !isOpen() ? false : props.fixed,\n      isOpen: isOpen(),\n      cursorPos: {},\n      slim: _this.props.slim,\n      slimInitial: _this.props.slim\n    };\n    return _this;\n  }\n\n  _createClass(SideNav, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.triggerOpening && !this.props.responsive) {\n        throw new Error('Received \"triggerOpening\" prop for a  non-responsive Sidebar. If you want to contidionally render Sidenav, set the responsive prop to true');\n      }\n\n      this.sideNavRef.current.addEventListener(\"touchstart\", this.startTouch);\n      this.sideNavRef.current.addEventListener(\"touchmove\", this.moveTouch);\n      window.addEventListener(\"resize\", this.updatePredicate);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.triggerOpening !== this.props.triggerOpening) {\n        this.setState({\n          isOpen: !this.state.isOpen\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener(\"resize\", this.updatePredicate);\n      this.sideNavRef.current.removeEventListener(\"touchstart\", this.startTouch);\n      this.sideNavRef.current.removeEventListener(\"touchmove\", this.moveTouch);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          bg = _this$props.bg,\n          breakWidth = _this$props.breakWidth,\n          children = _this$props.children,\n          className = _this$props.className,\n          hidden = _this$props.hidden,\n          href = _this$props.href,\n          logo = _this$props.logo,\n          mask = _this$props.mask,\n          onOverlayClick = _this$props.onOverlayClick,\n          right = _this$props.right,\n          triggerOpening = _this$props.triggerOpening,\n          showOverlay = _this$props.showOverlay,\n          fixed = _this$props.fixed,\n          responsive = _this$props.responsive,\n          slim = _this$props.slim,\n          Tag = _this$props.tag,\n          attributes = _objectWithoutProperties(_this$props, [\"bg\", \"breakWidth\", \"children\", \"className\", \"hidden\", \"href\", \"logo\", \"mask\", \"onOverlayClick\", \"right\", \"triggerOpening\", \"showOverlay\", \"fixed\", \"responsive\", \"slim\", \"tag\"]);\n\n      var _this$state = this.state,\n          isOpen = _this$state.isOpen,\n          isFixed = _this$state.isFixed;\n      var classes = classNames(\"side-nav\", \"wide\", right && \"right-aligned\", this.state.slimInitial && \"slim\", className);\n      var overlay = React.createElement(\"div\", {\n        id: \"sidenav-overlay\",\n        onClick: this.handleOverlayClick\n      });\n      var sidenav = React.createElement(Tag, _extends({}, attributes, {\n        ref: this.sideNavRef,\n        className: classes,\n        \"data-animate\": isFixed ? false : undefined,\n        style: bg ? {\n          backgroundImage: \"url(\".concat(bg)\n        } : undefined\n      }), React.createElement(ScrollBar, {\n        option: {\n          suppressScrollX: true\n        }\n      }, React.createElement(\"ul\", {\n        className: \"list-unstyled\"\n      }, logo && React.createElement(\"li\", null, React.createElement(\"div\", {\n        className: \"logo-wrapper\"\n      }, React.createElement(\"a\", {\n        href: href,\n        className: \"Ripple-parent\",\n        onClick: this.handleClick\n      }, React.createElement(\"img\", {\n        src: logo,\n        alt: \"\",\n        className: \"img-fluid flex-center d-block\"\n      }), React.createElement(Waves, {\n        cursorPos: this.state.cursorPos\n      })))), children)), mask && React.createElement(\"div\", {\n        className: \"sidenav-bg \".concat(mask)\n      }));\n      return React.createElement(SideNavContext.Provider, {\n        value: {\n          slimInitial: this.state.slimInitial,\n          slim: this.state.slim,\n          toggleSlim: this.toggleSlim,\n          right: this.props.right\n        }\n      }, isFixed ? sidenav : React.createElement(CSSTransition, {\n        appear: !this.state.isFixed,\n        timeout: {\n          enter: 300,\n          exit: 300\n        },\n        classNames: right ? \"right-side-slide\" : \"side-slide\",\n        \"in\": isOpen\n      }, sidenav), isFixed ? false : showOverlay && isOpen && overlay);\n    }\n  }]);\n\n  return SideNav;\n}(React.Component);\n\nSideNav.propTypes = {\n  bg: propTypes.string,\n  breakWidth: propTypes.number,\n  children: propTypes.node,\n  className: propTypes.string,\n  hidden: propTypes.bool,\n  href: propTypes.string,\n  logo: propTypes.string,\n  mask: propTypes.string,\n  onOverlayClick: propTypes.func,\n  right: propTypes.bool,\n  triggerOpening: propTypes.bool,\n  tag: propTypes.string,\n  fixed: propTypes.bool,\n  showOverlay: propTypes.bool,\n  responsive: propTypes.bool,\n  slim: propTypes.bool\n};\nSideNav.defaultProps = {\n  bg: \"\",\n  breakWidth: 1400,\n  className: \"\",\n  hidden: false,\n  href: \"#\",\n  logo: \"\",\n  mask: \"\",\n  onOverlayClick: function onOverlayClick() {},\n  right: false,\n  triggerOpening: false,\n  tag: \"div\",\n  fixed: false,\n  responsive: true,\n  showOverlay: true,\n  slim: false\n};\n\nvar SideNavCat =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SideNavCat, _React$Component);\n\n  function SideNavCat(props) {\n    var _this;\n\n    _classCallCheck(this, SideNavCat);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SideNavCat).call(this, props));\n    _this.state = {\n      cursorPos: {},\n      isOpenID: \"\"\n    };\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(SideNavCat, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.isOpen !== this.props.isOpen) {\n        this.setState({\n          isOpenID: this.props.isOpen ? this.props.id : \"\"\n        });\n      }\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(e, id) {\n      if (!this.props.disabled) {\n        // Waves - Get Cursor Position\n        var cursorPos = {\n          top: e.clientY,\n          left: e.clientX,\n          time: Date.now()\n        };\n        this.setState({\n          cursorPos: cursorPos\n        }); // do the passed in callback:\n\n        if (this.props.onClick) {\n          this.props.onClick(id);\n        }\n\n        e.stopPropagation();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          Tag = _this$props.tag,\n          children = _this$props.children,\n          className = _this$props.className,\n          name = _this$props.name,\n          icon = _this$props.icon,\n          iconBrand = _this$props.iconBrand,\n          iconLight = _this$props.iconLight,\n          iconRegular = _this$props.iconRegular,\n          iconSize = _this$props.iconSize,\n          onClick = _this$props.onClick,\n          disabled = _this$props.disabled,\n          isOpen = _this$props.isOpen,\n          isOpenID = _this$props.isOpenID,\n          id = _this$props.id,\n          attributes = _objectWithoutProperties(_this$props, [\"tag\", \"children\", \"className\", \"name\", \"icon\", \"iconBrand\", \"iconLight\", \"iconRegular\", \"iconSize\", \"onClick\", \"disabled\", \"isOpen\", \"isOpenID\", \"id\"]);\n\n      var classes = classNames(\"collapsible-header\", \"Ripple-parent\", \"arrow-r\", isOpen && \"active\", disabled && \"disabled\", className);\n      return React.createElement(SideNavContext.Consumer, null, function (_ref) {\n        var slim = _ref.slim;\n        var iconClass = ['mr-2'];\n        slim && iconClass.push('v-slim-icon');\n        return React.createElement(Tag, null, React.createElement(\"a\", _extends({\n          className: classes,\n          onClick: function onClick(e) {\n            return _this2.handleClick(e, id);\n          }\n        }, attributes), icon && React.createElement(Fa, {\n          icon: icon,\n          brand: iconBrand,\n          light: iconLight,\n          regular: iconRegular,\n          size: iconSize,\n          className: iconClass.join(\" \")\n        }), name, React.createElement(Fa, {\n          icon: \"angle-down\",\n          className: \"rotate-icon\"\n        }), React.createElement(Waves, {\n          cursorPos: _this2.state.cursorPos\n        })), React.createElement(Collapse, {\n          id: id,\n          isOpen: _this2.state.isOpenID\n        }, React.createElement(\"div\", {\n          className: \"collapsible-body\",\n          style: {\n            display: \"block\"\n          }\n        }, React.createElement(\"ul\", null, children))));\n      });\n    }\n  }]);\n\n  return SideNavCat;\n}(React.Component);\n\n_defineProperty(SideNavCat, \"displayName\", \"SideNavCat\");\n\nSideNavCat.propTypes = {\n  children: propTypes.node,\n  className: propTypes.string,\n  disabled: propTypes.bool,\n  icon: propTypes.string,\n  iconBrand: propTypes.bool,\n  iconLight: propTypes.bool,\n  iconRegular: propTypes.bool,\n  iconSize: propTypes.string,\n  id: propTypes.string,\n  isOpen: propTypes.bool,\n  isOpenID: propTypes.string,\n  name: propTypes.string,\n  onClick: propTypes.func,\n  tag: propTypes.string\n};\nSideNavCat.defaultProps = {\n  className: \"\",\n  disabled: false,\n  icon: \"\",\n  iconBrand: false,\n  iconLight: false,\n  iconRegular: false,\n  iconSize: \"\",\n  id: \"\",\n  isOpen: false,\n  isOpenID: \"\",\n  name: \"\",\n  onClick: function onClick() {},\n  tag: \"li\"\n};\n\nvar SideNavItem = function SideNavItem(props) {\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      cursorPos = _useState2[0],\n      setCursorPos = _useState2[1];\n\n  var handleClick = function handleClick(e) {\n    if (!props.disabled) {\n      // Waves - Get Cursor Position\n      var _cursorPos = {\n        top: e.clientY,\n        left: e.clientX,\n        time: Date.now()\n      };\n      setCursorPos(_cursorPos); // do the passed in callback:\n\n      if (props.onClick) {\n        props.onClick(e);\n      }\n\n      e.stopPropagation();\n    }\n  };\n\n  var Tag = props.tag,\n      children = props.children,\n      href = props.href,\n      className = props.className,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutProperties(props, [\"tag\", \"children\", \"href\", \"className\", \"innerRef\"]);\n\n  var classes = classNames(\"Ripple-parent\", className);\n  return React.createElement(Tag, _extends({\n    className: classes,\n    ref: innerRef,\n    onClick: handleClick\n  }, attributes), React.createElement(\"a\", {\n    className: classes,\n    href: href\n  }, children, React.createElement(Waves, {\n    cursorPos: cursorPos\n  })));\n};\n\nSideNavItem.propTypes = {\n  children: propTypes.node,\n  href: propTypes.string,\n  tag: propTypes.string,\n  innerRef: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string\n};\nSideNavItem.defaultProps = {\n  tag: \"li\"\n};\n\nvar SideNavLink =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SideNavLink, _React$Component);\n\n  function SideNavLink(props) {\n    var _this;\n\n    _classCallCheck(this, SideNavLink);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SideNavLink).call(this, props));\n    _this.state = {\n      cursorPos: {}\n    };\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(SideNavLink, [{\n    key: \"handleClick\",\n    value: function handleClick(e) {\n      if (!this.props.disabled) {\n        // Waves - Get Cursor Position\n        var cursorPos = {\n          top: e.clientY,\n          left: e.clientX,\n          time: Date.now()\n        };\n        this.setState({\n          cursorPos: cursorPos\n        }); // do the passed in callback:\n\n        if (this.props.onClick) {\n          this.props.onClick(e);\n        }\n\n        e.stopPropagation();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          Tag = _this$props.tag,\n          children = _this$props.children,\n          to = _this$props.to,\n          className = _this$props.className,\n          innerRef = _this$props.innerRef,\n          topLevel = _this$props.topLevel,\n          shortcut = _this$props.shortcut,\n          attributes = _objectWithoutProperties(_this$props, [\"tag\", \"children\", \"to\", \"className\", \"innerRef\", \"topLevel\", \"shortcut\"]);\n\n      var classes = classNames('Ripple-parent', topLevel && 'collapsible-header', className);\n      var sideNavLink = React.createElement(SideNavContext.Consumer, null, function (_ref) {\n        var slim = _ref.slim;\n        var shortcut;\n\n        function calculateShortcut() {\n          if (typeof children === 'string') {\n            var wordsArray = children.toString().split(' ');\n\n            if (wordsArray.length === 1) {\n              return wordsArray[0].substr(0, 2).toUpperCase();\n            }\n\n            if (wordsArray.length >= 2) {\n              var firstLetter = wordsArray[0].substr(0, 1);\n              var secondLetter = wordsArray[1].substr(0, 1);\n              return firstLetter.concat(secondLetter).toUpperCase();\n            }\n          }\n\n          return children;\n        }\n\n        if (slim) {\n          shortcut = _this2.props.shortcut || calculateShortcut();\n        }\n\n        return React.createElement(NavLink$1, _extends({\n          className: classes,\n          ref: innerRef,\n          onClick: _this2.handleClick,\n          to: to\n        }, attributes), slim ? React.createElement(React.Fragment, null, React.createElement(\"span\", {\n          className: \"sv-slim\"\n        }, shortcut), React.createElement(\"span\", {\n          className: \"sv-normal\"\n        }, children)) : React.createElement(\"span\", {\n          className: \"sv-normal\"\n        }, children), React.createElement(Waves, {\n          cursorPos: _this2.state.cursorPos\n        }));\n      });\n      return topLevel ? React.createElement(\"li\", null, \" \", sideNavLink) : sideNavLink;\n    }\n  }]);\n\n  return SideNavLink;\n}(React.Component);\n\nSideNavLink.propTypes = {\n  children: propTypes.node,\n  href: propTypes.string,\n  tag: propTypes.string,\n  innerRef: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  topLevel: propTypes.bool,\n  shortcut: propTypes.string\n};\nSideNavLink.defaultProps = {\n  to: '#',\n  topLevel: false\n};\n\nvar SideNavNav =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SideNavNav, _React$Component);\n\n  function SideNavNav(props) {\n    var _this;\n\n    _classCallCheck(this, SideNavNav);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SideNavNav).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onClick\", function (number) {\n      return function () {\n        var state = \"\";\n\n        if (_this.state.accordion !== number) {\n          state = number;\n        } else {\n          state = null;\n        }\n\n        _this.setState({\n          accordion: state\n        });\n      };\n    });\n\n    _this.state = {\n      accordion: null\n    };\n    return _this;\n  }\n\n  _createClass(SideNavNav, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          Tag = _this$props.tag,\n          children = _this$props.children,\n          className = _this$props.className,\n          attributes = _objectWithoutProperties(_this$props, [\"tag\", \"children\", \"className\"]);\n\n      var accordion = this.state.accordion;\n      var classes = classNames(\"collapsible\", \"collapsible-accordion\", className);\n      var modified = React.Children.map(this.props.children, function (child, i) {\n        if (child.type.displayName === \"SideNavCat\") {\n          return React.cloneElement(child, {\n            onClick: _this2.onClick(i),\n            isOpen: accordion === i\n          });\n        } else {\n          return child;\n        }\n      });\n      return React.createElement(SideNavContext.Consumer, null, function (_ref) {\n        var slim = _ref.slim,\n            slimInitial = _ref.slimInitial,\n            toggleSlim = _ref.toggleSlim,\n            right = _ref.right;\n        var iconClass = ['mr-2', \"sv-slim-icon\", \"fas\", \"icon-rotate\"];\n        right & slim && iconClass.push('fa-angle-double-left');\n        right & !slim && iconClass.push('fa-angle-double-right');\n        !right & !slim && iconClass.push('fa-angle-double-left');\n        !right & slim && iconClass.push('fa-angle-double-right');\n        return React.createElement(React.Fragment, null, React.createElement(\"li\", null, React.createElement(Tag, _extends({}, attributes, {\n          className: classes\n        }), modified, slimInitial && React.createElement(\"li\", {\n          onClick: toggleSlim()\n        }, React.createElement(\"a\", {\n          href: \"#!\",\n          className: \"waves-effect\"\n        }, React.createElement(\"i\", {\n          className: iconClass.join(\" \")\n        }), \"Minimize menu\")))));\n      });\n    }\n  }]);\n\n  return SideNavNav;\n}(React.Component);\n\nSideNavNav.propTypes = {\n  children: propTypes.node,\n  tag: propTypes.string,\n  className: propTypes.string\n};\nSideNavNav.defaultProps = {\n  tag: \"ul\"\n};\n\nvar SimpleChart = function SimpleChart(props) {\n  var polarToCartesian = function polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n    var angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;\n    return {\n      x: centerX + radius * Math.cos(angleInRadians),\n      y: centerY + radius * Math.sin(angleInRadians)\n    };\n  };\n\n  var describeArc = function describeArc(x, y, radius, startAngle, endAngle) {\n    if (!x || !y) console.error('x or y missing to describeArc');\n    var start = polarToCartesian(x, y, radius, endAngle),\n        end = polarToCartesian(x, y, radius, startAngle),\n        arcSweep = endAngle - startAngle <= 180 ? \"0\" : \"1\";\n    return [\"M\", start.x, start.y, \"A\", radius, radius, 0, arcSweep, 0, end.x, end.y].join(\" \");\n  };\n\n  var percent = Math.min(props.percent || 0, 100),\n      radius = props.width / 2 - props.strokeWidth / 2 - props.padding,\n      center = radius + props.strokeWidth / 2 + props.padding,\n      startAngle = 0,\n      endAngle = 3.6 * percent,\n      label = \"\".concat(percent, \"%\"),\n      labelLeftOffset = label.length === 3 || label.length === 4 ? -0.95 : -0.6,\n      arc = describeArc(center, center, radius, startAngle, endAngle - .001);\n  return React.createElement(\"svg\", {\n    className: \"react-chart \".concat(props.type),\n    width: props.width,\n    style: _objectSpread({\n      overflow: 'visible',\n      border: props.border\n    }, props.style),\n    height: props.height\n  }, React.createElement(\"circle\", {\n    cx: center,\n    cy: center,\n    r: radius,\n    fill: props.fillColor,\n    stroke: props.railColor,\n    strokeWidth: props.strokeWidth\n  }), React.createElement(\"path\", {\n    fill: props.fillColor,\n    stroke: props.strokeColor,\n    strokeWidth: props.strokeWidth,\n    d: arc\n  }), React.createElement(\"text\", {\n    x: center,\n    y: center,\n    dx: \"\".concat(labelLeftOffset, \"em\"),\n    dy: \".35em\",\n    fill: props.labelColor,\n    fontWeight: props.labelFontWeight,\n    fontSize: props.labelFontSize\n  }, label));\n};\n\nSimpleChart.defaultProps = {\n  width: 150,\n  height: 150,\n  border: 'none',\n  strokeWidth: 10,\n  style: {},\n  labelColor: '#408AE5',\n  labelFontSize: '1.2em',\n  labelFontWeight: 'bold',\n  strokeColor: '#408AE5',\n  railColor: '#f5f5f5',\n  fillColor: 'none',\n  percent: 70,\n  padding: 0\n};\nSimpleChart.propTypes = {\n  width: propTypes.number,\n  height: propTypes.number,\n  strokeWidth: propTypes.number,\n  strokeColor: propTypes.string,\n  labelFontWeight: propTypes.string,\n  labelFontSize: propTypes.string,\n  fillColor: propTypes.string,\n  startAngle: propTypes.number,\n  endAngle: propTypes.number,\n  radius: propTypes.number,\n  style: propTypes.object\n};\n\nvar SmoothScroll = function SmoothScroll(props) {\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      cursorPos = _useState2[0],\n      setCursorPos = _useState2[1];\n\n  var handleClick = function handleClick(e) {\n    if (!props.disabled) {\n      e.stopPropagation(); // Waves - Get Cursor Position\n\n      var _cursorPos = {\n        top: e.clientY,\n        left: e.clientX,\n        time: Date.now()\n      };\n      setCursorPos(_cursorPos);\n    }\n  };\n\n  var children = props.children,\n      className = props.className,\n      disabled = props.disabled,\n      active = props.active,\n      to = props.to,\n      spy = props.spy,\n      smooth = props.smooth,\n      offset = props.offset,\n      duration = props.duration,\n      block = props.block,\n      color = props.color,\n      outline = props.outline,\n      size = props.size,\n      rounded = props.rounded,\n      gradient = props.gradient,\n      floating = props.floating,\n      flat = props.flat,\n      social = props.social,\n      btn = props.btn,\n      fixed = props.fixed,\n      bottom = props.bottom,\n      right = props.right,\n      top = props.top,\n      left = props.left,\n      attributes = _objectWithoutProperties(props, [\"children\", \"className\", \"disabled\", \"active\", \"to\", \"spy\", \"smooth\", \"offset\", \"duration\", \"block\", \"color\", \"outline\", \"size\", \"rounded\", \"gradient\", \"floating\", \"flat\", \"social\", \"btn\", \"fixed\", \"bottom\", \"right\", \"top\", \"left\"]);\n\n  var classes = classNames(\"nav-link\", disabled ? \"disabled\" : \"Ripple-parent\", active && \"active\", (btn || floating) && \"btn\", floating && \"btn-floating\", flat ? \"btn-flat\" : gradient ? \"\".concat(gradient, \"-gradient\") : \"btn\".concat(outline ? \"-outline\" : \"\", \"-\").concat(color), size ? \"btn-\".concat(size) : false, rounded ? \"btn-rounded\" : false, block ? \"btn-block\" : false, social ? \"btn-\" + social : false, \"Ripple-parent\", className);\n  var fixedStyles = {\n    position: \"fixed\",\n    top: top ? \"\".concat(top, \"px\") : null,\n    bottom: bottom ? \"\".concat(bottom, \"px\") : !top ? \"45px\" : null,\n    left: left ? \"\".concat(left, \"px\") : null,\n    right: right ? \"\".concat(right, \"px\") : !left ? \"24px\" : null\n  };\n  return React.createElement(Link, _extends({\n    className: classes,\n    onMouseUp: handleClick,\n    onTouchStart: handleClick,\n    to: to,\n    spy: spy,\n    smooth: smooth,\n    offset: offset,\n    duration: duration,\n    style: fixed ? fixedStyles : null\n  }, attributes), children, props.disabled ? false : React.createElement(Waves, {\n    cursorPos: cursorPos\n  }));\n};\n\nSmoothScroll.propTypes = {\n  to: propTypes.string.isRequired,\n  children: propTypes.node,\n  className: propTypes.string,\n  disabled: propTypes.bool,\n  active: propTypes.bool,\n  spy: propTypes.bool,\n  smooth: propTypes.bool,\n  offset: propTypes.number,\n  duration: propTypes.number,\n  block: propTypes.bool,\n  color: propTypes.string,\n  outline: propTypes.bool,\n  size: propTypes.string,\n  rounded: propTypes.bool,\n  gradient: propTypes.string,\n  floating: propTypes.bool,\n  flat: propTypes.bool,\n  social: propTypes.string,\n  fixed: propTypes.bool,\n  top: propTypes.string,\n  bottom: propTypes.string,\n  right: propTypes.string,\n  left: propTypes.string\n};\nSmoothScroll.defaultProps = {\n  active: false,\n  className: \"\",\n  disabled: false,\n  spy: true,\n  smooth: true,\n  offset: -70,\n  duration: 500\n};\n\nvar Spinner = function Spinner(props) {\n  var theChosenColorSpinner = function theChosenColorSpinner(spinnerClasses) {\n    if (props.multicolor) {\n      var theSpinnerItself = React.createElement(\"div\", null, React.createElement(\"div\", {\n        className: \"spinner-layer spinner-blue\"\n      }, React.createElement(\"div\", {\n        className: \"circle-clipper left\"\n      }, React.createElement(\"div\", {\n        className: \"circle\"\n      })), React.createElement(\"div\", {\n        className: \"gap-patch\"\n      }, React.createElement(\"div\", {\n        className: \"circle\"\n      })), React.createElement(\"div\", {\n        className: \"circle-clipper right\"\n      }, React.createElement(\"div\", {\n        className: \"circle\"\n      }))), React.createElement(\"div\", {\n        className: \"spinner-layer spinner-red\"\n      }, React.createElement(\"div\", {\n        className: \"circle-clipper left\"\n      }, React.createElement(\"div\", {\n        className: \"circle\"\n      })), React.createElement(\"div\", {\n        className: \"gap-patch\"\n      }, React.createElement(\"div\", {\n        className: \"circle\"\n      })), React.createElement(\"div\", {\n        className: \"circle-clipper right\"\n      }, React.createElement(\"div\", {\n        className: \"circle\"\n      }))), React.createElement(\"div\", {\n        className: \"spinner-layer spinner-yellow\"\n      }, React.createElement(\"div\", {\n        className: \"circle-clipper left\"\n      }, React.createElement(\"div\", {\n        className: \"circle\"\n      })), React.createElement(\"div\", {\n        className: \"gap-patch\"\n      }, React.createElement(\"div\", {\n        className: \"circle\"\n      })), React.createElement(\"div\", {\n        className: \"circle-clipper right\"\n      }, React.createElement(\"div\", {\n        className: \"circle\"\n      }))), React.createElement(\"div\", {\n        className: \"spinner-layer spinner-green\"\n      }, React.createElement(\"div\", {\n        className: \"circle-clipper left\"\n      }, React.createElement(\"div\", {\n        className: \"circle\"\n      })), React.createElement(\"div\", {\n        className: \"gap-patch\"\n      }, React.createElement(\"div\", {\n        className: \"circle\"\n      })), React.createElement(\"div\", {\n        className: \"circle-clipper right\"\n      }, React.createElement(\"div\", {\n        className: \"circle\"\n      }))));\n      return theSpinnerItself;\n    } else {\n      var _theSpinnerItself = React.createElement(\"div\", {\n        className: spinnerClasses\n      }, React.createElement(\"div\", {\n        className: \"circle-clipper left\"\n      }, React.createElement(\"div\", {\n        className: \"circle\"\n      })), React.createElement(\"div\", {\n        className: \"gap-patch\"\n      }, React.createElement(\"div\", {\n        className: \"circle\"\n      })), React.createElement(\"div\", {\n        className: \"circle-clipper right\"\n      }, React.createElement(\"div\", {\n        className: \"circle\"\n      })));\n\n      return _theSpinnerItself;\n    }\n  };\n\n  var className = props.className,\n      big = props.big,\n      small = props.small,\n      red = props.red,\n      green = props.green,\n      yellow = props.yellow;\n  var wrapperClasses = classNames(\"preloader-wrapper\", \"active\", big ? \"big\" : false, small ? \"small\" : false, className);\n  var spinnerClasses = classNames(\"spinner-layer\", red ? \"spinner-red-only\" : false, green ? \"spinner-green-only\" : false, yellow ? \"spinner-yellow-only\" : \"spinner-blue-only\", className);\n\n  if (props.crazy) {\n    return React.createElement(\"div\", {\n      className: wrapperClasses\n    }, React.createElement(\"div\", {\n      className: wrapperClasses\n    }, React.createElement(\"div\", {\n      className: wrapperClasses\n    }, React.createElement(\"div\", {\n      className: wrapperClasses\n    }, theChosenColorSpinner(spinnerClasses)))));\n  } else {\n    return React.createElement(\"div\", {\n      className: wrapperClasses\n    }, theChosenColorSpinner(spinnerClasses));\n  }\n};\n\nSpinner.propTypes = {\n  className: propTypes.string,\n  big: propTypes.bool,\n  small: propTypes.bool,\n  crazy: propTypes.bool,\n  red: propTypes.bool,\n  green: propTypes.bool,\n  yellow: propTypes.bool,\n  multicolor: propTypes.bool\n};\nSpinner.defaultProps = {\n  tag: \"div\"\n};\n\nvar Step = function Step(props) {\n  var Tag = props.tag,\n      form = props.form,\n      icon = props.icon,\n      stepName = props.stepName,\n      vertical = props.vertical;\n  var iconClass = classNames(\"fa fa-\" + icon, \"Ripple-parent\");\n  var stepClass = classNames(form ? \"steps-step\" : icon && vertical ? \"steps-step-3\" : icon && !vertical ? \"steps-step-2\" : null, props.className);\n  var step;\n\n  if (form) {\n    step = React.createElement(Tag, {\n      className: stepClass\n    }, props.children);\n  } else if (icon && !vertical) {\n    step = React.createElement(Tag, {\n      className: stepClass,\n      onClick: props.onClick\n    }, React.createElement(Popper, {\n      placement: \"top\"\n    }, React.createElement(Button, {\n      className: \"btn-circle-2 btn-blue-grey\"\n    }, React.createElement(\"i\", {\n      className: iconClass\n    })), React.createElement(\"div\", null, stepName)));\n  } else if (icon && vertical) {\n    step = React.createElement(Tag, {\n      className: stepClass,\n      onClick: props.onClick\n    }, React.createElement(Popper, {\n      placement: \"top\"\n    }, React.createElement(Button, {\n      className: \"btn-circle-3 btn-blue-grey\"\n    }, React.createElement(\"i\", {\n      className: iconClass\n    })), React.createElement(\"div\", null, stepName)));\n  } else {\n    step = React.createElement(\"li\", {\n      className: stepClass\n    }, props.children);\n  }\n\n  return step;\n};\n\nStep.defaultProps = {\n  tag: \"div\",\n  form: false,\n  vertical: false\n};\nvar css$f = \"/* Stepper Form */\\n\\n/* Stepper v.2 (Form) */\\n.steps-form {\\n  display: table;\\n  width: 100%;\\n  position: relative; }\\n.steps-form .steps-row {\\n  display: table-row; }\\n.steps-form .steps-row:before {\\n  top: 14px;\\n  bottom: 0;\\n  position: absolute;\\n  content: \\\" \\\";\\n  width: 100%;\\n  height: 1px;\\n  background-color: #ccc; }\\n.steps-form .steps-row .steps-step {\\n  display: table-cell;\\n  text-align: center;\\n  position: relative; }\\n.steps-form .steps-row .steps-step p {\\n  margin-top: 0.5rem; }\\n.steps-form .steps-row .steps-step button[disabled] {\\n  opacity: 1 !important;\\n  filter: alpha(opacity=100) !important; }\\n.steps-form .steps-row .steps-step .btn-circle {\\n  width: 30px;\\n  height: 30px;\\n  text-align: center;\\n  padding: 6px 0;\\n  font-size: 12px;\\n  line-height: 1.428571429;\\n  border-radius: 15px;\\n  margin-top: 0; }\\n\\n/* Stepper v.3 (Icons) */\\n.steps-form-2 {\\n  display: table;\\n  width: 100%;\\n  position: relative; }\\n.steps-form-2 .steps-row-2 {\\n  display: table-row; }\\n.steps-form-2 .steps-row-2:before {\\n  top: 14px;\\n  bottom: 0;\\n  position: absolute;\\n  content: \\\" \\\";\\n  width: 99%;\\n  height: 2px;\\n  background-color: #7283a7; }\\n.steps-form-2 .steps-row-2 .steps-step-2 {\\n  display: table-cell;\\n  text-align: center;\\n  position: relative; }\\n.steps-form-2 .steps-row-2 .steps-step-2 p {\\n  margin-top: 0.5rem; }\\n.steps-form-2 .steps-row-2 .steps-step-2 button[disabled] {\\n  opacity: 1 !important;\\n  filter: alpha(opacity=100) !important; }\\n.steps-form-2 .steps-row-2 .steps-step-2 .btn-circle-2 {\\n  width: 70px;\\n  height: 70px;\\n  border: 2px solid #59698D;\\n  background-color: white !important;\\n  color: #59698D !important;\\n  border-radius: 50%;\\n  padding: 22px 18px 15px 18px;\\n  margin-top: -22px; }\\n.steps-form-2 .steps-row-2 .steps-step-2 .btn-circle-2:hover {\\n  border: 2px solid #4285F4;\\n  color: #4285F4 !important;\\n  background-color: white !important; }\\n.steps-form-2 .steps-row-2 .steps-step-2 .btn-circle-2 .fa {\\n  font-size: 1.7rem; }\\n .steps-row-2:first-child .btn {\\n  margin-left: 0\\n}\\n.steps-row-2:last-child .btn {\\n  margin-right: 0\\n}\\n\\n\\n/* Stepper v.4 (Icon-vertical) */\\n\\n.steps-form-3 {\\n  width: 2px;\\nheight: 470px;\\n  position: relative; }\\n.steps-form-3 .steps-row-3 {\\n  display: -webkit-box;\\n  display: -webkit-flex;\\n  display: -ms-flexbox;\\n  display: flex;\\n  -webkit-box-align: center;\\n  -webkit-align-items: center;\\n  -ms-flex-align: center;\\n  align-items: center;\\n  -webkit-box-orient: vertical;\\n  -webkit-box-direction: normal;\\n  -webkit-flex-direction: column;\\n  -ms-flex-direction: column;\\n  flex-direction: column; }\\n.steps-form-3 .steps-row-3:before {\\n  top: 14px;\\n  bottom: 0;\\n  position: absolute;\\n  content: \\\"\\\";\\n  width: 2px;\\n  height: 100%;\\n  background-color: #7283a7; }\\n.steps-form-3 .steps-row-3 .steps-step-3 {\\n  height: 150px;\\n  display: -webkit-box;\\n  display: -webkit-flex;\\n  display: -ms-flexbox;\\n  display: flex;\\n  text-align: center;\\n  position: relative; }\\n.steps-form-3 .steps-row-3 .steps-step-3.no-height {\\n  height: 50px; }\\n.steps-form-3 .steps-row-3 .steps-step-3 p {\\nmargin-top: 0.5rem; }\\n.steps-form-3 .steps-row-3 .steps-step-3 button[disabled] {\\n  opacity: 1 !important;\\n  filter: alpha(opacity=100) !important; }\\n.steps-form-3 .steps-row-3 .steps-step-3 .btn-circle-3 {\\n  width: 60px;\\n  height: 60px;\\n  border: 2px solid #59698D;\\n  background-color: white !important;\\n  color: #59698D !important;\\n  border-radius: 50%;\\n  padding: 18px 18px 15px 15px;\\n  margin-top: -22px; }\\n.steps-form-3 .steps-row-3 .steps-step-3 .btn-circle-3:hover {\\n  border: 2px solid #4285F4;\\n  color: #4285F4 !important;\\n  background-color: white !important; }\\n.steps-form-3 .steps-row-3 .steps-step-3 .btn-circle-3 .fa {\\n  font-size: 1.7rem; }\\n\";\nstyleInject(css$f);\n\nvar Stepper = function Stepper(props) {\n  var vertical = props.vertical,\n      form = props.form,\n      icon = props.icon;\n  var stepperClass = classNames(form ? \"steps-form\" : icon && vertical ? \"steps-form-3\" : icon && !vertical ? \"steps-form-2\" : \"stepper\", vertical && !icon ? \"stepper-vertical\" : form || icon ? null : \"stepper-horizontal\", props.className);\n  var wrapperFix = classNames(form ? \"steps-row\" : icon && vertical ? \"steps-row-3 d-flex justify-content-between\" : icon && !vertical ? \"steps-row-2 d-flex justify-content-between\" : null); // wrapper shim in case props.form\n\n  var stepper;\n\n  if (form || icon) {\n    stepper = React.createElement(\"div\", {\n      className: stepperClass\n    }, React.createElement(\"div\", {\n      className: wrapperFix\n    }, props.children));\n  } else {\n    stepper = React.createElement(\"ul\", {\n      className: stepperClass\n    }, props.children);\n  }\n\n  return stepper;\n};\n\nStepper.propTypes = {\n  vertical: propTypes.bool,\n  form: propTypes.bool,\n  icon: propTypes.bool,\n  children: propTypes.node,\n  className: propTypes.string\n};\nStepper.defaultProps = {\n  form: false\n};\n\nvar Sticky =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Sticky, _Component);\n\n  function Sticky() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Sticky);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Sticky)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isSticky: false,\n      wasSticky: false,\n      style: {}\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleContainerEvent\", function (_ref) {\n      var distanceFromTop = _ref.distanceFromTop,\n          distanceFromBottom = _ref.distanceFromBottom,\n          eventSource = _ref.eventSource;\n\n      var parent = _this.context.getParent();\n\n      var preventingStickyStateChanges = false;\n\n      if (_this.props.relative) {\n        preventingStickyStateChanges = eventSource !== parent;\n        distanceFromTop = -(eventSource.scrollTop + eventSource.offsetTop) + _this.placeholder.offsetTop;\n      }\n\n      var placeholderClientRect = _this.placeholder.getBoundingClientRect();\n\n      var contentClientRect = _this.content.getBoundingClientRect();\n\n      var calculatedHeight = contentClientRect.height;\n      var bottomDifference = distanceFromBottom - _this.props.bottomOffset - calculatedHeight;\n      var wasSticky = !!_this.state.isSticky;\n      var isSticky = preventingStickyStateChanges ? wasSticky : distanceFromTop <= -_this.props.topOffset && distanceFromBottom > -_this.props.bottomOffset;\n      distanceFromBottom = (_this.props.relative ? parent.scrollHeight - parent.scrollTop : distanceFromBottom) - calculatedHeight;\n      var style = !isSticky ? {} : {\n        position: \"fixed\",\n        top: bottomDifference > 0 ? _this.props.relative ? parent.offsetTop - parent.offsetParent.scrollTop : 0 : bottomDifference,\n        left: placeholderClientRect.left,\n        width: placeholderClientRect.width\n      };\n\n      if (!_this.props.disableHardwareAcceleration) {\n        style.transform = \"translateZ(0)\";\n      }\n\n      _this.setState({\n        isSticky: isSticky,\n        wasSticky: wasSticky,\n        distanceFromTop: distanceFromTop,\n        distanceFromBottom: distanceFromBottom,\n        calculatedHeight: calculatedHeight,\n        style: style\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(Sticky, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (!this.context.subscribe) throw new TypeError(\"Expected Sticky to be mounted within StickyContainer\");\n      this.context.subscribe(this.handleContainerEvent);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.context.unsubscribe(this.handleContainerEvent);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.placeholder.style.paddingBottom = this.props.disableCompensation ? 0 : \"\".concat(this.state.isSticky ? this.state.calculatedHeight : 0, \"px\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var element = React.cloneElement(this.props.children({\n        isSticky: this.state.isSticky,\n        wasSticky: this.state.wasSticky,\n        distanceFromTop: this.state.distanceFromTop,\n        distanceFromBottom: this.state.distanceFromBottom,\n        calculatedHeight: this.state.calculatedHeight,\n        style: this.state.style\n      }), {\n        ref: function ref(content) {\n          _this2.content = ReactDOM.findDOMNode(content);\n        }\n      });\n      return React.createElement(\"div\", null, React.createElement(\"div\", {\n        ref: function ref(placeholder) {\n          return _this2.placeholder = placeholder;\n        }\n      }), element);\n    }\n  }]);\n\n  return Sticky;\n}(Component);\n\n_defineProperty(Sticky, \"propTypes\", {\n  topOffset: propTypes.number,\n  bottomOffset: propTypes.number,\n  relative: propTypes.bool,\n  children: propTypes.func.isRequired\n});\n\n_defineProperty(Sticky, \"defaultProps\", {\n  relative: false,\n  topOffset: 0,\n  bottomOffset: 0,\n  disableCompensation: false,\n  disableHardwareAcceleration: false\n});\n\n_defineProperty(Sticky, \"contextTypes\", {\n  subscribe: propTypes.func,\n  unsubscribe: propTypes.func,\n  getParent: propTypes.func\n});\n\nvar Container$1 =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Container, _PureComponent);\n\n  function Container() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Container);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Container)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"events\", [\"resize\", \"scroll\", \"touchstart\", \"touchmove\", \"touchend\", \"pageshow\", \"load\"]);\n\n    _defineProperty(_assertThisInitialized(_this), \"subscribers\", []);\n\n    _defineProperty(_assertThisInitialized(_this), \"subscribe\", function (handler) {\n      _this.subscribers = _this.subscribers.concat(handler);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"unsubscribe\", function (handler) {\n      _this.subscribers = _this.subscribers.filter(function (current) {\n        return current !== handler;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"notifySubscribers\", function (evt) {\n      if (!_this.framePending) {\n        var currentTarget = evt.currentTarget;\n        raf(function () {\n          _this.framePending = false;\n\n          var _this$node$getBoundin = _this.node.getBoundingClientRect(),\n              top = _this$node$getBoundin.top,\n              bottom = _this$node$getBoundin.bottom;\n\n          _this.subscribers.forEach(function (handler) {\n            return handler({\n              distanceFromTop: top,\n              distanceFromBottom: bottom,\n              eventSource: currentTarget === window ? document.body : _this.node\n            });\n          });\n        });\n        _this.framePending = true;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getParent\", function () {\n      return _this.node;\n    });\n\n    return _this;\n  }\n\n  _createClass(Container, [{\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      return {\n        subscribe: this.subscribe,\n        unsubscribe: this.unsubscribe,\n        getParent: this.getParent\n      };\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.events.forEach(function (event) {\n        return window.addEventListener(event, _this2.notifySubscribers);\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this3 = this;\n\n      this.events.forEach(function (event) {\n        return window.removeEventListener(event, _this3.notifySubscribers);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return React.createElement(\"div\", _extends({}, this.props, {\n        ref: function ref(node) {\n          return _this4.node = node;\n        },\n        onScroll: this.notifySubscribers,\n        onTouchStart: this.notifySubscribers,\n        onTouchMove: this.notifySubscribers,\n        onTouchEnd: this.notifySubscribers\n      }));\n    }\n  }]);\n\n  return Container;\n}(PureComponent);\n\n_defineProperty(Container$1, \"childContextTypes\", {\n  subscribe: propTypes.func,\n  unsubscribe: propTypes.func,\n  getParent: propTypes.func\n});\n\nvar MDBStreak = function MDBStreak(_ref) {\n  var children = _ref.children,\n      by = _ref.by,\n      byClass = _ref.byClass,\n      wrapperClass = _ref.wrapperClass,\n      size = _ref.size,\n      quoteClass = _ref.quoteClass,\n      photo = _ref.photo,\n      overlayClass = _ref.overlayClass;\n  var byClasses = classNames(\"text-center\", \"font-italic\", \"mb-0\", byClass);\n  var wrapperClasses = classNames(\"streak\", photo && \"streak-photo\", size && \"streak-\".concat(size), wrapperClass);\n  var quoteClasses = classNames(\"h2-responsive\", quoteClass);\n  var overlayClasses = classNames(\"flex-center\", overlayClass);\n  return React.createElement(\"div\", {\n    className: wrapperClasses,\n    style: {\n      backgroundImage: \"url(\\\"\".concat(photo, \"\\\")\"),\n      backgroundAttachment: \"fixed\"\n    }\n  }, React.createElement(\"div\", {\n    className: overlayClasses\n  }, React.createElement(\"ul\", {\n    className: \"mb-0 list-unstyled\"\n  }, React.createElement(\"li\", null, React.createElement(\"h2\", {\n    className: quoteClasses\n  }, React.createElement(Fa, {\n    icon: \"quote-left\"\n  }), \" \", children, \" \", React.createElement(Fa, {\n    icon: \"quote-right\"\n  }))), React.createElement(\"li\", {\n    className: \"mb-0\"\n  }, React.createElement(\"h5\", {\n    className: byClasses\n  }, \"~ \", by)))));\n};\n\nMDBStreak.propTypes = {\n  size: propTypes.oneOf(['lg', 'md']),\n  by: propTypes.string,\n  wrapperClass: propTypes.string,\n  byClass: propTypes.string,\n  quoteClass: propTypes.string,\n  photo: propTypes.string,\n  overlayClass: propTypes.string\n};\nMDBStreak.defaultProps = {\n  wrapperClass: \"grey lighten-3\"\n};\nvar css$g = \".react-bootstrap-table {\\n  padding-top: 65px;\\n}\\n\\n.react-bootstrap-table .caret {\\n  display: inline-block;\\n  width: 0;\\n  height: 0;\\n  margin-left: 2px;\\n  vertical-align: middle;\\n  border-top: 4px dashed;\\n  border-top: 4px solid\\\\9;\\n  border-right: 4px solid transparent;\\n  border-left: 4px solid transparent;\\n}\\n\\n.react-bootstrap-table .dropup .caret {\\n  content: \\\"\\\";\\n  border-top: 0;\\n  border-bottom: 4px dashed;\\n  border-bottom: 4px solid\\\\9;\\n}\\n\\n.react-bootstrap-table-pagination .pagination {\\n  float: right;\\n}\\n\\n.react-bootstrap-table-pagination .pagination .page-item.active .page-link {\\n  background-color: #09c;\\n}\\n\\n.react-bootstrap-table-pagination .select-wrapper {\\n  display: inline-block;\\n  width: 100px;\\n  margin: 0 15px;\\n}\\n\\n.react-bootstrap-table-pagination .dropdown-item {\\n  padding: 0;\\n}\\n\\n.react-bootstrap-table-pagination-total {\\n  display: block;\\n}\\n\\n.react-bootstrap-table .md-form {\\n  position: absolute;\\n  top: 0;\\n  right: 0;\\n  margin: 0;\\n  width: 200px;\\n}\\n\\n.react-bootstrap-table-pagination > * {\\n  position: inherit;\\n}\\n\\n.react-bs-table-sizePerPage-dropdown {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n}\";\nstyleInject(css$g);\n\nvar TableEditable =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TableEditable, _React$Component);\n\n  function TableEditable() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TableEditable);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TableEditable)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      data: []\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      _this.props.data && _this.setState(_objectSpread({}, _this.state, {\n        data: _this.props.data\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"addRow\", function () {\n      var newData = _toConsumableArray(_this.state.data);\n\n      var newRow = [];\n\n      _this.props.columns.forEach(function () {\n        newRow.push(\"\");\n      });\n\n      newData.push(newRow);\n\n      _this.setState(_objectSpread({}, _this.state.data, {\n        data: newData\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"removeRow\", function (index) {\n      var newData = _toConsumableArray(_this.state.data);\n\n      newData = [].concat(_toConsumableArray(newData.slice(0, index)), _toConsumableArray(newData.slice(index + 1)));\n\n      _this.setState(_objectSpread({}, _this.state, {\n        data: newData\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"decreaseIndex\", function (index) {\n      if (index === 0) return;\n\n      var newData = _this.changeArrayOrder(index, index - 1);\n\n      _this.setState(_objectSpread({}, _this.state, {\n        data: newData\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"increaseIndex\", function (index) {\n      if (index === _this.state.data.length - 1) return;\n\n      var newData = _this.changeArrayOrder(index, index + 1);\n\n      _this.setState(_objectSpread({}, _this.state, {\n        data: newData\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"changeArrayOrder\", function (oldIndex, newIndex) {\n      var array = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _toConsumableArray(_this.state.data);\n      var newArray = array;\n\n      var oldIndexValue = _toConsumableArray(newArray[oldIndex]);\n\n      var newIndexValue = _toConsumableArray(newArray[newIndex]);\n\n      newArray.splice(oldIndex, 1, newIndexValue);\n      newArray.splice(newIndex, 1, oldIndexValue);\n      return newArray;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onBlurHandler\", function (trIndex, tdIndex, e) {\n      var value = e.target.innerText;\n\n      var newData = _toConsumableArray(_this.state.data);\n\n      newData = newData.map(function (item, index) {\n        if (index !== trIndex) {\n          return item;\n        }\n\n        return item.map(function (tdItem, index) {\n          if (index !== tdIndex) {\n            return tdItem;\n          }\n\n          return tdItem = value;\n        });\n      });\n\n      _this.setState(_objectSpread({}, _this.state, {\n        data: newData\n      }));\n    });\n\n    return _this;\n  }\n\n  _createClass(TableEditable, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevProps.data !== this.props.data && this.props.data !== this.state.data) {\n        this.setState({\n          data: this.props.data\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          className = _this$props.className,\n          small = _this$props.small,\n          bordered = _this$props.bordered,\n          striped = _this$props.striped,\n          hover = _this$props.hover,\n          data = _this$props.data,\n          columns = _this$props.columns,\n          responsive = _this$props.responsive,\n          responsiveSm = _this$props.responsiveSm,\n          responsiveMd = _this$props.responsiveMd,\n          responsiveLg = _this$props.responsiveLg,\n          responsiveXl = _this$props.responsiveXl,\n          attributes = _objectWithoutProperties(_this$props, [\"className\", \"small\", \"bordered\", \"striped\", \"hover\", \"data\", \"columns\", \"responsive\", \"responsiveSm\", \"responsiveMd\", \"responsiveLg\", \"responsiveXl\"]);\n\n      var classes = classNames(\"table\", small && \"table-sm\", bordered && \"table-bordered\", striped && \"table-striped\", hover && \"table-hover\", className);\n      var wrapperClasses = classNames(\"table-editable text-center\", responsive && \"table-responsive\", responsiveSm && \"table-responsive-sm\", responsiveMd && \"table-responsive-md\", responsiveLg && \"table-responsive-lg\", responsiveXl && \"table-responsive-xl\");\n      return React.createElement(\"div\", {\n        className: wrapperClasses\n      }, React.createElement(\"span\", {\n        onClick: this.addRow,\n        className: \"table-add float-right mb-3 mr-2\"\n      }, React.createElement(\"a\", {\n        href: \"#!\",\n        className: \"text-success\"\n      }, React.createElement(Fa, {\n        icon: \"plus\",\n        size: \"2x\"\n      }))), React.createElement(\"table\", _extends({}, attributes, {\n        className: classes\n      }), React.createElement(\"thead\", null, React.createElement(\"tr\", null, this.props.columns && this.props.columns.map(function (th, i) {\n        return React.createElement(\"th\", {\n          key: i\n        }, th);\n      }), React.createElement(\"th\", null, \"Sort \"), React.createElement(\"th\", null, \"Delete \"))), React.createElement(\"tbody\", null, this.state.data.map(function (tr, trIndex) {\n        return React.createElement(\"tr\", {\n          key: trIndex\n        }, tr.map(function (td, tdIndex) {\n          return React.createElement(\"td\", {\n            key: tdIndex,\n            contentEditable: true,\n            suppressContentEditableWarning: \"true\",\n            onBlur: function onBlur(e) {\n              return _this2.onBlurHandler(trIndex, tdIndex, e);\n            }\n          }, td);\n        }), React.createElement(\"td\", null, React.createElement(\"span\", {\n          onClick: function onClick() {\n            return _this2.decreaseIndex(trIndex);\n          },\n          className: \"table-up\"\n        }, React.createElement(\"a\", {\n          href: \"#!\",\n          className: \"indigo-text\"\n        }, React.createElement(Fa, {\n          icon: \"long-arrow-alt-up\"\n        }))), React.createElement(\"span\", {\n          onClick: function onClick() {\n            return _this2.increaseIndex(trIndex);\n          },\n          className: \"table-down\"\n        }, React.createElement(\"a\", {\n          href: \"#!\",\n          className: \"indigo-text\"\n        }, React.createElement(Fa, {\n          icon: \"long-arrow-alt-down\"\n        })))), React.createElement(\"td\", null, React.createElement(\"span\", {\n          onClick: function onClick() {\n            return _this2.removeRow(trIndex);\n          },\n          className: \"table-remove\"\n        }, React.createElement(\"button\", {\n          type: \"button\",\n          className: \"btn btn-danger btn-rounded btn-sm my-0\"\n        }, \"Remove\"))));\n      }))));\n    }\n  }]);\n\n  return TableEditable;\n}(React.Component);\n\nTableEditable.propTypes = {\n  className: propTypes.string,\n  small: propTypes.bool,\n  bordered: propTypes.bool,\n  striped: propTypes.bool,\n  hover: propTypes.bool,\n  data: propTypes.array,\n  columns: propTypes.array,\n  children: propTypes.node,\n  responsive: propTypes.bool,\n  responsiveSm: propTypes.bool,\n  responsiveMd: propTypes.bool,\n  responsiveLg: propTypes.bool,\n  responsiveXl: propTypes.bool\n};\n\nvar Testimonial = function Testimonial(props) {\n  var className = props.className,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"className\", \"tag\"]);\n\n  var classes = classNames(\"testimonial\", className);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nTestimonial.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string\n};\nTestimonial.defaultProps = {\n  tag: \"div\"\n};\nvar css$h = \"@media (max-width: 1025px) {\\n  .stepper.timeline li {\\n    -webkit-box-align: end;\\n    -webkit-align-items: flex-end;\\n    -ms-flex-align: end;\\n    align-items: flex-end;\\n  }\\n}\\n\\n.stepper.timeline li a {\\n  padding: 0px 24px;\\n  left: 50%;\\n}\\n@media (max-width: 450px) {\\n  .stepper.timeline li a {\\n    left: 6%;\\n  }\\n}\\n@media (min-width: 451px) and (max-width: 1025px) {\\n  .stepper.timeline li a {\\n    left: 6%;\\n  }\\n}\\n.stepper.timeline li a .circle {\\n  width: 50px;\\n  height: 50px;\\n  line-height: 50px;\\n  font-size: 1.4em;\\n  text-align: center;\\n  position: absolute;\\n  top: 16px;\\n  margin-left: -50px;\\n  background-color: #fff;\\n  z-index: 2;\\n}\\n\\n.stepper.timeline li .step-content {\\n  width: 45%;\\n  float: left;\\n  border-radius: 2px;\\n  position: relative;\\n  background-color: #fff;\\n}\\n.stepper.timeline li .step-content:before {\\n  position: absolute;\\n  top: 26px;\\n  right: -15px;\\n  display: inline-block;\\n  border-top: 15px solid transparent;\\n  border-left: 15px solid #e0e0e0;\\n  border-right: 0 solid #e0e0e0;\\n  border-bottom: 15px solid transparent;\\n  content: \\\" \\\";\\n}\\n.stepper.timeline li .step-content:after {\\n  position: absolute;\\n  top: 27px;\\n  right: -14px;\\n  display: inline-block;\\n  border-top: 14px solid transparent;\\n  border-left: 14px solid #fff;\\n  border-right: 0 solid #fff;\\n  border-bottom: 14px solid transparent;\\n  content: \\\" \\\";\\n}\\n@media (max-width: 450px) {\\n  .stepper.timeline li .step-content {\\n    width: 80%;\\n    left: 3rem;\\n    margin-right: 3rem;\\n    margin-bottom: 2rem;\\n    float: right;\\n  }\\n  .stepper.timeline li .step-content:before {\\n    border-left-width: 0;\\n    border-right-width: 15px;\\n    left: -15px;\\n    right: auto;\\n  }\\n  .stepper.timeline li .step-content:after {\\n    border-left-width: 0;\\n    border-right-width: 14px;\\n    left: -14px;\\n    right: auto;\\n  }\\n}\\n@media (min-width: 451px) and (max-width: 1025px) {\\n  .stepper.timeline li .step-content {\\n    width: 85%;\\n    left: 3rem;\\n    margin-right: 3rem;\\n    margin-bottom: 2rem;\\n    float: right;\\n  }\\n  .stepper.timeline li .step-content:before {\\n    border-left-width: 0;\\n    border-right-width: 15px;\\n    left: -15px;\\n    right: auto;\\n  }\\n  .stepper.timeline li .step-content:after {\\n    border-left-width: 0;\\n    border-right-width: 14px;\\n    left: -14px;\\n    right: auto;\\n  }\\n}\\n\\n.stepper.timeline li.timeline-inverted {\\n  -webkit-box-align: end;\\n  -webkit-align-items: flex-end;\\n  -ms-flex-align: end;\\n  align-items: flex-end;\\n}\\n.stepper.timeline li.timeline-inverted .step-content {\\n  float: right;\\n}\\n.stepper.timeline li.timeline-inverted .step-content:before {\\n  border-left-width: 0;\\n  border-right-width: 15px;\\n  left: -15px;\\n  right: auto;\\n}\\n.stepper.timeline li.timeline-inverted .step-content:after {\\n  border-left-width: 0;\\n  border-right-width: 14px;\\n  left: -14px;\\n  right: auto;\\n}\\n\\n.stepper.timeline.stepper-vertical li:not(:last-child):after {\\n  content: \\\" \\\";\\n  position: absolute;\\n  width: 3px;\\n  background-color: #e0e0e0;\\n  left: 50%;\\n  top: 57px;\\n  margin-left: -1.5px;\\n}\\n@media (max-width: 450px) {\\n  .stepper.timeline.stepper-vertical li:not(:last-child):after {\\n    left: 6%;\\n  }\\n}\\n@media (min-width: 451px) and (max-width: 1025px) {\\n  .stepper.timeline.stepper-vertical li:not(:last-child):after {\\n    left: 6%;\\n  }\\n}\\n\";\nstyleInject(css$h);\n\nvar Timeline = function Timeline(props) {\n  var children = props.children;\n  return React.createElement(\"ul\", {\n    className: \"stepper stepper-vertical timeline pl-0\"\n  }, children);\n};\n\nvar TimelineStep = function TimelineStep(props) {\n  var href = props.href,\n      color = props.color,\n      icon = props.icon,\n      iconBrand = props.iconBrand,\n      iconClass = props.iconClass,\n      iconLight = props.iconLight,\n      iconRegular = props.iconRegular,\n      iconSize = props.iconSize,\n      className = props.className,\n      children = props.children,\n      inverted = props.inverted,\n      colorful = props.colorful,\n      hoverable = props.hoverable,\n      label = props.label;\n  var circleClasses = classNames(\"circle\", \"z-depth-1-half\", color ? color : \"primary-color\", className);\n  var stepContentClasses = classNames(\"step-content\", \"z-depth-1\", \"ml-xl-0\", colorful ? \"p-0 mt-2\" : \"p-4\", hoverable && \"hoverable\");\n  var liClasses = classNames(inverted && \"timeline-inverted\");\n  return React.createElement(\"li\", {\n    className: liClasses\n  }, React.createElement(\"a\", {\n    href: href\n  }, React.createElement(\"span\", {\n    className: circleClasses\n  }, icon && React.createElement(Fa, {\n    icon: icon,\n    size: iconSize,\n    brand: iconBrand,\n    light: iconLight,\n    regular: iconRegular,\n    className: iconClass\n  }), label)), React.createElement(\"div\", {\n    className: stepContentClasses\n  }, children));\n};\n\nTimelineStep.propTypes = {\n  href: propTypes.string,\n  color: propTypes.string,\n  size: propTypes.string,\n  icon: propTypes.string,\n  iconBrand: propTypes.bool,\n  iconClass: propTypes.string,\n  iconLight: propTypes.bool,\n  iconRegular: propTypes.bool,\n  iconSize: propTypes.string,\n  className: propTypes.string\n};\nTimelineStep.defaultProps = {\n  href: \"#\"\n};\nvar css$i = \".time-picker-clock {\\n  border-radius: 100%;\\n  position: relative;\\n  /* transition: 0.3s cubic-bezier(.25,.8,.50,1); */\\n  user-select: none;\\n  background: #f0f0f0;\\n  animation: show-up-clock 0.2s linear;\\n}\\n@keyframes show-up-clock {\\n  0% {\\n    opacity: 0;\\n    transform: scale(0.7);\\n  }\\n  100% {\\n    opacity: 1;\\n    transform: scale(1);\\n  }\\n}\\n.time-picker-clock__container {\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  padding: 10px;\\n}\\n.time-picker-clock__hand {\\n  height: calc(50% - 28px);\\n  width: 2px;\\n  bottom: 50%;\\n  left: calc(50% - 1px);\\n  transform-origin: center bottom;\\n  position: absolute;\\n  will-change: transform;\\n  z-index: 1;\\n  background-color: rgba(0, 150, 136, 0.25);\\n}\\n\\n.time-picker-clock__hand.between .time-picker-clock__hand--ring {\\n  background-color: rgba(0, 150, 136, 0.25);\\n  border-color: inherit;\\n  border-radius: 100%;\\n  width: 2.5rem;\\n  height: 2.5rem;\\n  content: \\\"\\\";\\n  position: absolute;\\n  top: -3%;\\n  left: 50%;\\n  transform: translate(-50%, -50%);\\n}\\n\\n.time-picker-clock__hand.between .time-picker-clock__hand--ring:before {\\n  background-color: rgba(0, 77, 64, 0.75);\\n  border-color: inherit;\\n  border-radius: 100%;\\n  width: 10px;\\n  height: 10px;\\n  content: \\\"\\\";\\n  position: absolute;\\n  top: 50%;\\n  left: 50%;\\n  transform: translate(-50%, -50%);\\n}\\n\\n.time-picker-clock__hand:after {\\n  content: \\\"\\\";\\n  position: absolute;\\n  height: 6px;\\n  width: 6px;\\n  top: 100%;\\n  left: 50%;\\n  border-radius: 50%;\\n  background-color: rgba(0, 77, 64, 0.75);\\n  opacity: 0.75;\\n  transform: translate(-50%, -50%);\\n}\\n.time-picker-clock > span {\\n  align-items: center;\\n  border-radius: 100%;\\n  cursor: default;\\n  display: flex;\\n  font-size: 1rem;\\n  line-height: 1.2;\\n  justify-content: center;\\n  left: calc(50% - 40px / 2);\\n  height: 40px;\\n  position: absolute;\\n  text-align: center;\\n  top: calc(50% - 40px / 2);\\n  width: 40px;\\n  user-select: none;\\n}\\n.time-picker-clock > span:hover,\\n.time-picker-clock > span.active:hover {\\n  cursor: pointer;\\n}\\n.time-picker-clock > span:active:hover,\\n.time-picker-clock > span.active:active:hover {\\n  cursor: move;\\n}\\n.time-picker-clock:active:hover {\\n  cursor: move;\\n}\\n.time-picker-clock > span > span {\\n  z-index: 1;\\n}\\n\\n.time-picker-clock > span:before,\\n.time-picker-clock > span:after {\\n  content: \\\"\\\";\\n  border-radius: 100%;\\n  position: absolute;\\n  top: 50%;\\n  left: 50%;\\n  height: 14px;\\n  width: 14px;\\n  transform: translate(-50%, -50%);\\n}\\n.time-picker-clock > span > span:after,\\n.time-picker-clock > span > span:before {\\n  height: 40px;\\n  width: 40px;\\n}\\n.time-picker-clock > span.active {\\n  color: #fff;\\n  cursor: default;\\n  z-index: 2;\\n  background: blue;\\n}\\n.time-picker-clock > span > span.disabled {\\n  pointer-events: none;\\n}\\n\\n.picker__footer .clockpicker-button {\\n  padding-left: 10px;\\n  padding-right: 10px;\\n}\\n\";\nstyleInject(css$i);\nvar propTypes$3 = {\n  color: propTypes.string.isRequired,\n  hours: propTypes.string.isRequired,\n  minutes: propTypes.string.isRequired,\n  dayTime: propTypes.string.isRequired,\n  unitsMode: propTypes.string.isRequired,\n  handleModeChange: propTypes.func.isRequired,\n  hoursFormat: propTypes.number.isRequired\n};\n\nvar TimePickerDisplay = function TimePickerDisplay(_ref) {\n  var color = _ref.color,\n      hours = _ref.hours,\n      minutes = _ref.minutes,\n      dayTime = _ref.dayTime,\n      unitsMode = _ref.unitsMode,\n      handleModeChange = _ref.handleModeChange,\n      hoursFormat = _ref.hoursFormat;\n  var displayClasses = classNames('picker__date-display', \"btn-\".concat(color));\n  var hourClasses = classNames('clockpicker-span-hours', unitsMode === 'h' && 'text-primary');\n  var minuteClasses = classNames('clockpicker-span-minutes', unitsMode === 'm' && 'text-primary');\n  return React.createElement(\"div\", {\n    className: displayClasses\n  }, React.createElement(\"div\", {\n    className: \"clockpicker-display\"\n  }, React.createElement(\"div\", {\n    className: \"clockpicker-display-column\"\n  }, React.createElement(\"span\", {\n    className: hourClasses,\n    onClick: function onClick() {\n      return handleModeChange('h');\n    }\n  }, hours !== '' ? hours : \"--\"), \":\", React.createElement(\"span\", {\n    className: minuteClasses,\n    onClick: function onClick() {\n      return handleModeChange('m');\n    }\n  }, minutes !== '' ? minutes : \"--\")), hoursFormat === 12 && React.createElement(\"div\", {\n    className: \"clockpicker-display-column clockpicker-display-am-pm\"\n  }, React.createElement(\"div\", {\n    className: \"clockpicker-span-am-pm\"\n  }, dayTime.toUpperCase()))));\n};\n\nTimePickerDisplay.propTypes = propTypes$3;\nvar propTypes$4 = {\n  angle: propTypes.number.isRequired,\n  color: propTypes.string.isRequired,\n  scale: propTypes.number.isRequired\n};\n\nvar TimpiePickerClockHand = function TimpiePickerClockHand(_ref) {\n  var angle = _ref.angle,\n      between = _ref.between,\n      color = _ref.color,\n      scale = _ref.scale;\n  var classes = classNames('time-picker-clock__hand', color, between && 'between');\n  return React.createElement(\"div\", {\n    className: classes,\n    style: {\n      transform: \"rotate(\".concat(angle, \"deg)\"),\n      height: \"calc((50% - 28px) * \".concat(scale, \")\")\n    }\n  }, React.createElement(\"div\", {\n    className: \"time-picker-clock__hand--ring\"\n  }));\n};\n\nTimpiePickerClockHand.propTypes = propTypes$4;\nvar propTypes$5 = {\n  className: propTypes.string.isRequired,\n  handleChange: propTypes.func.isRequired,\n  max: propTypes.number.isRequired,\n  min: propTypes.number.isRequired,\n  rotate: propTypes.number.isRequired,\n  step: propTypes.number.isRequired,\n  startFromInner: propTypes.bool.isRequired,\n  allowedValues: propTypes.arrayOf(propTypes.number),\n  autoSwitch: propTypes.bool,\n  color: propTypes.string,\n  \"double\": propTypes.bool,\n  handleModeChange: propTypes.func,\n  size: propTypes.number,\n  value: propTypes.number\n};\nvar defaultProps$1 = {\n  allowedValues: [],\n  autoSwitch: false,\n  color: 'priamry',\n  \"double\": false,\n  handleModeChange: function handleModeChange() {},\n  size: 270,\n  value: 0\n};\n\nvar TimePickerClock =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TimePickerClock, _Component);\n\n  function TimePickerClock(props) {\n    var _this;\n\n    _classCallCheck(this, TimePickerClock);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TimePickerClock).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"buildComponentState\", function () {\n      var _this$props = _this.props,\n          size = _this$props.size,\n          max = _this$props.max,\n          min = _this$props.min,\n          _double = _this$props[\"double\"],\n          rotate = _this$props.rotate,\n          value = _this$props.value;\n      var clockRadius = size / 2;\n      var digitsAmount = max - min + 1;\n      var digitsInRound = _double ? digitsAmount / 2 : digitsAmount;\n      var degreesPerUnit = 360 / digitsInRound;\n      var outerRadius = clockRadius - 4;\n      var innerRadius = clockRadius - Math.max(clockRadius * 0.2, 40); // cant be lower than 40\n\n      var degrees = degreesPerUnit * Math.PI / 180;\n      var handAngle = rotate + degreesPerUnit * (value - min);\n\n      _this.setState({\n        clockRadius: clockRadius,\n        degrees: degrees,\n        degreesPerUnit: degreesPerUnit,\n        digitsInRound: digitsInRound,\n        handAngle: handAngle,\n        innerRadius: innerRadius,\n        outerRadius: outerRadius,\n        value: value\n      }, function () {\n        return _this.setState({\n          handScale: _this.getScale(value)\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getScale\", function (value) {\n      if (_this.props.startFromInner && _this.props[\"double\"]) {\n        return value - _this.props.min >= _this.state.digitsInRound ? _this.state.outerRadius / _this.state.clockRadius : _this.state.innerRadius / _this.state.clockRadius;\n      }\n\n      return value - _this.props.min >= _this.state.digitsInRound ? _this.state.innerRadius / _this.state.clockRadius : _this.state.outerRadius / _this.state.clockRadius;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getAngle\", function (center, p1) {\n      var value = 2 * Math.atan2(p1.y - center.y - _this.euclidean(center, p1), p1.x - center.x);\n      return Math.abs(value * 180 / Math.PI);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getCoords\", function (e) {\n      var _this$clockRef$curren = _this.clockRef.current.getBoundingClientRect(),\n          width = _this$clockRef$curren.width,\n          top = _this$clockRef$curren.top,\n          left = _this$clockRef$curren.left;\n\n      var _ref = 'touches' in e ? e.touches[0] : e,\n          clientX = _ref.clientX,\n          clientY = _ref.clientY;\n\n      var center = {\n        x: width / 2,\n        y: -width / 2\n      };\n      var coords = {\n        x: clientX - left,\n        y: top - clientY\n      };\n      return {\n        center: center,\n        coords: coords\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setPosition\", function (value) {\n      var radius = (_this.state.clockRadius - 24) * _this.getScale(value);\n\n      var rotateRadians = _this.props.rotate * Math.PI / 180;\n      return {\n        x: Math.round(Math.sin((value - _this.props.min) * _this.state.degrees + rotateRadians) * radius),\n        y: Math.round(-Math.cos((value - _this.props.min) * _this.state.degrees + rotateRadians) * radius)\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isValueAllowed\", function (value) {\n      return _this.props.allowedValues.length ? _this.props.allowedValues.find(function (item) {\n        return item === value;\n      }) : value >= _this.props.min && value <= _this.props.max;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isOnInner\", function (center, coords) {\n      var centerDistance = _this.euclidean(center, coords);\n\n      var betweenRadiusDistance = (_this.state.outerRadius + _this.state.innerRadius) / 2 - 16;\n\n      if (_this.props[\"double\"]) {\n        return _this.props.startFromInner ? centerDistance > betweenRadiusDistance : centerDistance < betweenRadiusDistance;\n      }\n\n      return false;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"computeTimeNumber\", function (number) {\n      return number < 10 ? \"0\".concat(number.toString()) : \"\".concat(number.toString());\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"computeHandAngle\", function (exactAngle) {\n      if (360 % _this.props.max !== 0) {\n        return exactAngle >= 360 - _this.state.degreesPerUnit / 2 ? 0 : exactAngle;\n      }\n\n      return exactAngle <= _this.state.degreesPerUnit / 2 ? 360 : exactAngle;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"euclidean\", function (p0, p1) {\n      var dx = p1.x - p0.x;\n      var dy = p1.y - p0.y;\n      return Math.sqrt(dx * dx + dy * dy);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"transformPosition\", function (value) {\n      var _this$setPosition = _this.setPosition(value),\n          x = _this$setPosition.x,\n          y = _this$setPosition.y;\n\n      return {\n        transform: \"translate(\".concat(x, \"px, \").concat(y, \"px)\")\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"genClockDigits\", function () {\n      var children = [];\n\n      var _loop = function _loop(value) {\n        var classes = classNames('clockpicker-tick', value === _this.state.value && 'active', !_this.isValueAllowed(value) && 'disabled');\n        children.push(React.createElement(\"span\", {\n          className: classes,\n          style: Object.assign(_this.transformPosition(value), {\n            fontSize: !_this.props[\"double\"] ? '140%' : _this.props.startFromInner ? value <= 12 ? '120%' : '100%' : value > 12 ? '120%' : '100%'\n          }),\n          key: value,\n          onMouseDown: function onMouseDown(e) {\n            return _this.onMouseDown(e, value);\n          },\n          onTouchStart: function onTouchStart(e) {\n            return _this.onMouseDown(e, value);\n          }\n        }, _this.props.max > 24 ? _this.computeTimeNumber(value) : value === 24 ? '00' : value));\n      };\n\n      for (var value = _this.props.min; value <= _this.props.max; value += _this.props.step) {\n        _loop(value);\n      }\n\n      return children;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onMouseDown\", function (e, value) {\n      e.preventDefault();\n\n      _this.setState({\n        isDragging: true\n      });\n\n      var handAngle = _this.props.rotate + _this.state.degreesPerUnit * (value - _this.props.min);\n\n      var handScale = _this.getScale(value);\n\n      if (_this.state.value !== value && _this.isValueAllowed(value)) {\n        _this.updateValue(value, handAngle, handScale);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onMouseUp\", function (e) {\n      e.preventDefault();\n\n      if (_this.state.isDragging) {\n        _this.setState({\n          isDragging: false\n        });\n\n        if (_this.props.autoSwitch) _this.props.handleModeChange('m');\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onMouseLeave\", function (e) {\n      e.preventDefault();\n      if (_this.state.isDragging) _this.setState({\n        isDragging: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDragMove\", function (e) {\n      e.preventDefault();\n      if (!_this.state.isDragging && e.type !== 'click') return;\n\n      var _this$getCoords = _this.getCoords(e),\n          center = _this$getCoords.center,\n          coords = _this$getCoords.coords;\n\n      var isOnInner = _this.isOnInner(center, coords);\n\n      var exactHandAngle = _this.getAngle(center, coords);\n\n      var computedHandAngle = _this.computeHandAngle(exactHandAngle);\n\n      var value = Math.round((computedHandAngle - _this.props.rotate) / _this.state.degreesPerUnit) + _this.props.min + (isOnInner ? _this.state.digitsInRound : 0);\n      var handAngle = _this.props.rotate + _this.state.degreesPerUnit * (value - _this.props.min);\n\n      var handScale = _this.getScale(value);\n\n      if (_this.state.value !== value && _this.isValueAllowed(value)) {\n        _this.updateValue(value, handAngle, handScale);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateValue\", function (value, handAngle, handScale) {\n      _this.props.handleChange(value);\n\n      _this.setState({\n        value: value,\n        handAngle: handAngle,\n        handScale: handScale\n      });\n    });\n\n    _this.state = {\n      clockRadius: 135,\n      degrees: 30,\n      digitsInRound: 12,\n      degreesPerUnit: 30,\n      handAngle: 0,\n      handScale: 1,\n      isDragging: false,\n      innerRadius: 120,\n      outerRadius: 266,\n      value: 0\n    };\n    _this.clockRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(TimePickerClock, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.buildComponentState();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevProps.max !== this.props.max || prevProps.min !== this.props.min || this.state.value !== this.props.value) {\n        this.buildComponentState();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var classes = classNames('time-picker-clock', 'clockpicker-dial', this.props.className, this.state.value === null && 'time-picker-clock--indeterminate');\n      return React.createElement(\"div\", {\n        className: classes,\n        style: {\n          height: \"\".concat(this.props.size, \"px\"),\n          width: \"\".concat(this.props.size, \"px\"),\n          visibility: 'visible'\n        },\n        onMouseDown: this.onMouseDown,\n        onMouseUp: this.onMouseUp,\n        onMouseLeave: this.onMouseLeave,\n        onTouchStart: this.onMouseDown,\n        onTouchEnd: this.onMouseUp,\n        onMouseMove: this.onDragMove,\n        onTouchMove: this.onDragMove,\n        ref: this.clockRef\n      }, React.createElement(TimpiePickerClockHand, {\n        between: this.state.value % this.props.step !== 0,\n        color: this.props.color,\n        angle: this.state.handAngle,\n        scale: this.state.handScale\n      }), this.genClockDigits());\n    }\n  }]);\n\n  return TimePickerClock;\n}(Component);\n\nTimePickerClock.propTypes = propTypes$5;\nTimePickerClock.defaultProps = defaultProps$1;\nvar propTypes$6 = {\n  color: propTypes.string.isRequired,\n  dayTime: propTypes.string.isRequired,\n  handleDayTimeChange: propTypes.func.isRequired\n};\n\nvar TimePickerAmPmBlock = function TimePickerAmPmBlock(_ref) {\n  var color = _ref.color,\n      dayTime = _ref.dayTime,\n      handleDayTimeChange = _ref.handleDayTimeChange;\n  var classesAM = classNames('btn-floating', 'btn-flat', 'clockpicker-button', 'am-button', dayTime === 'am' && 'active', \"btn-\".concat(color));\n  var classesPM = classNames('btn-floating', 'btn-flat', 'clockpicker-button', 'pm-button', dayTime === 'pm' && 'active', \"btn-\".concat(color));\n  return React.createElement(\"div\", {\n    className: \"clockpicker-am-pm-block d-flex justify-content-between\"\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    className: classesAM,\n    onClick: function onClick() {\n      return handleDayTimeChange('am');\n    }\n  }, \"AM\"), React.createElement(\"button\", {\n    type: \"button\",\n    className: classesPM,\n    onClick: function onClick() {\n      return handleDayTimeChange('pm');\n    }\n  }, \"PM\"));\n};\n\nTimePickerAmPmBlock.propTypes = propTypes$6;\nvar propTypes$7 = {\n  cancelable: propTypes.bool.isRequired,\n  cancelText: propTypes.string.isRequired,\n  clearable: propTypes.bool.isRequired,\n  clearText: propTypes.string.isRequired,\n  doneText: propTypes.string.isRequired,\n  handleCancelClick: propTypes.func.isRequired,\n  handleClearClick: propTypes.func.isRequired,\n  handleDoneClick: propTypes.func.isRequired\n};\n\nvar TimePickerFooter = function TimePickerFooter(_ref) {\n  var cancelable = _ref.cancelable,\n      cancelText = _ref.cancelText,\n      clearable = _ref.clearable,\n      clearText = _ref.clearText,\n      doneText = _ref.doneText,\n      handleCancelClick = _ref.handleCancelClick,\n      handleClearClick = _ref.handleClearClick,\n      handleDoneClick = _ref.handleDoneClick;\n  return React.createElement(\"div\", {\n    className: \"picker__footer\"\n  }, clearable && React.createElement(Button, {\n    flat: true,\n    className: \"clockpicker-button\",\n    tabIndex: \"0\",\n    onClick: handleClearClick\n  }, clearText), cancelable && React.createElement(Button, {\n    flat: true,\n    className: \"clockpicker-button\",\n    tabIndex: \"0\",\n    onClick: handleCancelClick\n  }, cancelText), React.createElement(Button, {\n    flat: true,\n    className: \"clockpicker-button\",\n    tabIndex: \"0\",\n    onClick: handleDoneClick\n  }, doneText));\n};\n\nTimePickerFooter.propTypes = propTypes$7;\nvar propTypes$8 = {\n  id: propTypes.string.isRequired,\n  allowedValues: propTypes.arrayOf(propTypes.number),\n  autoSwitch: propTypes.bool,\n  cancelable: propTypes.bool,\n  cancelText: propTypes.string,\n  clearable: propTypes.bool,\n  clearText: propTypes.string,\n  closeOnCancel: propTypes.bool,\n  color: propTypes.string,\n  doneText: propTypes.string,\n  getValue: propTypes.func,\n  hours: propTypes.number,\n  hoursFormat: propTypes.number,\n  label: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.object]),\n  minutes: propTypes.number,\n  placeholder: propTypes.string,\n  startFromInner: propTypes.bool\n};\nvar defaultProps$2 = {\n  allowedValues: [],\n  autoSwitch: true,\n  cancelable: false,\n  cancelText: 'Cancel',\n  clearable: false,\n  clearText: 'Clear',\n  closeOnCancel: false,\n  color: 'primary',\n  doneText: 'Done',\n  getValue: function getValue() {},\n  hours: 12,\n  hoursFormat: 12,\n  label: '',\n  minutes: 0,\n  placeholder: '',\n  startFromInner: true\n};\n\nvar TimePicker =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TimePicker, _Component);\n\n  function TimePicker(props) {\n    var _this;\n\n    _classCallCheck(this, TimePicker);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TimePicker).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"setInputText\", function () {\n      var value = '';\n\n      if (_this.state.hours !== null && _this.state.minutes !== null) {\n        value = _this.props.hoursFormat === 12 ? \"\".concat(_this.state.computedHours, \":\").concat(_this.state.computedMinutes).concat(_this.state.dayTime.toUpperCase()) : \"\".concat(_this.state.computedHours, \":\").concat(_this.state.computedMinutes);\n      }\n\n      _this.setState({\n        value: value,\n        unitsMode: 'h'\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"computeTimeNumber\", function (number) {\n      if (number !== null) {\n        number = _this.state.unitsMode === 'h' && number === 24 ? 0 : number;\n        return number < 10 ? \"0\".concat(number.toString()) : \"\".concat(number.toString());\n      }\n\n      return '';\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handlePickerDialogOpen\", function () {\n      return _this.setState({\n        pickerDialogOpen: !_this.state.pickerDialogOpen\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleModeChange\", function (unitsMode) {\n      return _this.setState({\n        unitsMode: unitsMode\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDayTimeChange\", function (dayTime) {\n      return _this.setState({\n        dayTime: dayTime\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleMinutesChange\", function (minutes) {\n      return _this.setState({\n        minutes: minutes\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleHoursChange\", function (hours) {\n      _this.setState({\n        hours: hours\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleBackdropClick\", function (e) {\n      if (e.target.classList.value === 'picker__holder') {\n        _this.handlePickerDialogOpen();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDoneClick\", function () {\n      _this.setInputText();\n\n      _this.handlePickerDialogOpen();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClearClick\", function () {\n      _this.handleHoursChange(null);\n\n      _this.handleMinutesChange(null);\n\n      _this.handleModeChange('h');\n\n      _this.handleDayTimeChange('am');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleCancelClick\", function () {\n      _this.handleHoursChange(_this.props.hours);\n\n      _this.handleMinutesChange(_this.props.minutes);\n\n      _this.handleModeChange('h');\n\n      _this.handleDayTimeChange('am');\n\n      if (_this.props.closeOnCancel) {\n        _this.handlePickerDialogOpen();\n      }\n    });\n\n    _this.state = {\n      allowedValues: [],\n      computedHours: '',\n      computedMinutes: '',\n      dayTime: 'am',\n      hours: _this.props.hours,\n      minutes: _this.props.minutes,\n      pickerDialogOpen: false,\n      unitsMode: 'h',\n      value: ''\n    };\n    return _this;\n  }\n\n  _createClass(TimePicker, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.setState({\n        computedHours: this.computeTimeNumber(this.state.hours),\n        computedMinutes: this.computeTimeNumber(this.state.minutes)\n      }, function () {\n        return _this2.setInputText();\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevState.minutes !== this.state.minutes) {\n        this.setState({\n          computedMinutes: this.computeTimeNumber(this.state.minutes)\n        });\n      }\n\n      if (prevState.hours !== this.state.hours) {\n        this.setState({\n          computedHours: this.computeTimeNumber(this.state.hours)\n        });\n      }\n\n      if (prevState.value !== this.state.value) {\n        this.props.getValue(this.state.value);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          computedHours = _this$state.computedHours,\n          computedMinutes = _this$state.computedMinutes,\n          dayTime = _this$state.dayTime,\n          hours = _this$state.hours,\n          minutes = _this$state.minutes,\n          pickerDialogOpen = _this$state.pickerDialogOpen,\n          unitsMode = _this$state.unitsMode,\n          value = _this$state.value;\n      var _this$props = this.props,\n          allowedValues = _this$props.allowedValues,\n          autoSwitch = _this$props.autoSwitch,\n          cancelable = _this$props.cancelable,\n          cancelText = _this$props.cancelText,\n          clearable = _this$props.clearable,\n          clearText = _this$props.clearText,\n          color = _this$props.color,\n          doneText = _this$props.doneText,\n          hoursFormat = _this$props.hoursFormat,\n          id = _this$props.id,\n          label = _this$props.label,\n          placeholder = _this$props.placeholder,\n          startFromInner = _this$props.startFromInner;\n      var inputClasses = classNames(\"form-control\", \"timepicker\", pickerDialogOpen && \"picker__input picker__input--active\");\n      var clockClasses = classNames(\"clockpicker\", \"picker\", pickerDialogOpen && \"picker--opened\");\n      var hoursClasses = classNames(\"clockpicker-hours\", unitsMode !== \"h\" && \"clockpicker-dial-out\");\n      var minutesClasses = classNames(\"clockpicker-minutes\", unitsMode !== \"m\" && \"clockpicker-dial-out\");\n      return React.createElement(\"div\", {\n        className: \"md-form\"\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: placeholder,\n        id: id,\n        className: inputClasses,\n        value: value,\n        onClick: this.handlePickerDialogOpen,\n        readOnly: true\n      }), React.createElement(\"label\", {\n        htmlFor: id,\n        className: \"active\"\n      }, label), pickerDialogOpen && React.createElement(\"div\", {\n        className: clockClasses\n      }, React.createElement(\"div\", {\n        className: \"picker__holder\",\n        onClick: this.handleBackdropClick\n      }, React.createElement(\"div\", {\n        className: \"picker__frame\"\n      }, React.createElement(\"div\", {\n        className: \"picker__wrap\"\n      }, React.createElement(\"div\", {\n        className: \"picker__box\"\n      }, React.createElement(TimePickerDisplay, {\n        color: color,\n        hours: computedHours,\n        minutes: computedMinutes,\n        dayTime: dayTime,\n        unitsMode: unitsMode,\n        handleModeChange: this.handleModeChange,\n        hoursFormat: hoursFormat\n      }), React.createElement(\"div\", {\n        className: \"picker__calendar-container\"\n      }, React.createElement(\"div\", {\n        className: \"clockpicker-plate\"\n      }, unitsMode === 'h' ? React.createElement(TimePickerClock, {\n        allowedValues: allowedValues,\n        autoSwitch: autoSwitch,\n        className: hoursClasses,\n        color: color,\n        \"double\": hoursFormat === 24,\n        handleChange: this.handleHoursChange,\n        handleModeChange: this.handleModeChange,\n        min: 1,\n        max: hoursFormat,\n        step: 1,\n        rotate: 30,\n        startFromInner: startFromInner,\n        value: hours\n      }) : React.createElement(TimePickerClock, {\n        className: minutesClasses,\n        color: color,\n        handleChange: this.handleMinutesChange,\n        min: 0,\n        max: 59,\n        step: 5,\n        rotate: 0,\n        startFromInner: startFromInner,\n        value: minutes\n      })), hoursFormat === 12 && React.createElement(TimePickerAmPmBlock, {\n        color: color,\n        dayTime: dayTime,\n        handleDayTimeChange: this.handleDayTimeChange\n      })), React.createElement(TimePickerFooter, {\n        cancelText: cancelText,\n        clearText: clearText,\n        doneText: doneText,\n        cancelable: cancelable,\n        clearable: clearable,\n        handleCancelClick: this.handleCancelClick,\n        handleClearClick: this.handleClearClick,\n        handleDoneClick: this.handleDoneClick\n      })))))));\n    }\n  }]);\n\n  return TimePicker;\n}(Component);\n\nTimePicker.propTypes = propTypes$8;\nTimePicker.defaultProps = defaultProps$2;\nvar css$j = \".Toastify__toast-container {\\n  z-index: 9999;\\n  position: fixed;\\n  padding: 4px;\\n  width: 320px;\\n  box-sizing: border-box;\\n  color: #fff; }\\n  .Toastify__toast-container--top-left {\\n    top: 1em;\\n    left: 1em; }\\n  .Toastify__toast-container--top-center {\\n    top: 1em;\\n    left: 50%;\\n    margin-left: -160px; }\\n  .Toastify__toast-container--top-right {\\n    top: 1em;\\n    right: 1em; }\\n  .Toastify__toast-container--bottom-left {\\n    bottom: 1em;\\n    left: 1em; }\\n  .Toastify__toast-container--bottom-center {\\n    bottom: 1em;\\n    left: 50%;\\n    margin-left: -160px; }\\n  .Toastify__toast-container--bottom-right {\\n    bottom: 1em;\\n    right: 1em; }\\n\\n@media only screen and (max-width: 480px) {\\n  .Toastify__toast-container {\\n    width: 100vw;\\n    padding: 0;\\n    left: 0;\\n    margin: 0; }\\n    .Toastify__toast-container--top-left, .Toastify__toast-container--top-center, .Toastify__toast-container--top-right {\\n      top: 0; }\\n    .Toastify__toast-container--bottom-left, .Toastify__toast-container--bottom-center, .Toastify__toast-container--bottom-right {\\n      bottom: 0; }\\n    .Toastify__toast-container--rtl {\\n      right: 0;\\n      left: initial; } }\\n\\n.Toastify__toast {\\n  position: relative;\\n  min-height: 64px;\\n  box-sizing: border-box;\\n  margin-bottom: 1rem;\\n  padding: 8px;\\n  border-radius: 1px;\\n  box-shadow: 0 1px 10px 0 rgba(0, 0, 0, 0.1), 0 2px 15px 0 rgba(0, 0, 0, 0.05);\\n  display: -ms-flexbox;\\n  display: flex;\\n  -ms-flex-pack: justify;\\n      justify-content: space-between;\\n  max-height: 800px;\\n  overflow: hidden;\\n  font-family: sans-serif;\\n  cursor: pointer;\\n  direction: ltr; }\\n  .Toastify__toast--rtl {\\n    direction: rtl; }\\n  .Toastify__toast--default {\\n    background: #fff;\\n    color: #aaa; }\\n  .Toastify__toast--info {\\n    background: #3498db; }\\n  .Toastify__toast--success {\\n    background: #07bc0c; }\\n  .Toastify__toast--warning {\\n    background: #f1c40f; }\\n  .Toastify__toast--error {\\n    background: #e74c3c; }\\n  .Toastify__toast-body {\\n    margin: auto 0;\\n    -ms-flex: 1;\\n        flex: 1; }\\n\\n@media only screen and (max-width: 480px) {\\n  .Toastify__toast {\\n    margin-bottom: 0; } }\\n\\n.Toastify__close-button {\\n  color: #fff;\\n  font-weight: bold;\\n  font-size: 14px;\\n  background: transparent;\\n  outline: none;\\n  border: none;\\n  padding: 0;\\n  cursor: pointer;\\n  opacity: 0.7;\\n  transition: 0.3s ease;\\n  -ms-flex-item-align: start;\\n      align-self: flex-start; }\\n  .Toastify__close-button--default {\\n    color: #000;\\n    opacity: 0.3; }\\n  .Toastify__close-button:hover, .Toastify__close-button:focus {\\n    opacity: 1; }\\n\\n@keyframes Toastify__trackProgress {\\n  0% {\\n    transform: scaleX(1); }\\n  100% {\\n    transform: scaleX(0); } }\\n\\n.Toastify__progress-bar {\\n  position: absolute;\\n  bottom: 0;\\n  left: 0;\\n  width: 100%;\\n  height: 5px;\\n  z-index: 9999;\\n  opacity: 0.7;\\n  background-color: rgba(255, 255, 255, 0.7);\\n  transform-origin: left; }\\n  .Toastify__progress-bar--animated {\\n    animation: Toastify__trackProgress linear 1 forwards; }\\n  .Toastify__progress-bar--controlled {\\n    transition: transform .2s; }\\n  .Toastify__progress-bar--rtl {\\n    right: 0;\\n    left: initial;\\n    transform-origin: right; }\\n  .Toastify__progress-bar--default {\\n    background: linear-gradient(to right, #4cd964, #5ac8fa, #007aff, #34aadc, #5856d6, #ff2d55); }\\n\\n@keyframes Toastify__bounceInRight {\\n  from,\\n  60%,\\n  75%,\\n  90%,\\n  to {\\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1); }\\n  from {\\n    opacity: 0;\\n    transform: translate3d(3000px, 0, 0); }\\n  60% {\\n    opacity: 1;\\n    transform: translate3d(-25px, 0, 0); }\\n  75% {\\n    transform: translate3d(10px, 0, 0); }\\n  90% {\\n    transform: translate3d(-5px, 0, 0); }\\n  to {\\n    transform: none; } }\\n\\n@keyframes Toastify__bounceOutRight {\\n  20% {\\n    opacity: 1;\\n    transform: translate3d(-20px, 0, 0); }\\n  to {\\n    opacity: 0;\\n    transform: translate3d(2000px, 0, 0); } }\\n\\n@keyframes Toastify__bounceInLeft {\\n  from,\\n  60%,\\n  75%,\\n  90%,\\n  to {\\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1); }\\n  0% {\\n    opacity: 0;\\n    transform: translate3d(-3000px, 0, 0); }\\n  60% {\\n    opacity: 1;\\n    transform: translate3d(25px, 0, 0); }\\n  75% {\\n    transform: translate3d(-10px, 0, 0); }\\n  90% {\\n    transform: translate3d(5px, 0, 0); }\\n  to {\\n    transform: none; } }\\n\\n@keyframes Toastify__bounceOutLeft {\\n  20% {\\n    opacity: 1;\\n    transform: translate3d(20px, 0, 0); }\\n  to {\\n    opacity: 0;\\n    transform: translate3d(-2000px, 0, 0); } }\\n\\n@keyframes Toastify__bounceInUp {\\n  from,\\n  60%,\\n  75%,\\n  90%,\\n  to {\\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1); }\\n  from {\\n    opacity: 0;\\n    transform: translate3d(0, 3000px, 0); }\\n  60% {\\n    opacity: 1;\\n    transform: translate3d(0, -20px, 0); }\\n  75% {\\n    transform: translate3d(0, 10px, 0); }\\n  90% {\\n    transform: translate3d(0, -5px, 0); }\\n  to {\\n    transform: translate3d(0, 0, 0); } }\\n\\n@keyframes Toastify__bounceOutUp {\\n  20% {\\n    transform: translate3d(0, -10px, 0); }\\n  40%,\\n  45% {\\n    opacity: 1;\\n    transform: translate3d(0, 20px, 0); }\\n  to {\\n    opacity: 0;\\n    transform: translate3d(0, -2000px, 0); } }\\n\\n@keyframes Toastify__bounceInDown {\\n  from,\\n  60%,\\n  75%,\\n  90%,\\n  to {\\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1); }\\n  0% {\\n    opacity: 0;\\n    transform: translate3d(0, -3000px, 0); }\\n  60% {\\n    opacity: 1;\\n    transform: translate3d(0, 25px, 0); }\\n  75% {\\n    transform: translate3d(0, -10px, 0); }\\n  90% {\\n    transform: translate3d(0, 5px, 0); }\\n  to {\\n    transform: none; } }\\n\\n@keyframes Toastify__bounceOutDown {\\n  20% {\\n    transform: translate3d(0, 10px, 0); }\\n  40%,\\n  45% {\\n    opacity: 1;\\n    transform: translate3d(0, -20px, 0); }\\n  to {\\n    opacity: 0;\\n    transform: translate3d(0, 2000px, 0); } }\\n\\n.Toastify__bounce-enter--top-left, .Toastify__bounce-enter--bottom-left {\\n  animation-name: Toastify__bounceInLeft; }\\n\\n.Toastify__bounce-enter--top-right, .Toastify__bounce-enter--bottom-right {\\n  animation-name: Toastify__bounceInRight; }\\n\\n.Toastify__bounce-enter--top-center {\\n  animation-name: Toastify__bounceInDown; }\\n\\n.Toastify__bounce-enter--bottom-center {\\n  animation-name: Toastify__bounceInUp; }\\n\\n.Toastify__bounce-exit--top-left, .Toastify__bounce-exit--bottom-left {\\n  animation-name: Toastify__bounceOutLeft; }\\n\\n.Toastify__bounce-exit--top-right, .Toastify__bounce-exit--bottom-right {\\n  animation-name: Toastify__bounceOutRight; }\\n\\n.Toastify__bounce-exit--top-center {\\n  animation-name: Toastify__bounceOutUp; }\\n\\n.Toastify__bounce-exit--bottom-center {\\n  animation-name: Toastify__bounceOutDown; }\\n\\n@keyframes Toastify__zoomIn {\\n  from {\\n    opacity: 0;\\n    transform: scale3d(0.3, 0.3, 0.3); }\\n  50% {\\n    opacity: 1; } }\\n\\n@keyframes Toastify__zoomOut {\\n  from {\\n    opacity: 1; }\\n  50% {\\n    opacity: 0;\\n    transform: scale3d(0.3, 0.3, 0.3); }\\n  to {\\n    opacity: 0; } }\\n\\n.Toastify__zoom-enter {\\n  animation-name: Toastify__zoomIn; }\\n\\n.Toastify__zoom-exit {\\n  animation-name: Toastify__zoomOut; }\\n\\n@keyframes Toastify__flipIn {\\n  from {\\n    transform: perspective(400px) rotate3d(1, 0, 0, 90deg);\\n    animation-timing-function: ease-in;\\n    opacity: 0; }\\n  40% {\\n    transform: perspective(400px) rotate3d(1, 0, 0, -20deg);\\n    animation-timing-function: ease-in; }\\n  60% {\\n    transform: perspective(400px) rotate3d(1, 0, 0, 10deg);\\n    opacity: 1; }\\n  80% {\\n    transform: perspective(400px) rotate3d(1, 0, 0, -5deg); }\\n  to {\\n    transform: perspective(400px); } }\\n\\n@keyframes Toastify__flipOut {\\n  from {\\n    transform: perspective(400px); }\\n  30% {\\n    transform: perspective(400px) rotate3d(1, 0, 0, -20deg);\\n    opacity: 1; }\\n  to {\\n    transform: perspective(400px) rotate3d(1, 0, 0, 90deg);\\n    opacity: 0; } }\\n\\n.Toastify__flip-enter {\\n  animation-name: Toastify__flipIn; }\\n\\n.Toastify__flip-exit {\\n  animation-name: Toastify__flipOut; }\\n\\n@keyframes Toastify__slideInRight {\\n  from {\\n    transform: translate3d(110%, 0, 0);\\n    visibility: visible; }\\n  to {\\n    transform: translate3d(0, 0, 0); } }\\n\\n@keyframes Toastify__slideInLeft {\\n  from {\\n    transform: translate3d(-110%, 0, 0);\\n    visibility: visible; }\\n  to {\\n    transform: translate3d(0, 0, 0); } }\\n\\n@keyframes Toastify__slideInUp {\\n  from {\\n    transform: translate3d(0, 110%, 0);\\n    visibility: visible; }\\n  to {\\n    transform: translate3d(0, 0, 0); } }\\n\\n@keyframes Toastify__slideInDown {\\n  from {\\n    transform: translate3d(0, -110%, 0);\\n    visibility: visible; }\\n  to {\\n    transform: translate3d(0, 0, 0); } }\\n\\n@keyframes Toastify__slideOutRight {\\n  from {\\n    transform: translate3d(0, 0, 0); }\\n  to {\\n    visibility: hidden;\\n    transform: translate3d(110%, 0, 0); } }\\n\\n@keyframes Toastify__slideOutLeft {\\n  from {\\n    transform: translate3d(0, 0, 0); }\\n  to {\\n    visibility: hidden;\\n    transform: translate3d(-110%, 0, 0); } }\\n\\n@keyframes Toastify__slideOutDown {\\n  from {\\n    transform: translate3d(0, 0, 0); }\\n  to {\\n    visibility: hidden;\\n    transform: translate3d(0, 500px, 0); } }\\n\\n@keyframes Toastify__slideOutUp {\\n  from {\\n    transform: translate3d(0, 0, 0); }\\n  to {\\n    visibility: hidden;\\n    transform: translate3d(0, -500px, 0); } }\\n\\n.Toastify__slide-enter--top-left, .Toastify__slide-enter--bottom-left {\\n  animation-name: Toastify__slideInLeft; }\\n\\n.Toastify__slide-enter--top-right, .Toastify__slide-enter--bottom-right {\\n  animation-name: Toastify__slideInRight; }\\n\\n.Toastify__slide-enter--top-center {\\n  animation-name: Toastify__slideInDown; }\\n\\n.Toastify__slide-enter--bottom-center {\\n  animation-name: Toastify__slideInUp; }\\n\\n.Toastify__slide-exit--top-left, .Toastify__slide-exit--bottom-left {\\n  animation-name: Toastify__slideOutLeft; }\\n\\n.Toastify__slide-exit--top-right, .Toastify__slide-exit--bottom-right {\\n  animation-name: Toastify__slideOutRight; }\\n\\n.Toastify__slide-exit--top-center {\\n  animation-name: Toastify__slideOutUp; }\\n\\n.Toastify__slide-exit--bottom-center {\\n  animation-name: Toastify__slideOutDown; }\";\nstyleInject(css$j); // FREE\n\nexport { Alert, Animation, Autocomplete, Avatar, Badge, Breadcrumb, BreadcrumbItem, Button, ButtonFixed, ButtonFixed$1 as ButtonFixedItem, ButtonGroup, ButtonToolbar, Card, CardBody, CardFooter, CardGroup, CardHeader, CardImage, CardText, CardTitle, CardUp, Carousel, CarouselCaption, Control as CarouselControl, CarouselIndicator, CarouselIndicators, CarouselInner, CarouselItem, Chip, ChipsInput, MDBCloseIcon as CloseIcon, Col, Collapse, CollapseHeader, Container, DataTable, DatePicker, Dropdown, DropdownItem, DropdownMenu, DropdownToggle, EdgeHeader, ExportToCSV, Fa, RotatingCard as FlippingCard, Footer, FormInline, FreeBird, HamburgerToggler, Iframe, Input, InputFile, InputGroup, InputNumeric, InputRange, InputSwitch, Jumbotron, css$c as LightboxStyles, ListGroup, ListGroupItem, Alert as MDBAlert, Animation as MDBAnimation, Autocomplete as MDBAutocomplete, Avatar as MDBAvatar, Badge as MDBBadge, Breadcrumb as MDBBreadcrumb, BreadcrumbItem as MDBBreadcrumbItem, Button as MDBBtn, ButtonFixed as MDBBtnFixed, ButtonFixed$1 as MDBBtnFixedItem, ButtonGroup as MDBBtnGroup, ButtonToolbar as MDBBtnToolbar, Card as MDBCard, CardBody as MDBCardBody, CardFooter as MDBCardFooter, CardGroup as MDBCardGroup, CardHeader as MDBCardHeader, CardImage as MDBCardImage, CardText as MDBCardText, CardTitle as MDBCardTitle, CardUp as MDBCardUp, Carousel as MDBCarousel, CarouselCaption as MDBCarouselCaption, CarouselIndicator as MDBCarouselIndicator, CarouselIndicators as MDBCarouselIndicators, CarouselInner as MDBCarouselInner, CarouselItem as MDBCarouselItem, Chip as MDBChip, ChipsInput as MDBChipsInput, MDBCloseIcon, Col as MDBCol, Collapse as MDBCollapse, CollapseHeader as MDBCollapseHeader, Container as MDBContainer, Control as MDBControl, DataTable as MDBDataTable, DatePicker as MDBDatePicker, Dropdown as MDBDropdown, DropdownItem as MDBDropdownItem, DropdownMenu as MDBDropdownMenu, DropdownToggle as MDBDropdownToggle, EdgeHeader as MDBEdgeHeader, ExportToCSV as MDBExportToCSV, InputFile as MDBFileInput, Footer as MDBFooter, FormInline as MDBFormInline, FreeBird as MDBFreeBird, HamburgerToggler as MDBHamburgerToggler, Fa as MDBIcon, Iframe as MDBIframe, Input as MDBInput, InputGroup as MDBInputGroup, InputNumeric as MDBInputSelect, Jumbotron as MDBJumbotron, ListGroup as MDBListGroup, ListGroupItem as MDBListGroupItem, Mask as MDBMask, Media as MDBMedia, Modal as MDBModal, ModalBody as MDBModalBody, ModalFooter as MDBModalFooter, ModalHeader as MDBModalHeader, Nav as MDBNav, NavItem as MDBNavItem, NavLink as MDBNavLink, Navbar as MDBNavbar, NavbarBrand as MDBNavbarBrand, NavbarNav as MDBNavbarNav, NavbarToggler as MDBNavbarToggler, Notification as MDBNotification, PageItem as MDBPageItem, PageLink as MDBPageNav, Pagination as MDBPagination, Popper as MDBPopover, PopoverBody as MDBPopoverBody, PopoverHeader as MDBPopoverHeader, Popper as MDBPopper, Progress as MDBProgress, InputRange as MDBRangeInput, RotatingCard as MDBRotatingCard, Row as MDBRow, ScrollBar as MDBScrollbar, ScrollBox as MDBScrollspyBox, ScrollSpyList as MDBScrollspyList, ScrollSpyListItem as MDBScrollspyListItem, ScrollSpyText as MDBScrollspyText, Select as MDBSelect, SelectInput$1 as MDBSelectInput, SelectOption as MDBSelectOption, Options as MDBSelectOptions, SideNav as MDBSideNav, SideNavCat as MDBSideNavCat, SideNavItem as MDBSideNavItem, SideNavLink as MDBSideNavLink, SideNavNav as MDBSideNavNav, SimpleChart as MDBSimpleChart, SmoothScroll as MDBSmoothScroll, Spinner as MDBSpinner, Step as MDBStep, Stepper as MDBStepper, Sticky as MDBSticky, Container$1 as MDBStickyContent, MDBStreak, InputSwitch as MDBSwitch, TabContent as MDBTabContent, TabPane as MDBTabPane, Table as MDBTable, TableBody as MDBTableBody, TableEditable as MDBTableEditable, TableFoot as MDBTableFoot, TableHead as MDBTableHead, Testimonial as MDBTestimonial, TimePicker as MDBTimePicker, Timeline as MDBTimeline, TimelineStep as MDBTimelineStep, Popper as MDBTooltip, Treeview as MDBTreeview, TreeviewItem as MDBTreeviewItem, TreeviewList as MDBTreeviewList, View as MDBView, Waves as MDBWaves, Mask, Media, Modal, ModalBody, ModalFooter, ModalHeader, Nav, NavItem, NavLink, Navbar, NavbarBrand, NavbarNav, NavbarToggler, Notification, PageItem, PageLink, Pagination, ScrollBar as PerfectScrollbar, Popper as Popover, PopoverBody, PopoverHeader, Popper, Progress, Row, ScrollBox as ScrollSpyBox, ScrollSpyList, ScrollSpyListItem, ScrollSpyText, Select, SelectInput$1 as SelectInput, SelectOption, Options as SelectOptions, SideNav, SideNavCat, SideNavItem, SideNavLink, SideNavNav, SimpleChart, SmoothScroll, Spinner, Step, Stepper, Sticky, Container$1 as StickyContainer, MDBStreak as Streak, TabContent, TabPane, Table, TableBody, TableEditable, TableFoot, TableHead, Testimonial, TimePicker, Timeline, TimelineStep, Popper as Tooltip, Treeview, TreeviewItem, TreeviewList, View, Waves };","map":null,"metadata":{},"sourceType":"module"}