{"ast":null,"code":"'use strict'; //------------------------SPEECH RECOGNITION-----------------------------\n\nvar synth = window.speechSynthesis; //-----------------------JS Global Variable----------------------------\n\nvar voices = []; //------------------------COMPONENT-----------------------------\n\nvar populateVoiceList = function populateVoiceList() {\n  var voices = synth.getVoices();\n\n  for (var i = 0; i < voices.length; i++) {\n    var option = document.createElement('option');\n    option.textContent = voices[i].name + ' (' + voices[i].lang + ')';\n\n    if (voices[i].default) {\n      option.textContent += ' -- DEFAULT';\n    }\n\n    option.setAttribute('data-lang', voices[i].lang);\n    option.setAttribute('data-name', voices[i].name);\n  }\n};\n\nexport var handleListen = function handleListen(text) {\n  populateVoiceList();\n  var inputForm = document.querySelector('form');\n  var inputTxt = document.querySelector('.txt');\n\n  if (speechSynthesis.onvoiceschanged !== undefined) {\n    speechSynthesis.onvoiceschanged = function () {\n      populateVoiceList();\n    };\n  }\n\n  var utterThis = new SpeechSynthesisUtterance(text); // let selectedOption = voiceSelect.selectedOptions[0].getAttribute('data-name');\n\n  for (var i = 0; i < voices.length; i++) {\n    utterThis.voice = voices[i]; // if(voices[i].name === selectedOption) {\n    //\n    // }\n  }\n\n  utterThis.pitch = 1;\n  utterThis.rate = 1;\n  synth.speak(utterThis);\n};","map":{"version":3,"sources":["/Users/vivian/Desktop/Front_End/src/page/RRH/Component/speech-syn/index.js"],"names":["synth","window","speechSynthesis","voices","populateVoiceList","getVoices","i","length","option","document","createElement","textContent","name","lang","default","setAttribute","handleListen","text","inputForm","querySelector","inputTxt","onvoiceschanged","undefined","utterThis","SpeechSynthesisUtterance","voice","pitch","rate","speak"],"mappings":"AACA,a,CAIA;;AAGA,IAAMA,KAAK,GAAGC,MAAM,CAACC,eAArB,C,CAEA;;AAGA,IAAMC,MAAM,GAAG,EAAf,C,CAEA;;AAKA,IAAMC,iBAAiB,GAAC,SAAlBA,iBAAkB,GAAI;AACxB,MAAID,MAAM,GAAGH,KAAK,CAACK,SAAN,EAAb;;AACA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGH,MAAM,CAACI,MAA1B,EAAmCD,CAAC,EAApC,EAAwC;AACpC,QAAIE,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAb;AACAF,IAAAA,MAAM,CAACG,WAAP,GAAqBR,MAAM,CAACG,CAAD,CAAN,CAAUM,IAAV,GAAiB,IAAjB,GAAwBT,MAAM,CAACG,CAAD,CAAN,CAAUO,IAAlC,GAAyC,GAA9D;;AACA,QAAGV,MAAM,CAACG,CAAD,CAAN,CAAUQ,OAAb,EAAsB;AAClBN,MAAAA,MAAM,CAACG,WAAP,IAAsB,aAAtB;AACH;;AAEDH,IAAAA,MAAM,CAACO,YAAP,CAAoB,WAApB,EAAiCZ,MAAM,CAACG,CAAD,CAAN,CAAUO,IAA3C;AACAL,IAAAA,MAAM,CAACO,YAAP,CAAoB,WAApB,EAAiCZ,MAAM,CAACG,CAAD,CAAN,CAAUM,IAA3C;AAEH;AACJ,CAbD;;AAcA,OAAO,IAAMI,YAAY,GAAC,SAAbA,YAAa,CAACC,IAAD,EAAQ;AAC9Bb,EAAAA,iBAAiB;AACjB,MAAIc,SAAS,GAAGT,QAAQ,CAACU,aAAT,CAAuB,MAAvB,CAAhB;AACA,MAAIC,QAAQ,GAAGX,QAAQ,CAACU,aAAT,CAAuB,MAAvB,CAAf;;AAEA,MAAIjB,eAAe,CAACmB,eAAhB,KAAoCC,SAAxC,EAAmD;AAC/CpB,IAAAA,eAAe,CAACmB,eAAhB,GAAiC,YAAI;AAACjB,MAAAA,iBAAiB;AAAI,KAA3D;AACH;;AAID,MAAImB,SAAS,GAAG,IAAIC,wBAAJ,CAA6BP,IAA7B,CAAhB,CAX8B,CAY9B;;AACA,OAAI,IAAIX,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGH,MAAM,CAACI,MAA1B,EAAmCD,CAAC,EAApC,EAAwC;AACpCiB,IAAAA,SAAS,CAACE,KAAV,GAAkBtB,MAAM,CAACG,CAAD,CAAxB,CADoC,CAEpC;AACA;AACA;AACH;;AACDiB,EAAAA,SAAS,CAACG,KAAV,GAAkB,CAAlB;AACAH,EAAAA,SAAS,CAACI,IAAV,GAAiB,CAAjB;AACA3B,EAAAA,KAAK,CAAC4B,KAAN,CAAYL,SAAZ;AAEH,CAvBM","sourcesContent":["\n'use strict'\n\n\n\n//------------------------SPEECH RECOGNITION-----------------------------\n\n\nconst synth = window.speechSynthesis\n\n//-----------------------JS Global Variable----------------------------\n\n\nconst voices = [];\n\n//------------------------COMPONENT-----------------------------\n\n\n\n\nconst populateVoiceList=()=>{\n    let voices = synth.getVoices();\n    for(let i = 0; i < voices.length ; i++) {\n        let option = document.createElement('option');\n        option.textContent = voices[i].name + ' (' + voices[i].lang + ')';\n        if(voices[i].default) {\n            option.textContent += ' -- DEFAULT';\n        }\n\n        option.setAttribute('data-lang', voices[i].lang);\n        option.setAttribute('data-name', voices[i].name);\n\n    }\n}\nexport const handleListen=(text)=>{\n    populateVoiceList()\n    let inputForm = document.querySelector('form');\n    let inputTxt = document.querySelector('.txt');\n\n    if (speechSynthesis.onvoiceschanged !== undefined) {\n        speechSynthesis.onvoiceschanged =()=>{populateVoiceList();}\n    }\n\n\n\n    let utterThis = new SpeechSynthesisUtterance(text);\n    // let selectedOption = voiceSelect.selectedOptions[0].getAttribute('data-name');\n    for(let i = 0; i < voices.length ; i++) {\n        utterThis.voice = voices[i];\n        // if(voices[i].name === selectedOption) {\n        //\n        // }\n    }\n    utterThis.pitch = 1;\n    utterThis.rate = 1;\n    synth.speak(utterThis);\n\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}