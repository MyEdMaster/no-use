{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nexports.default = SpeechRecognition;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction SpeechRecognition(options) {\n  var SpeechRecognitionInner = function SpeechRecognitionInner(WrappedComponent) {\n    var BrowserSpeechRecognition = typeof window !== 'undefined' && (window.SpeechRecognition || window.webkitSpeechRecognition || window.mozSpeechRecognition || window.msSpeechRecognition || window.oSpeechRecognition);\n    var recognition = BrowserSpeechRecognition ? new BrowserSpeechRecognition() : null;\n    var browserSupportsSpeechRecognition = recognition !== null;\n    var listening = undefined;\n\n    if (!browserSupportsSpeechRecognition || options && options.autoStart === false) {\n      listening = false;\n    } else {\n      recognition.start();\n      listening = true;\n    }\n\n    var pauseAfterDisconnect = false;\n    var interimTranscript = '';\n    var finalTranscript = '';\n    return function (_Component) {\n      _inherits(SpeechRecognitionContainer, _Component);\n\n      function SpeechRecognitionContainer(props) {\n        _classCallCheck(this, SpeechRecognitionContainer);\n\n        var _this = _possibleConstructorReturn(this, (SpeechRecognitionContainer.__proto__ || Object.getPrototypeOf(SpeechRecognitionContainer)).call(this, props));\n\n        _this.disconnect = function (disconnectType) {\n          if (recognition) {\n            switch (disconnectType) {\n              case 'ABORT':\n                pauseAfterDisconnect = true;\n                recognition.abort();\n                break;\n\n              case 'RESET':\n                pauseAfterDisconnect = false;\n                recognition.abort();\n                break;\n\n              case 'STOP':\n              default:\n                pauseAfterDisconnect = true;\n                recognition.stop();\n            }\n          }\n        };\n\n        _this.resetTranscript = function () {\n          interimTranscript = '';\n          finalTranscript = '';\n\n          _this.disconnect('RESET');\n\n          _this.setState({\n            interimTranscript: interimTranscript,\n            finalTranscript: finalTranscript\n          });\n        };\n\n        _this.startListening = function () {\n          if (recognition && !listening) {\n            if (!recognition.continuous) {\n              _this.resetTranscript();\n            }\n\n            try {\n              recognition.start();\n            } catch (DOMException) {// Tried to start recognition after it has already started - safe to swallow this error\n            }\n\n            listening = true;\n\n            _this.setState({\n              listening: listening\n            });\n          }\n        };\n\n        _this.abortListening = function () {\n          listening = false;\n\n          _this.setState({\n            listening: listening\n          });\n\n          _this.disconnect('ABORT');\n        };\n\n        _this.stopListening = function () {\n          listening = false;\n\n          _this.setState({\n            listening: listening\n          });\n\n          _this.disconnect('STOP');\n        };\n\n        if (browserSupportsSpeechRecognition) {\n          recognition.continuous = options.continuous !== false;\n          recognition.interimResults = true;\n          recognition.onresult = _this.updateTranscript.bind(_this);\n          recognition.onend = _this.onRecognitionDisconnect.bind(_this);\n        }\n\n        _this.state = {\n          interimTranscript: interimTranscript,\n          finalTranscript: finalTranscript,\n          listening: listening\n        };\n        return _this;\n      }\n\n      _createClass(SpeechRecognitionContainer, [{\n        key: 'onRecognitionDisconnect',\n        value: function onRecognitionDisconnect() {\n          listening = false;\n\n          if (pauseAfterDisconnect) {\n            this.setState({\n              listening: listening\n            });\n          } else if (recognition) {\n            if (recognition.continuous) {\n              this.startListening();\n            } else {\n              this.setState({\n                listening: listening\n              });\n            }\n          }\n\n          pauseAfterDisconnect = false;\n        }\n      }, {\n        key: 'updateTranscript',\n        value: function updateTranscript(event) {\n          interimTranscript = '';\n\n          for (var i = event.resultIndex; i < event.results.length; ++i) {\n            if (event.results[i].isFinal) {\n              finalTranscript = this.concatTranscripts(finalTranscript, event.results[i][0].transcript);\n            } else {\n              interimTranscript = this.concatTranscripts(interimTranscript, event.results[i][0].transcript);\n            }\n          }\n\n          this.setState({\n            finalTranscript: finalTranscript,\n            interimTranscript: interimTranscript\n          });\n        }\n      }, {\n        key: 'concatTranscripts',\n        value: function concatTranscripts() {\n          for (var _len = arguments.length, transcriptParts = Array(_len), _key = 0; _key < _len; _key++) {\n            transcriptParts[_key] = arguments[_key];\n          }\n\n          return transcriptParts.map(function (t) {\n            return t.trim();\n          }).join(' ').trim();\n        }\n      }, {\n        key: 'render',\n        value: function render() {\n          var transcript = this.concatTranscripts(finalTranscript, interimTranscript);\n          return _react2.default.createElement(WrappedComponent, _extends({\n            resetTranscript: this.resetTranscript,\n            startListening: this.startListening,\n            abortListening: this.abortListening,\n            stopListening: this.stopListening,\n            transcript: transcript,\n            recognition: recognition,\n            browserSupportsSpeechRecognition: browserSupportsSpeechRecognition\n          }, this.state, this.props));\n        }\n      }]);\n\n      return SpeechRecognitionContainer;\n    }(_react.Component);\n  };\n\n  if (typeof options === 'function') {\n    return SpeechRecognitionInner(options);\n  } else {\n    return SpeechRecognitionInner;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}