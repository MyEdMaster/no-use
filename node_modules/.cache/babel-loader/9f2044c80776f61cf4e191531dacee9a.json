{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\yuwei\\\\Desktop\\\\Front_End\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\yuwei\\\\Desktop\\\\Front_End\\\\src\\\\page\\\\SpeakModule\\\\useSpeechSynthesis.jsx\";\nimport React, { useState } from 'react';\nimport { useSpeechSynthesis } from '../Speak';\nimport { Container } from './shared';\n\nvar Example = function Example() {\n  var _useState = useState('I am a robot'),\n      _useState2 = _slicedToArray(_useState, 2),\n      text = _useState2[0],\n      setText = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      voiceIndex = _useState4[0],\n      setVoiceIndex = _useState4[1];\n\n  var onEnd = function onEnd() {// You could do something here after speaking has finished\n  };\n\n  var _useSpeechSynthesis = useSpeechSynthesis({\n    onEnd: onEnd\n  }),\n      speak = _useSpeechSynthesis.speak,\n      cancel = _useSpeechSynthesis.cancel,\n      speaking = _useSpeechSynthesis.speaking,\n      supported = _useSpeechSynthesis.supported,\n      voices = _useSpeechSynthesis.voices;\n\n  var voice = voices[voiceIndex] || null;\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \"Speech Synthesis\"), !supported && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"Oh no, it looks like your browser doesn't support Speech Synthesis.\"), supported && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"Type a message below then click 'Speak'\\n                and SpeechSynthesis will read it out.\"), React.createElement(\"label\", {\n    htmlFor: \"voice\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Voice\"), React.createElement(\"select\", {\n    id: \"voice\",\n    name: \"voice\",\n    value: voiceIndex || '',\n    onChange: function onChange(event) {\n      setVoiceIndex(event.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"Default\"), voices.map(function (option, index) {\n    return React.createElement(\"option\", {\n      key: option.voiceURI,\n      value: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"\".concat(option.lang, \" - \").concat(option.name));\n  })), React.createElement(\"label\", {\n    htmlFor: \"message\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Message\"), React.createElement(\"textarea\", {\n    id: \"message\",\n    name: \"message\",\n    rows: 3,\n    value: text,\n    onChange: function onChange(event) {\n      setText(event.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), speaking ? React.createElement(\"button\", {\n    type: \"button\",\n    onClick: cancel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Stop\") : React.createElement(\"button\", {\n    type: \"button\",\n    onClick: function onClick() {\n      return speak({\n        text: text,\n        voice: voice\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Speak\"))));\n};\n\nexport default Example;","map":{"version":3,"sources":["C:\\Users\\yuwei\\Desktop\\Front_End\\src\\page\\SpeakModule\\useSpeechSynthesis.jsx"],"names":["React","useState","useSpeechSynthesis","Container","Example","text","setText","voiceIndex","setVoiceIndex","onEnd","speak","cancel","speaking","supported","voices","voice","event","target","value","map","option","index","voiceURI","lang","name"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,kBAAT,QAAmC,UAAnC;AACA,SAASC,SAAT,QAA0B,UAA1B;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AAAA,kBACIH,QAAQ,CAAC,cAAD,CADZ;AAAA;AAAA,MACbI,IADa;AAAA,MACPC,OADO;;AAAA,mBAEgBL,QAAQ,CAAC,IAAD,CAFxB;AAAA;AAAA,MAEbM,UAFa;AAAA,MAEDC,aAFC;;AAGpB,MAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM,CAClB;AACD,GAFD;;AAHoB,4BAYhBP,kBAAkB,CAAC;AAAEO,IAAAA,KAAK,EAALA;AAAF,GAAD,CAZF;AAAA,MAOlBC,KAPkB,uBAOlBA,KAPkB;AAAA,MAQlBC,MARkB,uBAQlBA,MARkB;AAAA,MASlBC,QATkB,uBASlBA,QATkB;AAAA,MAUlBC,SAVkB,uBAUlBA,SAVkB;AAAA,MAWlBC,MAXkB,uBAWlBA,MAXkB;;AAcpB,MAAMC,KAAK,GAAGD,MAAM,CAACP,UAAD,CAAN,IAAsB,IAApC;AAEA,SACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAEI,CAACM,SAAD,IACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2EAHJ,EAKGA,SAAS,IACR,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sGADF,EAKE;AAAO,IAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aALF,EAQE;AACE,IAAA,EAAE,EAAC,OADL;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,KAAK,EAAEN,UAAU,IAAI,EAHvB;AAIE,IAAA,QAAQ,EAAE,kBAACS,KAAD,EAAW;AAAER,MAAAA,aAAa,CAACQ,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAb;AAAoC,KAJ7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME;AAAQ,IAAA,KAAK,EAAC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eANF,EAOGJ,MAAM,CAACK,GAAP,CAAW,UAACC,MAAD,EAASC,KAAT;AAAA,WACV;AAAQ,MAAA,GAAG,EAAED,MAAM,CAACE,QAApB;AAA8B,MAAA,KAAK,EAAED,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACMD,MAAM,CAACG,IADb,gBACuBH,MAAM,CAACI,IAD9B,EADU;AAAA,GAAX,CAPH,CARF,EAqBE;AAAO,IAAA,OAAO,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eArBF,EAwBE;AACE,IAAA,EAAE,EAAC,SADL;AAEE,IAAA,IAAI,EAAC,SAFP;AAGE,IAAA,IAAI,EAAE,CAHR;AAIE,IAAA,KAAK,EAAEnB,IAJT;AAKE,IAAA,QAAQ,EAAE,kBAACW,KAAD,EAAW;AAAEV,MAAAA,OAAO,CAACU,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAP;AAA8B,KALvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAxBF,EA+BIN,QAAQ,GAEN;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAED,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFM,GAMN;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAE;AAAA,aAAMD,KAAK,CAAC;AAAEL,QAAAA,IAAI,EAAJA,IAAF;AAAQU,QAAAA,KAAK,EAALA;AAAR,OAAD,CAAX;AAAA,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aArCN,CANJ,CADF,CADF;AAuDD,CAvED;;AAyEA,eAAeX,OAAf","sourcesContent":["import React, { useState } from 'react';\nimport { useSpeechSynthesis } from '../Speak';\nimport { Container } from './shared';\n\nconst Example = () => {\n  const [text, setText] = useState('I am a robot');\n  const [voiceIndex, setVoiceIndex] = useState(null);\n  const onEnd = () => {\n    // You could do something here after speaking has finished\n  };\n  const {\n    speak,\n    cancel,\n    speaking,\n    supported,\n    voices\n  } = useSpeechSynthesis({ onEnd });\n\n  const voice = voices[voiceIndex] || null;\n\n  return (\n    <Container>\n      <form>\n        <h2>Speech Synthesis</h2>\n        { !supported && (\n          <p>Oh no, it looks like your browser doesn&#39;t support Speech Synthesis.</p>\n        )}\n        {supported && (\n          <React.Fragment>\n            <p>\n              {`Type a message below then click 'Speak'\n                and SpeechSynthesis will read it out.`}\n            </p>\n            <label htmlFor=\"voice\">\n              Voice\n            </label>\n            <select\n              id=\"voice\"\n              name=\"voice\"\n              value={voiceIndex || ''}\n              onChange={(event) => { setVoiceIndex(event.target.value); }}\n            >\n              <option value=\"\">Default</option>\n              {voices.map((option, index) => (\n                <option key={option.voiceURI} value={index}>\n                  {`${option.lang} - ${option.name}`}\n                </option>\n              ))}\n            </select>\n            <label htmlFor=\"message\">\n              Message\n            </label>\n            <textarea\n              id=\"message\"\n              name=\"message\"\n              rows={3}\n              value={text}\n              onChange={(event) => { setText(event.target.value); }}\n            />\n            { speaking\n              ? (\n                <button type=\"button\" onClick={cancel}>\n                  Stop\n                </button>\n              ) : (\n                <button type=\"button\" onClick={() => speak({ text, voice })}>\n                  Speak\n                </button>\n              )\n            }\n          </React.Fragment>\n        )}\n      </form>\n    </Container>\n  );\n};\n\nexport default Example;\n"]},"metadata":{},"sourceType":"module"}