{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\yuwei\\\\Desktop\\\\Front_End\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\yuwei\\\\Desktop\\\\Front_End\\\\src\\\\page\\\\SpeakModule\\\\useSpeechRecognition.js\";\nimport React, { useState } from 'react';\nimport { useSpeechRecognition } from '../Speak';\nimport { Container } from './shared';\nvar languageOptions = [{\n  label: 'Cambodian',\n  value: 'km-KH'\n}, {\n  label: 'Deutsch',\n  value: 'de-DE'\n}, {\n  label: 'English',\n  value: 'en-AU'\n}, {\n  label: 'Farsi',\n  value: 'fa-IR'\n}, {\n  label: 'Français',\n  value: 'fr-FR'\n}, {\n  label: 'Italiano',\n  value: 'it-IT'\n}, {\n  label: '普通话 (中国大陆) - Mandarin',\n  value: 'zh'\n}, {\n  label: 'Portuguese',\n  value: 'pt-BR'\n}, {\n  label: 'Español',\n  value: 'es-MX'\n}, {\n  label: 'Svenska - Swedish',\n  value: 'sv-SE'\n}];\n\nvar Example = function Example() {\n  var _useState = useState('en-AU'),\n      _useState2 = _slicedToArray(_useState, 2),\n      lang = _useState2[0],\n      setLang = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      value = _useState4[0],\n      setValue = _useState4[1];\n\n  var onEnd = function onEnd() {// You could do something here after listening has finished\n  };\n\n  var onResult = function onResult(result) {\n    setValue(result);\n  };\n\n  var changeLang = function changeLang(event) {\n    setLang(event.target.value);\n  };\n\n  var _useSpeechRecognition = useSpeechRecognition({\n    onResult: onResult,\n    onEnd: onEnd\n  }),\n      listen = _useSpeechRecognition.listen,\n      listening = _useSpeechRecognition.listening,\n      stop = _useSpeechRecognition.stop,\n      supported = _useSpeechRecognition.supported;\n\n  var toggle = listening ? stop : function () {\n    return listen({\n      lang: lang\n    });\n  };\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    id: \"speech-recognition-form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Speech Recognition\"), !supported && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Oh no, it looks like your browser doesn't support Speech Recognition.\"), supported && React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"Click 'Listen' and start speaking.\\n               SpeechRecognition will provide a transcript of what you are saying.\"), React.createElement(\"label\", {\n    htmlFor: \"language\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Language\"), React.createElement(\"select\", {\n    form: \"speech-recognition-form\",\n    id: \"language\",\n    value: lang,\n    onChange: changeLang,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, languageOptions.map(function (option) {\n    return React.createElement(\"option\", {\n      key: option.value,\n      value: option.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, option.label);\n  })), React.createElement(\"label\", {\n    htmlFor: \"transcript\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"Transcript\"), React.createElement(\"textarea\", {\n    id: \"transcript\",\n    name: \"transcript\",\n    placeholder: \"Waiting to take notes ...\",\n    value: value,\n    rows: 3,\n    disabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, listening ? 'Stop' : 'Listen'))));\n};\n\nexport default Example;","map":{"version":3,"sources":["C:\\Users\\yuwei\\Desktop\\Front_End\\src\\page\\SpeakModule\\useSpeechRecognition.js"],"names":["React","useState","useSpeechRecognition","Container","languageOptions","label","value","Example","lang","setLang","setValue","onEnd","onResult","result","changeLang","event","target","listen","listening","stop","supported","toggle","map","option"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useSpeechRecognition } from '../Speak';\nimport { Container } from './shared';\n\nconst languageOptions = [\n  { label: 'Cambodian', value: 'km-KH' },\n  { label: 'Deutsch', value: 'de-DE' },\n  { label: 'English', value: 'en-AU' },\n  { label: 'Farsi', value: 'fa-IR' },\n  { label: 'Français', value: 'fr-FR' },\n  { label: 'Italiano', value: 'it-IT' },\n  { label: '普通话 (中国大陆) - Mandarin', value: 'zh' },\n  { label: 'Portuguese', value: 'pt-BR' },\n  { label: 'Español', value: 'es-MX' },\n  { label: 'Svenska - Swedish', value: 'sv-SE' }\n];\n\nconst Example = () => {\n  const [lang, setLang] = useState('en-AU');\n  const [value, setValue] = useState('');\n\n  const onEnd = () => {\n    // You could do something here after listening has finished\n  };\n\n  const onResult = (result) => {\n    setValue(result);\n  };\n\n  const changeLang = (event) => {\n    setLang(event.target.value);\n  };\n\n  const {\n    listen,\n    listening,\n    stop,\n    supported\n  } = useSpeechRecognition({ onResult, onEnd });\n\n  const toggle = listening\n    ? stop\n    : () => listen({ lang });\n\n  return (\n    <Container>\n      <form id=\"speech-recognition-form\">\n        <h2>Speech Recognition</h2>\n        {!supported && (\n          <p>Oh no, it looks like your browser doesn&#39;t support Speech Recognition.</p>\n        )}\n        {supported && (\n          <React.Fragment>\n            <p>\n              {`Click 'Listen' and start speaking.\n               SpeechRecognition will provide a transcript of what you are saying.`\n              }\n            </p>\n            <label htmlFor=\"language\">\n              Language\n            </label>\n            <select\n              form=\"speech-recognition-form\"\n              id=\"language\"\n              value={lang}\n              onChange={changeLang}\n            >\n              {languageOptions.map(option => (\n                <option key={option.value} value={option.value}>{option.label}</option>\n              ))}\n            </select>\n            <label htmlFor=\"transcript\">\n              Transcript\n            </label>\n            <textarea\n              id=\"transcript\"\n              name=\"transcript\"\n              placeholder=\"Waiting to take notes ...\"\n              value={value}\n              rows={3}\n              disabled\n            />\n            <button type=\"button\" onClick={toggle}>\n              {listening ? 'Stop' : 'Listen'}\n            </button>\n          </React.Fragment>\n        )}\n      </form>\n    </Container>\n  );\n};\n\nexport default Example;\n"]},"metadata":{},"sourceType":"module"}