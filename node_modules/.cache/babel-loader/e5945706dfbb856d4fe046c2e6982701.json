{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\yuwei\\\\Desktop\\\\Front_End\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\yuwei\\\\Desktop\\\\Front_End\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\yuwei\\\\Desktop\\\\Front_End\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\yuwei\\\\Desktop\\\\Front_End\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\yuwei\\\\Desktop\\\\Front_End\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\yuwei\\\\Desktop\\\\Front_End\\\\src\\\\page\\\\ComplexNumber\\\\Page\\\\page3.js\";\nimport React from 'react';\nimport { Video } from \"../video-component/video\";\nimport { MDBRow, MDBCol, MDBBtn } from 'mdbreact';\nimport { InlineMath, BlockMath } from 'react-katex';\nimport classes from './index.module.css';\nexport var ComplexPage3 =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ComplexPage3, _React$Component);\n\n  function ComplexPage3(props) {\n    var _this;\n\n    _classCallCheck(this, ComplexPage3);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ComplexPage3).call(this, props));\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(ComplexPage3, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"d-flex align-items-baseline justify-content-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: classes.title1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, \"COMPLEX NUMBERS:\"), React.createElement(\"div\", {\n        className: classes.title2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, \"\\xA0Division\")), React.createElement(MDBRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, React.createElement(MDBCol, {\n        size: \"3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }), React.createElement(MDBCol, {\n        size: \"6\",\n        className: classes.font3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, React.createElement(Video, {\n        url: 'https://alistempirefoundation.org/assets/dividingcomplex.mp4',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }))), React.createElement(MDBRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(MDBCol, {\n        size: \"3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }), React.createElement(MDBCol, {\n        size: \"6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: classes.ph,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, \"Dividing complex numbers can be a lot more challenging.\", React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }), \"A \", React.createElement(\"span\", {\n        className: classes.high,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"complex number\"), \" is a combination of a\", React.createElement(\"span\", {\n        className: classes.high,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"real number\"), \" and an \", React.createElement(\"span\", {\n        className: classes.high,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"imaginary number\"), \". We generally write \", React.createElement(\"span\", {\n        className: classes.high,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \"complex numbers\"), \" in \\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"a + bi\"), \"\\xA0form, where  \\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"a\"), \"\\xA0 is the real number and\\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"bi\"), \"\\xA0is the imaginary number. For example, \\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"3 + 7i\"), \"\\xA0or\\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"5 - 2i\"), \"\\xA0.\", React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }), \"Typically, whether adding, subtracting, multiplying or dividing complex numbers, we enclose each complex number inside parentheses like this:\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }), React.createElement(MDBRow, {\n        className: classes.border,\n        center: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: classes.ph2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(BlockMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"(6 - 5i) + (2 + 3i)\"), React.createElement(BlockMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"(4 + 8i) - (3 - 2i)\"), React.createElement(BlockMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \"(7 - 4i)(5 + 9i)\"), React.createElement(BlockMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \"(8 - 6i)/(1- 3i)\"))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        className: classes.ph,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"Dividing complex numbers can be a lot more challenging.\", React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }), \"When adding or subtracting complex numbers, you can only combine \", React.createElement(\"span\", {\n        className: classes.high,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"like terms\"), \", meaning you can only combine the real part of each number together and the imaginary part of each number together.\", React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }), \"So, using the problem\\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"(6 - 5i) + (2 + 3i)\"), \", you would first combine the real parts, the\\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"6\"), \"\\xA0 and the\\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \"2\"), \"\\xA0, to get \\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"8\"), \"\\xA0; and then you would combine the imaginary parts, the \\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"-5i\"), \"\\xA0and the\\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"3i\"), \"\\xA0, to get\\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"-2i\"), \"\\xA0. This leaves you with the complex number \\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"8 - 2i\"), \"\\xA0.\", React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }), \"On a side note, since we are dealing with addition, you could also simply rewrite the problem without the parentheses, \\xA0\\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"(6 - 5i) + (2 + 3i)\"), \", and then combine like terms. That\\u2019s completely legal in the case of an addition problem, but keep in mind it doesn\\u2019t work exactly like that for subtraction. We\\u2019ll talk about that when we discuss subtracting complex numbers.\", React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }), \"Let\\u2019s try another.\", React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }), \"Given \\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \"(-3 + 2i) + (7 - i)\"), \"\\xA0. Combine the real parts, \\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \"-3 + 7\"), \"\\xA0, to get\\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \"4\"), \". Then combine the imaginary parts,\\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"2i - i\"), \", to get\\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"i\"), \". You are left with the complex number \\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"4 + i\"), \".\", React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }), \"Nothing to it, is there? Here are some more for you to try.\", React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }), \"Before we get into dividing complex numbers, you\\u2019ll need to stretch your brain a bit and think back to that thing called a conjugate.\", React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }), \"To form the conjugate of a binomial, you simply change the sign between the two terms. Given the binomial \\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"2 + 5x\"), \", the conjugate would be \\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"2 - 5x\"), \". Given the binomial \\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"3 - 8y\"), \", the conjugate would be \\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"3 + 8y\"), \".\", React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }), \"And, since a complex number is also a binomial comprised of a real term and an imaginary term, given the complex number \\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"5 - 3i\"), \", the complex conjugate would be \\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"5 + 3i\"), \".\", React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }), \"Easy. Alright, now let\\u2019s get back to dividing complex numbers.\", React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }), \"The first step in dividing complex numbers is to multiply the numerator and denominator by the complex conjugate of the denominator. Don\\u2019t panic, it\\u2019s actually very simple. Take a look.\", React.createElement(BlockMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"(3 -2i)/(5 + 4i)\"), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }), \"To form the conjugate of the denominator, \\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"(5 + 4i)\"), \", simply change the sign between the two terms and get \\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"(5 - 4i)\"), \". Now, multiply numerator and denominator by the conjugate, \\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"(5 - 4i)\"), \".\", React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }), React.createElement(BlockMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \"(3 -2i)(5 - 4i)/(5 + 4i)(5 - 4i)\"), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }), \"FOIL the numerator: \\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, \"15 - 12i - 10i + 8i^2)\"), \"\\xA0which becomes \\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \"-8\"), \"\\xA0and combine like terms to get \\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, \"(7 - 22i)\"), \".\", React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), \"FOIL the denominator: \\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, \"25 - 20i + 20i - 16i^2)\"), \"\\xA0 which becomes \\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \"16\"), \", and combine like terms to get \\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, \"41\"), \".\", React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }), \"You end up with \\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, \"(7 - 22i)/41\"), \", but since complex numbers are technically two separate parts and therefore, shouldn\\u2019t share the denominator, we split the answer into two parts like this\", React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }), React.createElement(BlockMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, \"7/41 - (21/44)i\"), \".\", React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }), \"We\\u2019ll do another problem.\", React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }), React.createElement(BlockMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, \"(4 + 6i)/(-1 -3i)\"), \".\", React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }), \"First, multiply both numerator and denominator by the conjugate of the denominator, which is \\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, \"(-1 + 3i)\"), \". Notice how the negative 1 does not change\\u2014only the sign between the two terms changes.\", React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }), React.createElement(BlockMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, \"(4 + 6i)(-1 -3i)/(-1 - 3i)(-1 + 3i)\"), \".\", React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }), \"FOIL the numerator: \\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \"-4 + 12i - 6i + 18i^2\"), \"\\xA0 which becomes\\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, \"-18\"), \"\\xA0and combine like terms to get \\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, \"(-22 + 12i)\"), \".\", React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }), \"FOIL the denominator: \\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, \"1 - 3i + 3i -9i^2\"), \"\\xA0 which becomes\\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, \"9\"), \"\\xA0 and combine like terms to get\\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, \"10\"), \"\\xA0.\", React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }), \"You\\u2019re left with \\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, \"-22 + 12i/10\"), \"\\xA0 which when split becomes \\xA0\", React.createElement(InlineMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, \"-22/10 +(12/10)i\"), \"; . However, you can further reduce each fraction, so your final answer is\", React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }), React.createElement(BlockMath, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, \"-11/5 + (6/5)i\"), \".\", React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }), \"Here are some problems for you to try.\", React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      })))), React.createElement(MDBRow, {\n        center: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(MDBCol, {\n        size: \"2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(MDBBtn, {\n        color: \"deep-purple lighten-1\",\n        className: \"\".concat(classes.btn, \" w-100 mt-3\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, \"Previous Lesson\")), React.createElement(MDBCol, {\n        size: \"2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, React.createElement(MDBBtn, {\n        color: \"deep-purple lighten-1\",\n        className: \"\".concat(classes.btn, \" w-100 mt-3\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, \"Next Lesson\"))));\n    }\n  }]);\n\n  return ComplexPage3;\n}(React.Component);","map":{"version":3,"sources":["C:\\Users\\yuwei\\Desktop\\Front_End\\src\\page\\ComplexNumber\\Page\\page3.js"],"names":["React","Video","MDBRow","MDBCol","MDBBtn","InlineMath","BlockMath","classes","ComplexPage3","props","state","title1","title2","font3","ph","high","border","ph2","btn","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Video} from \"../video-component/video\";\nimport {MDBRow, MDBCol,MDBBtn} from 'mdbreact'\nimport { InlineMath, BlockMath } from 'react-katex';\nimport classes from './index.module.css'\n\n\nexport class ComplexPage3 extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        };\n\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"d-flex align-items-baseline justify-content-center\">\n                    <div className={classes.title1}>\n                        COMPLEX NUMBERS:\n                    </div>\n                    <div className={classes.title2}>\n                        &nbsp;Division\n                    </div>\n                </div>\n\n                <MDBRow>\n                    <MDBCol size=\"3\">\n\n                    </MDBCol>\n                    <MDBCol size=\"6\" className={classes.font3}>\n                        <Video url={'https://alistempirefoundation.org/assets/dividingcomplex.mp4'}/>\n                    </MDBCol>\n                </MDBRow>\n                <MDBRow>\n                    <MDBCol size=\"3\">\n\n                    </MDBCol>\n                    <MDBCol size=\"6\">\n                        <p className={classes.ph}>\n                            Dividing complex numbers can be a lot more challenging.\n                            <tr/><br/>\n                            A <span className={classes.high}>complex number</span> is a combination of a\n                            <span className={classes.high}>real number</span> and an <span className={classes.high}>imaginary number</span>.\n                            We generally write <span className={classes.high}>complex numbers</span> in\n                            &nbsp;<InlineMath>a + bi</InlineMath>&nbsp;form, where  &nbsp;<InlineMath>a</InlineMath>&nbsp;\n                            is the real number and&nbsp;<InlineMath>bi</InlineMath>&nbsp;is the imaginary number. For example,\n                            &nbsp;<InlineMath>3 + 7i</InlineMath>&nbsp;or&nbsp;<InlineMath>5 - 2i</InlineMath>&nbsp;.\n                            <tr/><br/>\n                            Typically, whether adding, subtracting, multiplying or dividing complex numbers, we enclose each complex number inside parentheses like this:\n                        </p>\n                        <br/>\n\n                        <MDBRow className={classes.border} center>\n                            <p className={classes.ph2}>\n                                <BlockMath>(6 - 5i) + (2 + 3i)</BlockMath>\n                                <BlockMath>(4 + 8i) - (3 - 2i)</BlockMath>\n                                <BlockMath>(7 - 4i)(5 + 9i)</BlockMath>\n                                <BlockMath>(8 - 6i)/(1- 3i)</BlockMath>\n                            </p>\n                        </MDBRow>\n                        <br/>\n                        <p className={classes.ph}>\n                            Dividing complex numbers can be a lot more challenging.\n                            <tr/><br/>\n                            When adding or subtracting complex numbers, you can only combine <span className={classes.high}>like terms</span>,\n                            meaning you can only combine the real part of each number together and the imaginary part of each number together.\n                            <tr/><br/>\n                            So, using the problem&nbsp;<InlineMath>(6 - 5i) + (2 + 3i)</InlineMath>\n                            , you would first combine the real parts, the&nbsp;<InlineMath>6</InlineMath>&nbsp;\n                            and the&nbsp;<InlineMath>2</InlineMath>&nbsp;, to get\n                            &nbsp;<InlineMath>8</InlineMath>&nbsp;; and then you would combine the imaginary parts, the\n                            &nbsp;<InlineMath>-5i</InlineMath>&nbsp;and the&nbsp;<InlineMath>3i</InlineMath>&nbsp;,\n                            to get&nbsp;<InlineMath>-2i</InlineMath>&nbsp;. This leaves you with the complex number\n                            &nbsp;<InlineMath>8 - 2i</InlineMath>&nbsp;.\n                            <tr/><br/>\n\n                            On a side note, since we are dealing with addition, you could also simply rewrite the problem without the parentheses,\n                            &nbsp;&nbsp;<InlineMath>(6 - 5i) + (2 + 3i)</InlineMath>, and then combine like terms.\n                            That’s completely legal in the case of an addition problem, but keep in mind it doesn’t work exactly like that for subtraction. We’ll talk about that when we discuss subtracting complex numbers.\n                            <tr/><br/>\n                            Let’s try another.\n                            <tr/><br/>\n\n                            Given\n                            &nbsp;<InlineMath>(-3 + 2i) + (7 - i)</InlineMath>&nbsp;. Combine the real parts,\n                            &nbsp;<InlineMath>-3 + 7</InlineMath>&nbsp;, to get&nbsp;<InlineMath>4</InlineMath>.\n                            Then combine the imaginary parts,&nbsp;<InlineMath>2i - i</InlineMath>,\n                            to get&nbsp;<InlineMath>i</InlineMath>. You are left with the complex number\n                            &nbsp;<InlineMath>4 + i</InlineMath>.\n                            <tr/><br/>\n\n                            Nothing to it, is there? Here are some more for you to try.\n                            <tr/><br/>\n\n                            Before we get into dividing complex numbers, you’ll need to stretch your brain a bit and think back to that thing called a conjugate.\n                            <tr/><br/>\n                            To form the conjugate of a binomial, you simply change the sign between the two terms. Given the binomial\n                            &nbsp;<InlineMath>2 + 5x</InlineMath>, the conjugate would be\n                            &nbsp;<InlineMath>2 - 5x</InlineMath>. Given the binomial\n                            &nbsp;<InlineMath>3 - 8y</InlineMath>, the conjugate would be\n                            &nbsp;<InlineMath>3 + 8y</InlineMath>.\n                            <tr/><br/>\n                            And, since a complex number is also a binomial comprised of a real term and an imaginary term, given the complex number\n                            &nbsp;<InlineMath>5 - 3i</InlineMath>, the complex conjugate would be\n                            &nbsp;<InlineMath>5 + 3i</InlineMath>.\n                            <tr/><br/>\n\n                            Easy. Alright, now let’s get back to dividing complex numbers.\n                            <tr/><br/>\n\n                            The first step in dividing complex numbers is to multiply the numerator and denominator by the complex conjugate of the denominator. Don’t panic, it’s actually very simple. Take a look.\n                            <BlockMath>(3 -2i)/(5 + 4i)</BlockMath>\n                            <tr/><br/>\n                            To form the conjugate of the denominator,\n                            &nbsp;<InlineMath>(5 + 4i)</InlineMath>, simply change the sign between the two terms and get\n                            &nbsp;<InlineMath>(5 - 4i)</InlineMath>. Now, multiply numerator and denominator by the conjugate,\n                            &nbsp;<InlineMath>(5 - 4i)</InlineMath>.\n                            <tr/><br/>\n\n                            <BlockMath>(3 -2i)(5 - 4i)/(5 + 4i)(5 - 4i)</BlockMath>\n                            <tr/><br/>\n\n                            FOIL the numerator:\n                            &nbsp;<InlineMath>15 - 12i - 10i + 8i^2)</InlineMath>&nbsp;which becomes\n                            &nbsp;<InlineMath>-8</InlineMath>&nbsp;and combine like terms to get\n                            &nbsp;<InlineMath>(7 - 22i)</InlineMath>.\n                            <tr/><br/>\n\n                            FOIL the denominator:\n                            &nbsp;<InlineMath>25 - 20i + 20i - 16i^2)</InlineMath>&nbsp;\n                            which becomes &nbsp;<InlineMath>16</InlineMath>, and combine like terms to get\n                            &nbsp;<InlineMath>41</InlineMath>.\n                            <tr/><br/>\n\n                            You end up with\n                            &nbsp;<InlineMath>(7 - 22i)/41</InlineMath>\n                            , but since complex numbers are technically two separate parts and therefore, shouldn’t share the denominator, we split the answer into two parts like this\n                            <tr/><br/>\n                            <BlockMath>7/41 - (21/44)i</BlockMath>.\n                            <tr/><br/>\n                            We’ll do another problem.\n                            <tr/><br/>\n                            <BlockMath>(4 + 6i)/(-1 -3i)</BlockMath>.\n                            <tr/><br/>\n\n\n                            First, multiply both numerator and denominator by the conjugate of the denominator, which is\n                            &nbsp;<InlineMath>(-1 + 3i)</InlineMath>. Notice how the negative 1 does not change—only\n                            the sign between the two terms changes.\n                            <tr/><br/>\n                            <BlockMath>(4 + 6i)(-1 -3i)/(-1 - 3i)(-1 + 3i)</BlockMath>.\n                            <tr/><br/>\n\n                            FOIL the numerator:\n                            &nbsp;<InlineMath>-4 + 12i - 6i + 18i^2</InlineMath>&nbsp;\n                            which becomes&nbsp;<InlineMath>-18</InlineMath>&nbsp;and combine like terms to get\n                            &nbsp;<InlineMath>(-22 + 12i)</InlineMath>.\n                            <tr/><br/>\n\n                            FOIL the denominator:\n                            &nbsp;<InlineMath>1 - 3i + 3i -9i^2</InlineMath>&nbsp;\n                            which becomes&nbsp;<InlineMath>9</InlineMath>&nbsp;\n                            and combine like terms to get&nbsp;<InlineMath>10</InlineMath>&nbsp;.\n                            <tr/><br/>\n                            You’re left with\n                            &nbsp;<InlineMath>-22 + 12i/10</InlineMath>&nbsp;\n                            which when split becomes\n                            &nbsp;<InlineMath>-22/10 +(12/10)i</InlineMath>; . However, you can further reduce each fraction,\n                            so your final answer is\n                            <tr/><br/>\n                            <BlockMath>-11/5 + (6/5)i</BlockMath>.\n                            <tr/><br/>\n                            Here are some problems for you to try.\n                            <tr/><br/>\n                        </p>\n                    </MDBCol>\n                </MDBRow>\n                <MDBRow center>\n                    <MDBCol size=\"2\">\n                        <MDBBtn color=\"deep-purple lighten-1\" className={`${classes.btn} w-100 mt-3`}>Previous Lesson</MDBBtn>\n                    </MDBCol>\n                    <MDBCol size=\"2\">\n                        <MDBBtn color=\"deep-purple lighten-1\" className={`${classes.btn} w-100 mt-3`}>Next Lesson</MDBBtn>\n                    </MDBCol>\n                </MDBRow>\n            </div>\n\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}